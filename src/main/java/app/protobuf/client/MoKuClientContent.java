// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/mo_ku_client.proto

package app.protobuf.client;

public final class MoKuClientContent {
  private MoKuClientContent() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code proto.InspireType}
   */
  public enum InspireType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MONEY_INSPIRE = 1;</code>
     *
     * <pre>
     *金币鼓舞
     * </pre>
     */
    MONEY_INSPIRE(0, 1),
    /**
     * <code>DIAMOND_INSPIRE = 2;</code>
     *
     * <pre>
     *钻石鼓舞
     * </pre>
     */
    DIAMOND_INSPIRE(1, 2),
    ;

    /**
     * <code>MONEY_INSPIRE = 1;</code>
     *
     * <pre>
     *金币鼓舞
     * </pre>
     */
    public static final int MONEY_INSPIRE_VALUE = 1;
    /**
     * <code>DIAMOND_INSPIRE = 2;</code>
     *
     * <pre>
     *钻石鼓舞
     * </pre>
     */
    public static final int DIAMOND_INSPIRE_VALUE = 2;


    public final int getNumber() { return value; }

    public static InspireType valueOf(int value) {
      switch (value) {
        case 1: return MONEY_INSPIRE;
        case 2: return DIAMOND_INSPIRE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<InspireType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<InspireType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<InspireType>() {
            public InspireType findValueByNumber(int number) {
              return InspireType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return app.protobuf.client.MoKuClientContent.getDescriptor().getEnumTypes().get(0);
    }

    private static final InspireType[] VALUES = values();

    public static InspireType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private InspireType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:proto.InspireType)
  }

  /**
   * Protobuf enum {@code proto.MoKuCountInfoType}
   *
   * <pre>
   *进入副本后，各种属性统计
   * </pre>
   */
  public enum MoKuCountInfoType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MOKU_STAGE = 1;</code>
     *
     * <pre>
     *当前阶数
     * </pre>
     */
    MOKU_STAGE(0, 1),
    /**
     * <code>MOKU_KILL_MONSTER = 2;</code>
     *
     * <pre>
     *杀怪数量
     * </pre>
     */
    MOKU_KILL_MONSTER(1, 2),
    /**
     * <code>MOKU_GET_EXP = 3;</code>
     *
     * <pre>
     *获得经验
     * </pre>
     */
    MOKU_GET_EXP(2, 3),
    /**
     * <code>MOKU_INSPIRE_HURT_ADDITION = 4;</code>
     *
     * <pre>
     *鼓舞伤害加成 百分比
     * </pre>
     */
    MOKU_INSPIRE_HURT_ADDITION(3, 4),
    /**
     * <code>MOKU_MEDICINAL_EXP_ADDITION = 5;</code>
     *
     * <pre>
     *药物经验加成 百分比
     * </pre>
     */
    MOKU_MEDICINAL_EXP_ADDITION(4, 5),
    ;

    /**
     * <code>MOKU_STAGE = 1;</code>
     *
     * <pre>
     *当前阶数
     * </pre>
     */
    public static final int MOKU_STAGE_VALUE = 1;
    /**
     * <code>MOKU_KILL_MONSTER = 2;</code>
     *
     * <pre>
     *杀怪数量
     * </pre>
     */
    public static final int MOKU_KILL_MONSTER_VALUE = 2;
    /**
     * <code>MOKU_GET_EXP = 3;</code>
     *
     * <pre>
     *获得经验
     * </pre>
     */
    public static final int MOKU_GET_EXP_VALUE = 3;
    /**
     * <code>MOKU_INSPIRE_HURT_ADDITION = 4;</code>
     *
     * <pre>
     *鼓舞伤害加成 百分比
     * </pre>
     */
    public static final int MOKU_INSPIRE_HURT_ADDITION_VALUE = 4;
    /**
     * <code>MOKU_MEDICINAL_EXP_ADDITION = 5;</code>
     *
     * <pre>
     *药物经验加成 百分比
     * </pre>
     */
    public static final int MOKU_MEDICINAL_EXP_ADDITION_VALUE = 5;


    public final int getNumber() { return value; }

    public static MoKuCountInfoType valueOf(int value) {
      switch (value) {
        case 1: return MOKU_STAGE;
        case 2: return MOKU_KILL_MONSTER;
        case 3: return MOKU_GET_EXP;
        case 4: return MOKU_INSPIRE_HURT_ADDITION;
        case 5: return MOKU_MEDICINAL_EXP_ADDITION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MoKuCountInfoType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MoKuCountInfoType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MoKuCountInfoType>() {
            public MoKuCountInfoType findValueByNumber(int number) {
              return MoKuCountInfoType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return app.protobuf.client.MoKuClientContent.getDescriptor().getEnumTypes().get(1);
    }

    private static final MoKuCountInfoType[] VALUES = values();

    public static MoKuCountInfoType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MoKuCountInfoType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:proto.MoKuCountInfoType)
  }

  public interface MoKuClientModuleObjOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.MoKuClientModuleObj)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 enter_times = 1;</code>
     *
     * <pre>
     *进入带来的次数，合并的次数也会累计进来
     * </pre>
     */
    boolean hasEnterTimes();
    /**
     * <code>optional int32 enter_times = 1;</code>
     *
     * <pre>
     *进入带来的次数，合并的次数也会累计进来
     * </pre>
     */
    int getEnterTimes();

    /**
     * <code>optional int32 buy_times = 2;</code>
     *
     * <pre>
     *购买的副本次数
     * </pre>
     */
    boolean hasBuyTimes();
    /**
     * <code>optional int32 buy_times = 2;</code>
     *
     * <pre>
     *购买的副本次数
     * </pre>
     */
    int getBuyTimes();

    /**
     * <code>optional int32 money_inspire_times = 4;</code>
     *
     * <pre>
     *金币鼓舞次数(只在魔窟副本中有用)
     * </pre>
     */
    boolean hasMoneyInspireTimes();
    /**
     * <code>optional int32 money_inspire_times = 4;</code>
     *
     * <pre>
     *金币鼓舞次数(只在魔窟副本中有用)
     * </pre>
     */
    int getMoneyInspireTimes();

    /**
     * <code>optional int32 diamond_inspire_times = 5;</code>
     *
     * <pre>
     *钻石鼓舞次数(只在魔窟副本中有用)
     * </pre>
     */
    boolean hasDiamondInspireTimes();
    /**
     * <code>optional int32 diamond_inspire_times = 5;</code>
     *
     * <pre>
     *钻石鼓舞次数(只在魔窟副本中有用)
     * </pre>
     */
    int getDiamondInspireTimes();

    /**
     * <code>optional int32 last_leave_time = 6;</code>
     *
     * <pre>
     *最后一次时间,如果已经在副本中时，此时间无效
     * </pre>
     */
    boolean hasLastLeaveTime();
    /**
     * <code>optional int32 last_leave_time = 6;</code>
     *
     * <pre>
     *最后一次时间,如果已经在副本中时，此时间无效
     * </pre>
     */
    int getLastLeaveTime();

    /**
     * <code>optional int32 mergerTimes = 7;</code>
     *
     * <pre>
     *进入副本合并次数
     * </pre>
     */
    boolean hasMergerTimes();
    /**
     * <code>optional int32 mergerTimes = 7;</code>
     *
     * <pre>
     *进入副本合并次数
     * </pre>
     */
    int getMergerTimes();

    /**
     * <code>optional int32 useGoodsAddTimes = 8;</code>
     *
     * <pre>
     *使用物品增加的次数
     * </pre>
     */
    boolean hasUseGoodsAddTimes();
    /**
     * <code>optional int32 useGoodsAddTimes = 8;</code>
     *
     * <pre>
     *使用物品增加的次数
     * </pre>
     */
    int getUseGoodsAddTimes();
  }
  /**
   * Protobuf type {@code proto.MoKuClientModuleObj}
   */
  public static final class MoKuClientModuleObj extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.MoKuClientModuleObj)
      MoKuClientModuleObjOrBuilder {
    // Use MoKuClientModuleObj.newBuilder() to construct.
    private MoKuClientModuleObj(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MoKuClientModuleObj(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MoKuClientModuleObj defaultInstance;
    public static MoKuClientModuleObj getDefaultInstance() {
      return defaultInstance;
    }

    public MoKuClientModuleObj getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MoKuClientModuleObj(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              enterTimes_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              buyTimes_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              moneyInspireTimes_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              diamondInspireTimes_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              lastLeaveTime_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              mergerTimes_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              useGoodsAddTimes_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return app.protobuf.client.MoKuClientContent.internal_static_proto_MoKuClientModuleObj_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return app.protobuf.client.MoKuClientContent.internal_static_proto_MoKuClientModuleObj_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              app.protobuf.client.MoKuClientContent.MoKuClientModuleObj.class, app.protobuf.client.MoKuClientContent.MoKuClientModuleObj.Builder.class);
    }

    public static com.google.protobuf.Parser<MoKuClientModuleObj> PARSER =
        new com.google.protobuf.AbstractParser<MoKuClientModuleObj>() {
      public MoKuClientModuleObj parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MoKuClientModuleObj(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MoKuClientModuleObj> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ENTER_TIMES_FIELD_NUMBER = 1;
    private int enterTimes_;
    /**
     * <code>optional int32 enter_times = 1;</code>
     *
     * <pre>
     *进入带来的次数，合并的次数也会累计进来
     * </pre>
     */
    public boolean hasEnterTimes() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 enter_times = 1;</code>
     *
     * <pre>
     *进入带来的次数，合并的次数也会累计进来
     * </pre>
     */
    public int getEnterTimes() {
      return enterTimes_;
    }

    public static final int BUY_TIMES_FIELD_NUMBER = 2;
    private int buyTimes_;
    /**
     * <code>optional int32 buy_times = 2;</code>
     *
     * <pre>
     *购买的副本次数
     * </pre>
     */
    public boolean hasBuyTimes() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 buy_times = 2;</code>
     *
     * <pre>
     *购买的副本次数
     * </pre>
     */
    public int getBuyTimes() {
      return buyTimes_;
    }

    public static final int MONEY_INSPIRE_TIMES_FIELD_NUMBER = 4;
    private int moneyInspireTimes_;
    /**
     * <code>optional int32 money_inspire_times = 4;</code>
     *
     * <pre>
     *金币鼓舞次数(只在魔窟副本中有用)
     * </pre>
     */
    public boolean hasMoneyInspireTimes() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 money_inspire_times = 4;</code>
     *
     * <pre>
     *金币鼓舞次数(只在魔窟副本中有用)
     * </pre>
     */
    public int getMoneyInspireTimes() {
      return moneyInspireTimes_;
    }

    public static final int DIAMOND_INSPIRE_TIMES_FIELD_NUMBER = 5;
    private int diamondInspireTimes_;
    /**
     * <code>optional int32 diamond_inspire_times = 5;</code>
     *
     * <pre>
     *钻石鼓舞次数(只在魔窟副本中有用)
     * </pre>
     */
    public boolean hasDiamondInspireTimes() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 diamond_inspire_times = 5;</code>
     *
     * <pre>
     *钻石鼓舞次数(只在魔窟副本中有用)
     * </pre>
     */
    public int getDiamondInspireTimes() {
      return diamondInspireTimes_;
    }

    public static final int LAST_LEAVE_TIME_FIELD_NUMBER = 6;
    private int lastLeaveTime_;
    /**
     * <code>optional int32 last_leave_time = 6;</code>
     *
     * <pre>
     *最后一次时间,如果已经在副本中时，此时间无效
     * </pre>
     */
    public boolean hasLastLeaveTime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 last_leave_time = 6;</code>
     *
     * <pre>
     *最后一次时间,如果已经在副本中时，此时间无效
     * </pre>
     */
    public int getLastLeaveTime() {
      return lastLeaveTime_;
    }

    public static final int MERGERTIMES_FIELD_NUMBER = 7;
    private int mergerTimes_;
    /**
     * <code>optional int32 mergerTimes = 7;</code>
     *
     * <pre>
     *进入副本合并次数
     * </pre>
     */
    public boolean hasMergerTimes() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 mergerTimes = 7;</code>
     *
     * <pre>
     *进入副本合并次数
     * </pre>
     */
    public int getMergerTimes() {
      return mergerTimes_;
    }

    public static final int USEGOODSADDTIMES_FIELD_NUMBER = 8;
    private int useGoodsAddTimes_;
    /**
     * <code>optional int32 useGoodsAddTimes = 8;</code>
     *
     * <pre>
     *使用物品增加的次数
     * </pre>
     */
    public boolean hasUseGoodsAddTimes() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 useGoodsAddTimes = 8;</code>
     *
     * <pre>
     *使用物品增加的次数
     * </pre>
     */
    public int getUseGoodsAddTimes() {
      return useGoodsAddTimes_;
    }

    private void initFields() {
      enterTimes_ = 0;
      buyTimes_ = 0;
      moneyInspireTimes_ = 0;
      diamondInspireTimes_ = 0;
      lastLeaveTime_ = 0;
      mergerTimes_ = 0;
      useGoodsAddTimes_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, enterTimes_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, buyTimes_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, moneyInspireTimes_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, diamondInspireTimes_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, lastLeaveTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, mergerTimes_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(8, useGoodsAddTimes_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, enterTimes_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, buyTimes_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, moneyInspireTimes_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, diamondInspireTimes_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, lastLeaveTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, mergerTimes_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, useGoodsAddTimes_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static app.protobuf.client.MoKuClientContent.MoKuClientModuleObj parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.client.MoKuClientContent.MoKuClientModuleObj parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.client.MoKuClientContent.MoKuClientModuleObj parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.client.MoKuClientContent.MoKuClientModuleObj parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.client.MoKuClientContent.MoKuClientModuleObj parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.client.MoKuClientContent.MoKuClientModuleObj parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static app.protobuf.client.MoKuClientContent.MoKuClientModuleObj parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static app.protobuf.client.MoKuClientContent.MoKuClientModuleObj parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static app.protobuf.client.MoKuClientContent.MoKuClientModuleObj parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.client.MoKuClientContent.MoKuClientModuleObj parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(app.protobuf.client.MoKuClientContent.MoKuClientModuleObj prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.MoKuClientModuleObj}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.MoKuClientModuleObj)
        app.protobuf.client.MoKuClientContent.MoKuClientModuleObjOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return app.protobuf.client.MoKuClientContent.internal_static_proto_MoKuClientModuleObj_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return app.protobuf.client.MoKuClientContent.internal_static_proto_MoKuClientModuleObj_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                app.protobuf.client.MoKuClientContent.MoKuClientModuleObj.class, app.protobuf.client.MoKuClientContent.MoKuClientModuleObj.Builder.class);
      }

      // Construct using app.protobuf.client.MoKuClientContent.MoKuClientModuleObj.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        enterTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        buyTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        moneyInspireTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        diamondInspireTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        lastLeaveTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        mergerTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        useGoodsAddTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return app.protobuf.client.MoKuClientContent.internal_static_proto_MoKuClientModuleObj_descriptor;
      }

      public app.protobuf.client.MoKuClientContent.MoKuClientModuleObj getDefaultInstanceForType() {
        return app.protobuf.client.MoKuClientContent.MoKuClientModuleObj.getDefaultInstance();
      }

      public app.protobuf.client.MoKuClientContent.MoKuClientModuleObj build() {
        app.protobuf.client.MoKuClientContent.MoKuClientModuleObj result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public app.protobuf.client.MoKuClientContent.MoKuClientModuleObj buildPartial() {
        app.protobuf.client.MoKuClientContent.MoKuClientModuleObj result = new app.protobuf.client.MoKuClientContent.MoKuClientModuleObj(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.enterTimes_ = enterTimes_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.buyTimes_ = buyTimes_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.moneyInspireTimes_ = moneyInspireTimes_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.diamondInspireTimes_ = diamondInspireTimes_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.lastLeaveTime_ = lastLeaveTime_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mergerTimes_ = mergerTimes_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.useGoodsAddTimes_ = useGoodsAddTimes_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof app.protobuf.client.MoKuClientContent.MoKuClientModuleObj) {
          return mergeFrom((app.protobuf.client.MoKuClientContent.MoKuClientModuleObj)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(app.protobuf.client.MoKuClientContent.MoKuClientModuleObj other) {
        if (other == app.protobuf.client.MoKuClientContent.MoKuClientModuleObj.getDefaultInstance()) return this;
        if (other.hasEnterTimes()) {
          setEnterTimes(other.getEnterTimes());
        }
        if (other.hasBuyTimes()) {
          setBuyTimes(other.getBuyTimes());
        }
        if (other.hasMoneyInspireTimes()) {
          setMoneyInspireTimes(other.getMoneyInspireTimes());
        }
        if (other.hasDiamondInspireTimes()) {
          setDiamondInspireTimes(other.getDiamondInspireTimes());
        }
        if (other.hasLastLeaveTime()) {
          setLastLeaveTime(other.getLastLeaveTime());
        }
        if (other.hasMergerTimes()) {
          setMergerTimes(other.getMergerTimes());
        }
        if (other.hasUseGoodsAddTimes()) {
          setUseGoodsAddTimes(other.getUseGoodsAddTimes());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        app.protobuf.client.MoKuClientContent.MoKuClientModuleObj parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (app.protobuf.client.MoKuClientContent.MoKuClientModuleObj) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int enterTimes_ ;
      /**
       * <code>optional int32 enter_times = 1;</code>
       *
       * <pre>
       *进入带来的次数，合并的次数也会累计进来
       * </pre>
       */
      public boolean hasEnterTimes() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 enter_times = 1;</code>
       *
       * <pre>
       *进入带来的次数，合并的次数也会累计进来
       * </pre>
       */
      public int getEnterTimes() {
        return enterTimes_;
      }
      /**
       * <code>optional int32 enter_times = 1;</code>
       *
       * <pre>
       *进入带来的次数，合并的次数也会累计进来
       * </pre>
       */
      public Builder setEnterTimes(int value) {
        bitField0_ |= 0x00000001;
        enterTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 enter_times = 1;</code>
       *
       * <pre>
       *进入带来的次数，合并的次数也会累计进来
       * </pre>
       */
      public Builder clearEnterTimes() {
        bitField0_ = (bitField0_ & ~0x00000001);
        enterTimes_ = 0;
        onChanged();
        return this;
      }

      private int buyTimes_ ;
      /**
       * <code>optional int32 buy_times = 2;</code>
       *
       * <pre>
       *购买的副本次数
       * </pre>
       */
      public boolean hasBuyTimes() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 buy_times = 2;</code>
       *
       * <pre>
       *购买的副本次数
       * </pre>
       */
      public int getBuyTimes() {
        return buyTimes_;
      }
      /**
       * <code>optional int32 buy_times = 2;</code>
       *
       * <pre>
       *购买的副本次数
       * </pre>
       */
      public Builder setBuyTimes(int value) {
        bitField0_ |= 0x00000002;
        buyTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 buy_times = 2;</code>
       *
       * <pre>
       *购买的副本次数
       * </pre>
       */
      public Builder clearBuyTimes() {
        bitField0_ = (bitField0_ & ~0x00000002);
        buyTimes_ = 0;
        onChanged();
        return this;
      }

      private int moneyInspireTimes_ ;
      /**
       * <code>optional int32 money_inspire_times = 4;</code>
       *
       * <pre>
       *金币鼓舞次数(只在魔窟副本中有用)
       * </pre>
       */
      public boolean hasMoneyInspireTimes() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 money_inspire_times = 4;</code>
       *
       * <pre>
       *金币鼓舞次数(只在魔窟副本中有用)
       * </pre>
       */
      public int getMoneyInspireTimes() {
        return moneyInspireTimes_;
      }
      /**
       * <code>optional int32 money_inspire_times = 4;</code>
       *
       * <pre>
       *金币鼓舞次数(只在魔窟副本中有用)
       * </pre>
       */
      public Builder setMoneyInspireTimes(int value) {
        bitField0_ |= 0x00000004;
        moneyInspireTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 money_inspire_times = 4;</code>
       *
       * <pre>
       *金币鼓舞次数(只在魔窟副本中有用)
       * </pre>
       */
      public Builder clearMoneyInspireTimes() {
        bitField0_ = (bitField0_ & ~0x00000004);
        moneyInspireTimes_ = 0;
        onChanged();
        return this;
      }

      private int diamondInspireTimes_ ;
      /**
       * <code>optional int32 diamond_inspire_times = 5;</code>
       *
       * <pre>
       *钻石鼓舞次数(只在魔窟副本中有用)
       * </pre>
       */
      public boolean hasDiamondInspireTimes() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 diamond_inspire_times = 5;</code>
       *
       * <pre>
       *钻石鼓舞次数(只在魔窟副本中有用)
       * </pre>
       */
      public int getDiamondInspireTimes() {
        return diamondInspireTimes_;
      }
      /**
       * <code>optional int32 diamond_inspire_times = 5;</code>
       *
       * <pre>
       *钻石鼓舞次数(只在魔窟副本中有用)
       * </pre>
       */
      public Builder setDiamondInspireTimes(int value) {
        bitField0_ |= 0x00000008;
        diamondInspireTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 diamond_inspire_times = 5;</code>
       *
       * <pre>
       *钻石鼓舞次数(只在魔窟副本中有用)
       * </pre>
       */
      public Builder clearDiamondInspireTimes() {
        bitField0_ = (bitField0_ & ~0x00000008);
        diamondInspireTimes_ = 0;
        onChanged();
        return this;
      }

      private int lastLeaveTime_ ;
      /**
       * <code>optional int32 last_leave_time = 6;</code>
       *
       * <pre>
       *最后一次时间,如果已经在副本中时，此时间无效
       * </pre>
       */
      public boolean hasLastLeaveTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 last_leave_time = 6;</code>
       *
       * <pre>
       *最后一次时间,如果已经在副本中时，此时间无效
       * </pre>
       */
      public int getLastLeaveTime() {
        return lastLeaveTime_;
      }
      /**
       * <code>optional int32 last_leave_time = 6;</code>
       *
       * <pre>
       *最后一次时间,如果已经在副本中时，此时间无效
       * </pre>
       */
      public Builder setLastLeaveTime(int value) {
        bitField0_ |= 0x00000010;
        lastLeaveTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 last_leave_time = 6;</code>
       *
       * <pre>
       *最后一次时间,如果已经在副本中时，此时间无效
       * </pre>
       */
      public Builder clearLastLeaveTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        lastLeaveTime_ = 0;
        onChanged();
        return this;
      }

      private int mergerTimes_ ;
      /**
       * <code>optional int32 mergerTimes = 7;</code>
       *
       * <pre>
       *进入副本合并次数
       * </pre>
       */
      public boolean hasMergerTimes() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 mergerTimes = 7;</code>
       *
       * <pre>
       *进入副本合并次数
       * </pre>
       */
      public int getMergerTimes() {
        return mergerTimes_;
      }
      /**
       * <code>optional int32 mergerTimes = 7;</code>
       *
       * <pre>
       *进入副本合并次数
       * </pre>
       */
      public Builder setMergerTimes(int value) {
        bitField0_ |= 0x00000020;
        mergerTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 mergerTimes = 7;</code>
       *
       * <pre>
       *进入副本合并次数
       * </pre>
       */
      public Builder clearMergerTimes() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mergerTimes_ = 0;
        onChanged();
        return this;
      }

      private int useGoodsAddTimes_ ;
      /**
       * <code>optional int32 useGoodsAddTimes = 8;</code>
       *
       * <pre>
       *使用物品增加的次数
       * </pre>
       */
      public boolean hasUseGoodsAddTimes() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 useGoodsAddTimes = 8;</code>
       *
       * <pre>
       *使用物品增加的次数
       * </pre>
       */
      public int getUseGoodsAddTimes() {
        return useGoodsAddTimes_;
      }
      /**
       * <code>optional int32 useGoodsAddTimes = 8;</code>
       *
       * <pre>
       *使用物品增加的次数
       * </pre>
       */
      public Builder setUseGoodsAddTimes(int value) {
        bitField0_ |= 0x00000040;
        useGoodsAddTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 useGoodsAddTimes = 8;</code>
       *
       * <pre>
       *使用物品增加的次数
       * </pre>
       */
      public Builder clearUseGoodsAddTimes() {
        bitField0_ = (bitField0_ & ~0x00000040);
        useGoodsAddTimes_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.MoKuClientModuleObj)
    }

    static {
      defaultInstance = new MoKuClientModuleObj(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.MoKuClientModuleObj)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_MoKuClientModuleObj_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_MoKuClientModuleObj_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031client/mo_ku_client.proto\022\005proto\"\301\001\n\023M" +
      "oKuClientModuleObj\022\023\n\013enter_times\030\001 \001(\005\022" +
      "\021\n\tbuy_times\030\002 \001(\005\022\033\n\023money_inspire_time" +
      "s\030\004 \001(\005\022\035\n\025diamond_inspire_times\030\005 \001(\005\022\027" +
      "\n\017last_leave_time\030\006 \001(\005\022\023\n\013mergerTimes\030\007" +
      " \001(\005\022\030\n\020useGoodsAddTimes\030\010 \001(\005*5\n\013Inspir" +
      "eType\022\021\n\rMONEY_INSPIRE\020\001\022\023\n\017DIAMOND_INSP" +
      "IRE\020\002*\215\001\n\021MoKuCountInfoType\022\016\n\nMOKU_STAG" +
      "E\020\001\022\025\n\021MOKU_KILL_MONSTER\020\002\022\020\n\014MOKU_GET_E" +
      "XP\020\003\022\036\n\032MOKU_INSPIRE_HURT_ADDITION\020\004\022\037\n\033",
      "MOKU_MEDICINAL_EXP_ADDITION\020\005B*\n\023app.pro" +
      "tobuf.clientB\021MoKuClientContentH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_proto_MoKuClientModuleObj_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_proto_MoKuClientModuleObj_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_MoKuClientModuleObj_descriptor,
        new java.lang.String[] { "EnterTimes", "BuyTimes", "MoneyInspireTimes", "DiamondInspireTimes", "LastLeaveTime", "MergerTimes", "UseGoodsAddTimes", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
