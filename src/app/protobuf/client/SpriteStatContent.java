// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/spritestat.proto

package app.protobuf.client;

public final class SpriteStatContent {
  private SpriteStatContent() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code proto.StatType}
   */
  public enum StatType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>GONG_JI = 0;</code>
     *
     * <pre>
     * 这个顺序不能改
     * 基础属性
     * </pre>
     */
    GONG_JI(0, 0),
    /**
     * <code>SHENG_MING = 1;</code>
     *
     * <pre>
     * 生命
     * </pre>
     */
    SHENG_MING(1, 1),
    /**
     * <code>PO_JIA = 2;</code>
     *
     * <pre>
     * 破甲
     * </pre>
     */
    PO_JIA(2, 2),
    /**
     * <code>FANG_YU = 3;</code>
     *
     * <pre>
     * 防御
     * </pre>
     */
    FANG_YU(3, 3),
    /**
     * <code>MING_ZHONG = 4;</code>
     *
     * <pre>
     * 命中
     * </pre>
     */
    MING_ZHONG(4, 4),
    /**
     * <code>SHAN_BI = 5;</code>
     *
     * <pre>
     * 闪避
     * </pre>
     */
    SHAN_BI(5, 5),
    /**
     * <code>BAO_JI = 6;</code>
     *
     * <pre>
     * 暴击
     * </pre>
     */
    BAO_JI(6, 6),
    /**
     * <code>JIAN_REN = 7;</code>
     *
     * <pre>
     * 坚韧
     * </pre>
     */
    JIAN_REN(7, 7),
    /**
     * <code>WU_XING_GONG_JI = 8;</code>
     *
     * <pre>
     * 五行攻击
     * </pre>
     */
    WU_XING_GONG_JI(8, 8),
    /**
     * <code>WU_XING_FANG_YU = 9;</code>
     *
     * <pre>
     * 五行防御
     * </pre>
     */
    WU_XING_FANG_YU(9, 9),
    /**
     * <code>SHANG_HAI_JIA_SHEN = 10;</code>
     *
     * <pre>
     * 极品属性，都是万分比表示万分比
     * </pre>
     */
    SHANG_HAI_JIA_SHEN(10, 10),
    /**
     * <code>SHANG_HAI_JIAN_MIAN = 11;</code>
     *
     * <pre>
     * 伤害减免
     * </pre>
     */
    SHANG_HAI_JIAN_MIAN(11, 11),
    /**
     * <code>MING_ZHONG_JI_LV = 12;</code>
     *
     * <pre>
     * 命中几率
     * </pre>
     */
    MING_ZHONG_JI_LV(12, 12),
    /**
     * <code>SHAN_BI_JI_LV = 13;</code>
     *
     * <pre>
     * 闪避几率
     * </pre>
     */
    SHAN_BI_JI_LV(13, 13),
    /**
     * <code>HU_JIA_CHUAN_TOU = 14;</code>
     *
     * <pre>
     * 护甲穿透
     * </pre>
     */
    HU_JIA_CHUAN_TOU(14, 14),
    /**
     * <code>JUE_SE_HU_JIA = 15;</code>
     *
     * <pre>
     * 角色护甲
     * </pre>
     */
    JUE_SE_HU_JIA(15, 15),
    /**
     * <code>GE_DANG_CHUAN_TOU = 16;</code>
     *
     * <pre>
     * 格挡穿透
     * </pre>
     */
    GE_DANG_CHUAN_TOU(16, 16),
    /**
     * <code>GE_DANG_JI_LV = 17;</code>
     *
     * <pre>
     * 格挡几率
     * </pre>
     */
    GE_DANG_JI_LV(17, 17),
    /**
     * <code>BAO_JI_JI_LV = 18;</code>
     *
     * <pre>
     * 暴击几率
     * </pre>
     */
    BAO_JI_JI_LV(18, 18),
    /**
     * <code>BAO_JI_DI_KANG = 19;</code>
     *
     * <pre>
     * 暴击抵抗
     * </pre>
     */
    BAO_JI_DI_KANG(19, 19),
    /**
     * <code>HUI_XIN_JI_LV = 20;</code>
     *
     * <pre>
     * 会心几率
     * </pre>
     */
    HUI_XIN_JI_LV(20, 20),
    /**
     * <code>HUI_XIN_DI_KANG = 21;</code>
     *
     * <pre>
     * 会心抵抗
     * </pre>
     */
    HUI_XIN_DI_KANG(21, 21),
    /**
     * <code>BAO_JI_SHANG_HAI = 22;</code>
     *
     * <pre>
     * 暴击伤害
     * </pre>
     */
    BAO_JI_SHANG_HAI(22, 22),
    /**
     * <code>HUI_XIN_SHANG_HAI = 23;</code>
     *
     * <pre>
     * 会心伤害
     * </pre>
     */
    HUI_XIN_SHANG_HAI(23, 23),
    /**
     * <code>JI_NENG_SHANG_HAI = 24;</code>
     *
     * <pre>
     * 技能伤害(战斗公式计算完伤害后，额外的伤害倍率)
     * </pre>
     */
    JI_NENG_SHANG_HAI(24, 24),
    /**
     * <code>JI_NENG_ZENG_SHANG = 25;</code>
     *
     * <pre>
     * 技能增伤
     * </pre>
     */
    JI_NENG_ZENG_SHANG(25, 25),
    /**
     * <code>JI_NENG_JIAN_SHANG = 26;</code>
     *
     * <pre>
     * 技能减伤
     * </pre>
     */
    JI_NENG_JIAN_SHANG(26, 26),
    /**
     * <code>QIANG_JI_JI_LV = 27;</code>
     *
     * <pre>
     * 强击几率
     * </pre>
     */
    QIANG_JI_JI_LV(27, 27),
    /**
     * <code>XU_RUO_JI_LV = 28;</code>
     *
     * <pre>
     * 虚弱几率
     * </pre>
     */
    XU_RUO_JI_LV(28, 28),
    /**
     * <code>MOVE_SPEED = 29;</code>
     *
     * <pre>
     * 移动速度
     * </pre>
     */
    MOVE_SPEED(29, 29),
    /**
     * <code>TONG_QIAN_DIAO_LUO = 30;</code>
     *
     * <pre>
     * 以下在人物属性面板中不显示
     * </pre>
     */
    TONG_QIAN_DIAO_LUO(30, 30),
    /**
     * <code>WU_PIN_DIAO_LUO = 31;</code>
     *
     * <pre>
     * 物品掉落
     * </pre>
     */
    WU_PIN_DIAO_LUO(31, 31),
    /**
     * <code>MEI_3_JI_SHENG_MING = 32;</code>
     *
     * <pre>
     * 每三级加生命
     * </pre>
     */
    MEI_3_JI_SHENG_MING(32, 32),
    /**
     * <code>MEI_3_JI_FANG_YU = 33;</code>
     *
     * <pre>
     * 每三级加防御
     * </pre>
     */
    MEI_3_JI_FANG_YU(33, 33),
    /**
     * <code>MEI_3_JI_GONG_JI = 34;</code>
     *
     * <pre>
     * 每三级加攻击
     * </pre>
     */
    MEI_3_JI_GONG_JI(34, 34),
    /**
     * <code>MEI_3_JI_PO_JIA = 35;</code>
     *
     * <pre>
     * 每三级加破甲
     * </pre>
     */
    MEI_3_JI_PO_JIA(35, 35),
    /**
     * <code>SHA_GUAI_JING_YAN = 36;</code>
     *
     * <pre>
     * 增加杀怪经验万分比
     * </pre>
     */
    SHA_GUAI_JING_YAN(36, 36),
    /**
     * <code>FANG_JU_SHENG_MING = 37;</code>
     *
     * <pre>
     * 防具生命：对所有防具部位（头盔、胸甲、护腿、护腕、鞋子）生命值总值的万分比加成
     * </pre>
     */
    FANG_JU_SHENG_MING(37, 37),
    /**
     * <code>FANG_JU_FANG_YU = 38;</code>
     *
     * <pre>
     * 防具防御：对所有防具部位（头盔、胸甲、护腿、护腕、鞋子）防御总值的万分比加成
     * </pre>
     */
    FANG_JU_FANG_YU(38, 38),
    /**
     * <code>WU_QI_PO_JIA = 39;</code>
     *
     * <pre>
     * 武器破甲：对武器部位破甲值的万分比加成
     * </pre>
     */
    WU_QI_PO_JIA(39, 39),
    /**
     * <code>WU_QI_GONG_JI = 40;</code>
     *
     * <pre>
     * 武器攻击：对武器部位攻击值的万分比加成
     * </pre>
     */
    WU_QI_GONG_JI(40, 40),
    /**
     * <code>XIAN_QI_GONG_JI = 41;</code>
     *
     * <pre>
     * 仙器攻击：对仙器部位（挂坠、护符、手镯、戒指）攻击值的万分比加成
     * </pre>
     */
    XIAN_QI_GONG_JI(41, 41),
    /**
     * <code>JI_CHU_PO_JIA = 42;</code>
     *
     * <pre>
     * 对角色等级属性中破甲的万分比加成
     * </pre>
     */
    JI_CHU_PO_JIA(42, 42),
    /**
     * <code>JI_CHU_SHENG_MING = 43;</code>
     *
     * <pre>
     * 对角色等级属性中生命的万分比加成
     * </pre>
     */
    JI_CHU_SHENG_MING(43, 43),
    /**
     * <code>JI_CHU_FANG_YU = 44;</code>
     *
     * <pre>
     * 对角色等级属性中防御的万分比加成
     * </pre>
     */
    JI_CHU_FANG_YU(44, 44),
    /**
     * <code>JI_CHU_GONG_JI = 45;</code>
     *
     * <pre>
     * 对角色等级属性中攻击的万分比加成
     * </pre>
     */
    JI_CHU_GONG_JI(45, 45),
    /**
     * <code>QIANG_HUA_JIA_CHENG = 46;</code>
     *
     * <pre>
     * 对装备强化属性的万分比加成
     * </pre>
     */
    QIANG_HUA_JIA_CHENG(46, 46),
    /**
     * <code>ZHUI_JIA_JI_NENG = 47;</code>
     *
     * <pre>
     * 追加技能伤害几率万分比
     * </pre>
     */
    ZHUI_JIA_JI_NENG(47, 47),
    /**
     * <code>SHAN_BI_JI_NENG = 48;</code>
     *
     * <pre>
     * 闪避技能伤害万分比
     * </pre>
     */
    SHAN_BI_JI_NENG(48, 48),
    /**
     * <code>HUN_SHOU_GONG_JI = 49;</code>
     *
     * <pre>
     *当前魂兽攻击属性万分比
     * </pre>
     */
    HUN_SHOU_GONG_JI(49, 49),
    /**
     * <code>HUN_SHOU_SHENG_MING = 50;</code>
     *
     * <pre>
     *当前魂兽生命属性万分比
     * </pre>
     */
    HUN_SHOU_SHENG_MING(50, 50),
    /**
     * <code>HUN_SHOU_PO_JIA = 51;</code>
     *
     * <pre>
     *当前魂兽破甲属性万分比
     * </pre>
     */
    HUN_SHOU_PO_JIA(51, 51),
    /**
     * <code>HUN_SHOU_FANG_YU = 52;</code>
     *
     * <pre>
     *当前魂兽防御属性万分比
     * </pre>
     */
    HUN_SHOU_FANG_YU(52, 52),
    /**
     * <code>ALL_HUN_SHOU_GONG_JI = 53;</code>
     *
     * <pre>
     *所有魂兽攻击属性万分比
     * </pre>
     */
    ALL_HUN_SHOU_GONG_JI(53, 53),
    /**
     * <code>ALL_HUN_SHOU_SHENG_MING = 54;</code>
     *
     * <pre>
     *所有魂兽生命属性万分比
     * </pre>
     */
    ALL_HUN_SHOU_SHENG_MING(54, 54),
    /**
     * <code>ALL_HUN_SHOU_PO_JIA = 55;</code>
     *
     * <pre>
     *所有魂兽破甲属性万分比
     * </pre>
     */
    ALL_HUN_SHOU_PO_JIA(55, 55),
    /**
     * <code>ALL_HUN_SHOU_FANG_YU = 56;</code>
     *
     * <pre>
     *所有魂兽防御属性万分比
     * </pre>
     */
    ALL_HUN_SHOU_FANG_YU(56, 56),
    /**
     * <code>ALL_HUN_SHOU_ALL_BASE = 57;</code>
     *
     * <pre>
     *所有魂兽，所有基础属性和装备的基础属性(攻击,生命,破甲,防御)万分比
     * </pre>
     */
    ALL_HUN_SHOU_ALL_BASE(57, 57),
    /**
     * <code>JI_NENG_CD = 58;</code>
     *
     * <pre>
     *非普攻技能CD增加或减少万分比
     * </pre>
     */
    JI_NENG_CD(58, 58),
    ;

    /**
     * <code>GONG_JI = 0;</code>
     *
     * <pre>
     * 这个顺序不能改
     * 基础属性
     * </pre>
     */
    public static final int GONG_JI_VALUE = 0;
    /**
     * <code>SHENG_MING = 1;</code>
     *
     * <pre>
     * 生命
     * </pre>
     */
    public static final int SHENG_MING_VALUE = 1;
    /**
     * <code>PO_JIA = 2;</code>
     *
     * <pre>
     * 破甲
     * </pre>
     */
    public static final int PO_JIA_VALUE = 2;
    /**
     * <code>FANG_YU = 3;</code>
     *
     * <pre>
     * 防御
     * </pre>
     */
    public static final int FANG_YU_VALUE = 3;
    /**
     * <code>MING_ZHONG = 4;</code>
     *
     * <pre>
     * 命中
     * </pre>
     */
    public static final int MING_ZHONG_VALUE = 4;
    /**
     * <code>SHAN_BI = 5;</code>
     *
     * <pre>
     * 闪避
     * </pre>
     */
    public static final int SHAN_BI_VALUE = 5;
    /**
     * <code>BAO_JI = 6;</code>
     *
     * <pre>
     * 暴击
     * </pre>
     */
    public static final int BAO_JI_VALUE = 6;
    /**
     * <code>JIAN_REN = 7;</code>
     *
     * <pre>
     * 坚韧
     * </pre>
     */
    public static final int JIAN_REN_VALUE = 7;
    /**
     * <code>WU_XING_GONG_JI = 8;</code>
     *
     * <pre>
     * 五行攻击
     * </pre>
     */
    public static final int WU_XING_GONG_JI_VALUE = 8;
    /**
     * <code>WU_XING_FANG_YU = 9;</code>
     *
     * <pre>
     * 五行防御
     * </pre>
     */
    public static final int WU_XING_FANG_YU_VALUE = 9;
    /**
     * <code>SHANG_HAI_JIA_SHEN = 10;</code>
     *
     * <pre>
     * 极品属性，都是万分比表示万分比
     * </pre>
     */
    public static final int SHANG_HAI_JIA_SHEN_VALUE = 10;
    /**
     * <code>SHANG_HAI_JIAN_MIAN = 11;</code>
     *
     * <pre>
     * 伤害减免
     * </pre>
     */
    public static final int SHANG_HAI_JIAN_MIAN_VALUE = 11;
    /**
     * <code>MING_ZHONG_JI_LV = 12;</code>
     *
     * <pre>
     * 命中几率
     * </pre>
     */
    public static final int MING_ZHONG_JI_LV_VALUE = 12;
    /**
     * <code>SHAN_BI_JI_LV = 13;</code>
     *
     * <pre>
     * 闪避几率
     * </pre>
     */
    public static final int SHAN_BI_JI_LV_VALUE = 13;
    /**
     * <code>HU_JIA_CHUAN_TOU = 14;</code>
     *
     * <pre>
     * 护甲穿透
     * </pre>
     */
    public static final int HU_JIA_CHUAN_TOU_VALUE = 14;
    /**
     * <code>JUE_SE_HU_JIA = 15;</code>
     *
     * <pre>
     * 角色护甲
     * </pre>
     */
    public static final int JUE_SE_HU_JIA_VALUE = 15;
    /**
     * <code>GE_DANG_CHUAN_TOU = 16;</code>
     *
     * <pre>
     * 格挡穿透
     * </pre>
     */
    public static final int GE_DANG_CHUAN_TOU_VALUE = 16;
    /**
     * <code>GE_DANG_JI_LV = 17;</code>
     *
     * <pre>
     * 格挡几率
     * </pre>
     */
    public static final int GE_DANG_JI_LV_VALUE = 17;
    /**
     * <code>BAO_JI_JI_LV = 18;</code>
     *
     * <pre>
     * 暴击几率
     * </pre>
     */
    public static final int BAO_JI_JI_LV_VALUE = 18;
    /**
     * <code>BAO_JI_DI_KANG = 19;</code>
     *
     * <pre>
     * 暴击抵抗
     * </pre>
     */
    public static final int BAO_JI_DI_KANG_VALUE = 19;
    /**
     * <code>HUI_XIN_JI_LV = 20;</code>
     *
     * <pre>
     * 会心几率
     * </pre>
     */
    public static final int HUI_XIN_JI_LV_VALUE = 20;
    /**
     * <code>HUI_XIN_DI_KANG = 21;</code>
     *
     * <pre>
     * 会心抵抗
     * </pre>
     */
    public static final int HUI_XIN_DI_KANG_VALUE = 21;
    /**
     * <code>BAO_JI_SHANG_HAI = 22;</code>
     *
     * <pre>
     * 暴击伤害
     * </pre>
     */
    public static final int BAO_JI_SHANG_HAI_VALUE = 22;
    /**
     * <code>HUI_XIN_SHANG_HAI = 23;</code>
     *
     * <pre>
     * 会心伤害
     * </pre>
     */
    public static final int HUI_XIN_SHANG_HAI_VALUE = 23;
    /**
     * <code>JI_NENG_SHANG_HAI = 24;</code>
     *
     * <pre>
     * 技能伤害(战斗公式计算完伤害后，额外的伤害倍率)
     * </pre>
     */
    public static final int JI_NENG_SHANG_HAI_VALUE = 24;
    /**
     * <code>JI_NENG_ZENG_SHANG = 25;</code>
     *
     * <pre>
     * 技能增伤
     * </pre>
     */
    public static final int JI_NENG_ZENG_SHANG_VALUE = 25;
    /**
     * <code>JI_NENG_JIAN_SHANG = 26;</code>
     *
     * <pre>
     * 技能减伤
     * </pre>
     */
    public static final int JI_NENG_JIAN_SHANG_VALUE = 26;
    /**
     * <code>QIANG_JI_JI_LV = 27;</code>
     *
     * <pre>
     * 强击几率
     * </pre>
     */
    public static final int QIANG_JI_JI_LV_VALUE = 27;
    /**
     * <code>XU_RUO_JI_LV = 28;</code>
     *
     * <pre>
     * 虚弱几率
     * </pre>
     */
    public static final int XU_RUO_JI_LV_VALUE = 28;
    /**
     * <code>MOVE_SPEED = 29;</code>
     *
     * <pre>
     * 移动速度
     * </pre>
     */
    public static final int MOVE_SPEED_VALUE = 29;
    /**
     * <code>TONG_QIAN_DIAO_LUO = 30;</code>
     *
     * <pre>
     * 以下在人物属性面板中不显示
     * </pre>
     */
    public static final int TONG_QIAN_DIAO_LUO_VALUE = 30;
    /**
     * <code>WU_PIN_DIAO_LUO = 31;</code>
     *
     * <pre>
     * 物品掉落
     * </pre>
     */
    public static final int WU_PIN_DIAO_LUO_VALUE = 31;
    /**
     * <code>MEI_3_JI_SHENG_MING = 32;</code>
     *
     * <pre>
     * 每三级加生命
     * </pre>
     */
    public static final int MEI_3_JI_SHENG_MING_VALUE = 32;
    /**
     * <code>MEI_3_JI_FANG_YU = 33;</code>
     *
     * <pre>
     * 每三级加防御
     * </pre>
     */
    public static final int MEI_3_JI_FANG_YU_VALUE = 33;
    /**
     * <code>MEI_3_JI_GONG_JI = 34;</code>
     *
     * <pre>
     * 每三级加攻击
     * </pre>
     */
    public static final int MEI_3_JI_GONG_JI_VALUE = 34;
    /**
     * <code>MEI_3_JI_PO_JIA = 35;</code>
     *
     * <pre>
     * 每三级加破甲
     * </pre>
     */
    public static final int MEI_3_JI_PO_JIA_VALUE = 35;
    /**
     * <code>SHA_GUAI_JING_YAN = 36;</code>
     *
     * <pre>
     * 增加杀怪经验万分比
     * </pre>
     */
    public static final int SHA_GUAI_JING_YAN_VALUE = 36;
    /**
     * <code>FANG_JU_SHENG_MING = 37;</code>
     *
     * <pre>
     * 防具生命：对所有防具部位（头盔、胸甲、护腿、护腕、鞋子）生命值总值的万分比加成
     * </pre>
     */
    public static final int FANG_JU_SHENG_MING_VALUE = 37;
    /**
     * <code>FANG_JU_FANG_YU = 38;</code>
     *
     * <pre>
     * 防具防御：对所有防具部位（头盔、胸甲、护腿、护腕、鞋子）防御总值的万分比加成
     * </pre>
     */
    public static final int FANG_JU_FANG_YU_VALUE = 38;
    /**
     * <code>WU_QI_PO_JIA = 39;</code>
     *
     * <pre>
     * 武器破甲：对武器部位破甲值的万分比加成
     * </pre>
     */
    public static final int WU_QI_PO_JIA_VALUE = 39;
    /**
     * <code>WU_QI_GONG_JI = 40;</code>
     *
     * <pre>
     * 武器攻击：对武器部位攻击值的万分比加成
     * </pre>
     */
    public static final int WU_QI_GONG_JI_VALUE = 40;
    /**
     * <code>XIAN_QI_GONG_JI = 41;</code>
     *
     * <pre>
     * 仙器攻击：对仙器部位（挂坠、护符、手镯、戒指）攻击值的万分比加成
     * </pre>
     */
    public static final int XIAN_QI_GONG_JI_VALUE = 41;
    /**
     * <code>JI_CHU_PO_JIA = 42;</code>
     *
     * <pre>
     * 对角色等级属性中破甲的万分比加成
     * </pre>
     */
    public static final int JI_CHU_PO_JIA_VALUE = 42;
    /**
     * <code>JI_CHU_SHENG_MING = 43;</code>
     *
     * <pre>
     * 对角色等级属性中生命的万分比加成
     * </pre>
     */
    public static final int JI_CHU_SHENG_MING_VALUE = 43;
    /**
     * <code>JI_CHU_FANG_YU = 44;</code>
     *
     * <pre>
     * 对角色等级属性中防御的万分比加成
     * </pre>
     */
    public static final int JI_CHU_FANG_YU_VALUE = 44;
    /**
     * <code>JI_CHU_GONG_JI = 45;</code>
     *
     * <pre>
     * 对角色等级属性中攻击的万分比加成
     * </pre>
     */
    public static final int JI_CHU_GONG_JI_VALUE = 45;
    /**
     * <code>QIANG_HUA_JIA_CHENG = 46;</code>
     *
     * <pre>
     * 对装备强化属性的万分比加成
     * </pre>
     */
    public static final int QIANG_HUA_JIA_CHENG_VALUE = 46;
    /**
     * <code>ZHUI_JIA_JI_NENG = 47;</code>
     *
     * <pre>
     * 追加技能伤害几率万分比
     * </pre>
     */
    public static final int ZHUI_JIA_JI_NENG_VALUE = 47;
    /**
     * <code>SHAN_BI_JI_NENG = 48;</code>
     *
     * <pre>
     * 闪避技能伤害万分比
     * </pre>
     */
    public static final int SHAN_BI_JI_NENG_VALUE = 48;
    /**
     * <code>HUN_SHOU_GONG_JI = 49;</code>
     *
     * <pre>
     *当前魂兽攻击属性万分比
     * </pre>
     */
    public static final int HUN_SHOU_GONG_JI_VALUE = 49;
    /**
     * <code>HUN_SHOU_SHENG_MING = 50;</code>
     *
     * <pre>
     *当前魂兽生命属性万分比
     * </pre>
     */
    public static final int HUN_SHOU_SHENG_MING_VALUE = 50;
    /**
     * <code>HUN_SHOU_PO_JIA = 51;</code>
     *
     * <pre>
     *当前魂兽破甲属性万分比
     * </pre>
     */
    public static final int HUN_SHOU_PO_JIA_VALUE = 51;
    /**
     * <code>HUN_SHOU_FANG_YU = 52;</code>
     *
     * <pre>
     *当前魂兽防御属性万分比
     * </pre>
     */
    public static final int HUN_SHOU_FANG_YU_VALUE = 52;
    /**
     * <code>ALL_HUN_SHOU_GONG_JI = 53;</code>
     *
     * <pre>
     *所有魂兽攻击属性万分比
     * </pre>
     */
    public static final int ALL_HUN_SHOU_GONG_JI_VALUE = 53;
    /**
     * <code>ALL_HUN_SHOU_SHENG_MING = 54;</code>
     *
     * <pre>
     *所有魂兽生命属性万分比
     * </pre>
     */
    public static final int ALL_HUN_SHOU_SHENG_MING_VALUE = 54;
    /**
     * <code>ALL_HUN_SHOU_PO_JIA = 55;</code>
     *
     * <pre>
     *所有魂兽破甲属性万分比
     * </pre>
     */
    public static final int ALL_HUN_SHOU_PO_JIA_VALUE = 55;
    /**
     * <code>ALL_HUN_SHOU_FANG_YU = 56;</code>
     *
     * <pre>
     *所有魂兽防御属性万分比
     * </pre>
     */
    public static final int ALL_HUN_SHOU_FANG_YU_VALUE = 56;
    /**
     * <code>ALL_HUN_SHOU_ALL_BASE = 57;</code>
     *
     * <pre>
     *所有魂兽，所有基础属性和装备的基础属性(攻击,生命,破甲,防御)万分比
     * </pre>
     */
    public static final int ALL_HUN_SHOU_ALL_BASE_VALUE = 57;
    /**
     * <code>JI_NENG_CD = 58;</code>
     *
     * <pre>
     *非普攻技能CD增加或减少万分比
     * </pre>
     */
    public static final int JI_NENG_CD_VALUE = 58;


    public final int getNumber() { return value; }

    public static StatType valueOf(int value) {
      switch (value) {
        case 0: return GONG_JI;
        case 1: return SHENG_MING;
        case 2: return PO_JIA;
        case 3: return FANG_YU;
        case 4: return MING_ZHONG;
        case 5: return SHAN_BI;
        case 6: return BAO_JI;
        case 7: return JIAN_REN;
        case 8: return WU_XING_GONG_JI;
        case 9: return WU_XING_FANG_YU;
        case 10: return SHANG_HAI_JIA_SHEN;
        case 11: return SHANG_HAI_JIAN_MIAN;
        case 12: return MING_ZHONG_JI_LV;
        case 13: return SHAN_BI_JI_LV;
        case 14: return HU_JIA_CHUAN_TOU;
        case 15: return JUE_SE_HU_JIA;
        case 16: return GE_DANG_CHUAN_TOU;
        case 17: return GE_DANG_JI_LV;
        case 18: return BAO_JI_JI_LV;
        case 19: return BAO_JI_DI_KANG;
        case 20: return HUI_XIN_JI_LV;
        case 21: return HUI_XIN_DI_KANG;
        case 22: return BAO_JI_SHANG_HAI;
        case 23: return HUI_XIN_SHANG_HAI;
        case 24: return JI_NENG_SHANG_HAI;
        case 25: return JI_NENG_ZENG_SHANG;
        case 26: return JI_NENG_JIAN_SHANG;
        case 27: return QIANG_JI_JI_LV;
        case 28: return XU_RUO_JI_LV;
        case 29: return MOVE_SPEED;
        case 30: return TONG_QIAN_DIAO_LUO;
        case 31: return WU_PIN_DIAO_LUO;
        case 32: return MEI_3_JI_SHENG_MING;
        case 33: return MEI_3_JI_FANG_YU;
        case 34: return MEI_3_JI_GONG_JI;
        case 35: return MEI_3_JI_PO_JIA;
        case 36: return SHA_GUAI_JING_YAN;
        case 37: return FANG_JU_SHENG_MING;
        case 38: return FANG_JU_FANG_YU;
        case 39: return WU_QI_PO_JIA;
        case 40: return WU_QI_GONG_JI;
        case 41: return XIAN_QI_GONG_JI;
        case 42: return JI_CHU_PO_JIA;
        case 43: return JI_CHU_SHENG_MING;
        case 44: return JI_CHU_FANG_YU;
        case 45: return JI_CHU_GONG_JI;
        case 46: return QIANG_HUA_JIA_CHENG;
        case 47: return ZHUI_JIA_JI_NENG;
        case 48: return SHAN_BI_JI_NENG;
        case 49: return HUN_SHOU_GONG_JI;
        case 50: return HUN_SHOU_SHENG_MING;
        case 51: return HUN_SHOU_PO_JIA;
        case 52: return HUN_SHOU_FANG_YU;
        case 53: return ALL_HUN_SHOU_GONG_JI;
        case 54: return ALL_HUN_SHOU_SHENG_MING;
        case 55: return ALL_HUN_SHOU_PO_JIA;
        case 56: return ALL_HUN_SHOU_FANG_YU;
        case 57: return ALL_HUN_SHOU_ALL_BASE;
        case 58: return JI_NENG_CD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<StatType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<StatType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StatType>() {
            public StatType findValueByNumber(int number) {
              return StatType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return app.protobuf.client.SpriteStatContent.getDescriptor().getEnumTypes().get(0);
    }

    private static final StatType[] VALUES = values();

    public static StatType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private StatType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:proto.StatType)
  }

  public interface SpriteStatProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.SpriteStatProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
     *
     * <pre>
     * 属性
     * </pre>
     */
    java.util.List<app.protobuf.client.SpriteStatContent.SingleSpriteStatProto> 
        getStatList();
    /**
     * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
     *
     * <pre>
     * 属性
     * </pre>
     */
    app.protobuf.client.SpriteStatContent.SingleSpriteStatProto getStat(int index);
    /**
     * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
     *
     * <pre>
     * 属性
     * </pre>
     */
    int getStatCount();
    /**
     * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
     *
     * <pre>
     * 属性
     * </pre>
     */
    java.util.List<? extends app.protobuf.client.SpriteStatContent.SingleSpriteStatProtoOrBuilder> 
        getStatOrBuilderList();
    /**
     * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
     *
     * <pre>
     * 属性
     * </pre>
     */
    app.protobuf.client.SpriteStatContent.SingleSpriteStatProtoOrBuilder getStatOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code proto.SpriteStatProto}
   */
  public static final class SpriteStatProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.SpriteStatProto)
      SpriteStatProtoOrBuilder {
    // Use SpriteStatProto.newBuilder() to construct.
    private SpriteStatProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SpriteStatProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SpriteStatProto defaultInstance;
    public static SpriteStatProto getDefaultInstance() {
      return defaultInstance;
    }

    public SpriteStatProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SpriteStatProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                stat_ = new java.util.ArrayList<app.protobuf.client.SpriteStatContent.SingleSpriteStatProto>();
                mutable_bitField0_ |= 0x00000001;
              }
              stat_.add(input.readMessage(app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          stat_ = java.util.Collections.unmodifiableList(stat_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return app.protobuf.client.SpriteStatContent.internal_static_proto_SpriteStatProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return app.protobuf.client.SpriteStatContent.internal_static_proto_SpriteStatProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              app.protobuf.client.SpriteStatContent.SpriteStatProto.class, app.protobuf.client.SpriteStatContent.SpriteStatProto.Builder.class);
    }

    public static com.google.protobuf.Parser<SpriteStatProto> PARSER =
        new com.google.protobuf.AbstractParser<SpriteStatProto>() {
      public SpriteStatProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SpriteStatProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SpriteStatProto> getParserForType() {
      return PARSER;
    }

    public static final int STAT_FIELD_NUMBER = 1;
    private java.util.List<app.protobuf.client.SpriteStatContent.SingleSpriteStatProto> stat_;
    /**
     * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
     *
     * <pre>
     * 属性
     * </pre>
     */
    public java.util.List<app.protobuf.client.SpriteStatContent.SingleSpriteStatProto> getStatList() {
      return stat_;
    }
    /**
     * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
     *
     * <pre>
     * 属性
     * </pre>
     */
    public java.util.List<? extends app.protobuf.client.SpriteStatContent.SingleSpriteStatProtoOrBuilder> 
        getStatOrBuilderList() {
      return stat_;
    }
    /**
     * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
     *
     * <pre>
     * 属性
     * </pre>
     */
    public int getStatCount() {
      return stat_.size();
    }
    /**
     * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
     *
     * <pre>
     * 属性
     * </pre>
     */
    public app.protobuf.client.SpriteStatContent.SingleSpriteStatProto getStat(int index) {
      return stat_.get(index);
    }
    /**
     * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
     *
     * <pre>
     * 属性
     * </pre>
     */
    public app.protobuf.client.SpriteStatContent.SingleSpriteStatProtoOrBuilder getStatOrBuilder(
        int index) {
      return stat_.get(index);
    }

    private void initFields() {
      stat_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < stat_.size(); i++) {
        output.writeMessage(1, stat_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < stat_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, stat_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static app.protobuf.client.SpriteStatContent.SpriteStatProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.client.SpriteStatContent.SpriteStatProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.client.SpriteStatContent.SpriteStatProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.client.SpriteStatContent.SpriteStatProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.client.SpriteStatContent.SpriteStatProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.client.SpriteStatContent.SpriteStatProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static app.protobuf.client.SpriteStatContent.SpriteStatProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static app.protobuf.client.SpriteStatContent.SpriteStatProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static app.protobuf.client.SpriteStatContent.SpriteStatProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.client.SpriteStatContent.SpriteStatProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(app.protobuf.client.SpriteStatContent.SpriteStatProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.SpriteStatProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.SpriteStatProto)
        app.protobuf.client.SpriteStatContent.SpriteStatProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return app.protobuf.client.SpriteStatContent.internal_static_proto_SpriteStatProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return app.protobuf.client.SpriteStatContent.internal_static_proto_SpriteStatProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                app.protobuf.client.SpriteStatContent.SpriteStatProto.class, app.protobuf.client.SpriteStatContent.SpriteStatProto.Builder.class);
      }

      // Construct using app.protobuf.client.SpriteStatContent.SpriteStatProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStatFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (statBuilder_ == null) {
          stat_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          statBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return app.protobuf.client.SpriteStatContent.internal_static_proto_SpriteStatProto_descriptor;
      }

      public app.protobuf.client.SpriteStatContent.SpriteStatProto getDefaultInstanceForType() {
        return app.protobuf.client.SpriteStatContent.SpriteStatProto.getDefaultInstance();
      }

      public app.protobuf.client.SpriteStatContent.SpriteStatProto build() {
        app.protobuf.client.SpriteStatContent.SpriteStatProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public app.protobuf.client.SpriteStatContent.SpriteStatProto buildPartial() {
        app.protobuf.client.SpriteStatContent.SpriteStatProto result = new app.protobuf.client.SpriteStatContent.SpriteStatProto(this);
        int from_bitField0_ = bitField0_;
        if (statBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            stat_ = java.util.Collections.unmodifiableList(stat_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.stat_ = stat_;
        } else {
          result.stat_ = statBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof app.protobuf.client.SpriteStatContent.SpriteStatProto) {
          return mergeFrom((app.protobuf.client.SpriteStatContent.SpriteStatProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(app.protobuf.client.SpriteStatContent.SpriteStatProto other) {
        if (other == app.protobuf.client.SpriteStatContent.SpriteStatProto.getDefaultInstance()) return this;
        if (statBuilder_ == null) {
          if (!other.stat_.isEmpty()) {
            if (stat_.isEmpty()) {
              stat_ = other.stat_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureStatIsMutable();
              stat_.addAll(other.stat_);
            }
            onChanged();
          }
        } else {
          if (!other.stat_.isEmpty()) {
            if (statBuilder_.isEmpty()) {
              statBuilder_.dispose();
              statBuilder_ = null;
              stat_ = other.stat_;
              bitField0_ = (bitField0_ & ~0x00000001);
              statBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStatFieldBuilder() : null;
            } else {
              statBuilder_.addAllMessages(other.stat_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        app.protobuf.client.SpriteStatContent.SpriteStatProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (app.protobuf.client.SpriteStatContent.SpriteStatProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<app.protobuf.client.SpriteStatContent.SingleSpriteStatProto> stat_ =
        java.util.Collections.emptyList();
      private void ensureStatIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          stat_ = new java.util.ArrayList<app.protobuf.client.SpriteStatContent.SingleSpriteStatProto>(stat_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          app.protobuf.client.SpriteStatContent.SingleSpriteStatProto, app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.Builder, app.protobuf.client.SpriteStatContent.SingleSpriteStatProtoOrBuilder> statBuilder_;

      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public java.util.List<app.protobuf.client.SpriteStatContent.SingleSpriteStatProto> getStatList() {
        if (statBuilder_ == null) {
          return java.util.Collections.unmodifiableList(stat_);
        } else {
          return statBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public int getStatCount() {
        if (statBuilder_ == null) {
          return stat_.size();
        } else {
          return statBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public app.protobuf.client.SpriteStatContent.SingleSpriteStatProto getStat(int index) {
        if (statBuilder_ == null) {
          return stat_.get(index);
        } else {
          return statBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public Builder setStat(
          int index, app.protobuf.client.SpriteStatContent.SingleSpriteStatProto value) {
        if (statBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatIsMutable();
          stat_.set(index, value);
          onChanged();
        } else {
          statBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public Builder setStat(
          int index, app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.Builder builderForValue) {
        if (statBuilder_ == null) {
          ensureStatIsMutable();
          stat_.set(index, builderForValue.build());
          onChanged();
        } else {
          statBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public Builder addStat(app.protobuf.client.SpriteStatContent.SingleSpriteStatProto value) {
        if (statBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatIsMutable();
          stat_.add(value);
          onChanged();
        } else {
          statBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public Builder addStat(
          int index, app.protobuf.client.SpriteStatContent.SingleSpriteStatProto value) {
        if (statBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatIsMutable();
          stat_.add(index, value);
          onChanged();
        } else {
          statBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public Builder addStat(
          app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.Builder builderForValue) {
        if (statBuilder_ == null) {
          ensureStatIsMutable();
          stat_.add(builderForValue.build());
          onChanged();
        } else {
          statBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public Builder addStat(
          int index, app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.Builder builderForValue) {
        if (statBuilder_ == null) {
          ensureStatIsMutable();
          stat_.add(index, builderForValue.build());
          onChanged();
        } else {
          statBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public Builder addAllStat(
          java.lang.Iterable<? extends app.protobuf.client.SpriteStatContent.SingleSpriteStatProto> values) {
        if (statBuilder_ == null) {
          ensureStatIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, stat_);
          onChanged();
        } else {
          statBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public Builder clearStat() {
        if (statBuilder_ == null) {
          stat_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          statBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public Builder removeStat(int index) {
        if (statBuilder_ == null) {
          ensureStatIsMutable();
          stat_.remove(index);
          onChanged();
        } else {
          statBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.Builder getStatBuilder(
          int index) {
        return getStatFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public app.protobuf.client.SpriteStatContent.SingleSpriteStatProtoOrBuilder getStatOrBuilder(
          int index) {
        if (statBuilder_ == null) {
          return stat_.get(index);  } else {
          return statBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public java.util.List<? extends app.protobuf.client.SpriteStatContent.SingleSpriteStatProtoOrBuilder> 
           getStatOrBuilderList() {
        if (statBuilder_ != null) {
          return statBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(stat_);
        }
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.Builder addStatBuilder() {
        return getStatFieldBuilder().addBuilder(
            app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.getDefaultInstance());
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.Builder addStatBuilder(
          int index) {
        return getStatFieldBuilder().addBuilder(
            index, app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.getDefaultInstance());
      }
      /**
       * <code>repeated .proto.SingleSpriteStatProto stat = 1;</code>
       *
       * <pre>
       * 属性
       * </pre>
       */
      public java.util.List<app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.Builder> 
           getStatBuilderList() {
        return getStatFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          app.protobuf.client.SpriteStatContent.SingleSpriteStatProto, app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.Builder, app.protobuf.client.SpriteStatContent.SingleSpriteStatProtoOrBuilder> 
          getStatFieldBuilder() {
        if (statBuilder_ == null) {
          statBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              app.protobuf.client.SpriteStatContent.SingleSpriteStatProto, app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.Builder, app.protobuf.client.SpriteStatContent.SingleSpriteStatProtoOrBuilder>(
                  stat_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          stat_ = null;
        }
        return statBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:proto.SpriteStatProto)
    }

    static {
      defaultInstance = new SpriteStatProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.SpriteStatProto)
  }

  public interface SingleSpriteStatProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.SingleSpriteStatProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .proto.StatType stat_type = 1;</code>
     *
     * <pre>
     * 属性类型
     * </pre>
     */
    boolean hasStatType();
    /**
     * <code>optional .proto.StatType stat_type = 1;</code>
     *
     * <pre>
     * 属性类型
     * </pre>
     */
    app.protobuf.client.SpriteStatContent.StatType getStatType();

    /**
     * <code>optional int64 value = 2;</code>
     *
     * <pre>
     * 数值
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional int64 value = 2;</code>
     *
     * <pre>
     * 数值
     * </pre>
     */
    long getValue();

    /**
     * <code>optional int32 percent = 3;</code>
     *
     * <pre>
     * 百分比
     * </pre>
     */
    boolean hasPercent();
    /**
     * <code>optional int32 percent = 3;</code>
     *
     * <pre>
     * 百分比
     * </pre>
     */
    int getPercent();
  }
  /**
   * Protobuf type {@code proto.SingleSpriteStatProto}
   */
  public static final class SingleSpriteStatProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.SingleSpriteStatProto)
      SingleSpriteStatProtoOrBuilder {
    // Use SingleSpriteStatProto.newBuilder() to construct.
    private SingleSpriteStatProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SingleSpriteStatProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SingleSpriteStatProto defaultInstance;
    public static SingleSpriteStatProto getDefaultInstance() {
      return defaultInstance;
    }

    public SingleSpriteStatProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SingleSpriteStatProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              app.protobuf.client.SpriteStatContent.StatType value = app.protobuf.client.SpriteStatContent.StatType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                statType_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              value_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              percent_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return app.protobuf.client.SpriteStatContent.internal_static_proto_SingleSpriteStatProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return app.protobuf.client.SpriteStatContent.internal_static_proto_SingleSpriteStatProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.class, app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.Builder.class);
    }

    public static com.google.protobuf.Parser<SingleSpriteStatProto> PARSER =
        new com.google.protobuf.AbstractParser<SingleSpriteStatProto>() {
      public SingleSpriteStatProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SingleSpriteStatProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SingleSpriteStatProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int STAT_TYPE_FIELD_NUMBER = 1;
    private app.protobuf.client.SpriteStatContent.StatType statType_;
    /**
     * <code>optional .proto.StatType stat_type = 1;</code>
     *
     * <pre>
     * 属性类型
     * </pre>
     */
    public boolean hasStatType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .proto.StatType stat_type = 1;</code>
     *
     * <pre>
     * 属性类型
     * </pre>
     */
    public app.protobuf.client.SpriteStatContent.StatType getStatType() {
      return statType_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private long value_;
    /**
     * <code>optional int64 value = 2;</code>
     *
     * <pre>
     * 数值
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 value = 2;</code>
     *
     * <pre>
     * 数值
     * </pre>
     */
    public long getValue() {
      return value_;
    }

    public static final int PERCENT_FIELD_NUMBER = 3;
    private int percent_;
    /**
     * <code>optional int32 percent = 3;</code>
     *
     * <pre>
     * 百分比
     * </pre>
     */
    public boolean hasPercent() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 percent = 3;</code>
     *
     * <pre>
     * 百分比
     * </pre>
     */
    public int getPercent() {
      return percent_;
    }

    private void initFields() {
      statType_ = app.protobuf.client.SpriteStatContent.StatType.GONG_JI;
      value_ = 0L;
      percent_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, statType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, percent_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, statType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, percent_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static app.protobuf.client.SpriteStatContent.SingleSpriteStatProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.client.SpriteStatContent.SingleSpriteStatProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.client.SpriteStatContent.SingleSpriteStatProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.client.SpriteStatContent.SingleSpriteStatProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.client.SpriteStatContent.SingleSpriteStatProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.client.SpriteStatContent.SingleSpriteStatProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static app.protobuf.client.SpriteStatContent.SingleSpriteStatProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static app.protobuf.client.SpriteStatContent.SingleSpriteStatProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static app.protobuf.client.SpriteStatContent.SingleSpriteStatProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.client.SpriteStatContent.SingleSpriteStatProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(app.protobuf.client.SpriteStatContent.SingleSpriteStatProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.SingleSpriteStatProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.SingleSpriteStatProto)
        app.protobuf.client.SpriteStatContent.SingleSpriteStatProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return app.protobuf.client.SpriteStatContent.internal_static_proto_SingleSpriteStatProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return app.protobuf.client.SpriteStatContent.internal_static_proto_SingleSpriteStatProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.class, app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.Builder.class);
      }

      // Construct using app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        statType_ = app.protobuf.client.SpriteStatContent.StatType.GONG_JI;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        percent_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return app.protobuf.client.SpriteStatContent.internal_static_proto_SingleSpriteStatProto_descriptor;
      }

      public app.protobuf.client.SpriteStatContent.SingleSpriteStatProto getDefaultInstanceForType() {
        return app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.getDefaultInstance();
      }

      public app.protobuf.client.SpriteStatContent.SingleSpriteStatProto build() {
        app.protobuf.client.SpriteStatContent.SingleSpriteStatProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public app.protobuf.client.SpriteStatContent.SingleSpriteStatProto buildPartial() {
        app.protobuf.client.SpriteStatContent.SingleSpriteStatProto result = new app.protobuf.client.SpriteStatContent.SingleSpriteStatProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.statType_ = statType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.percent_ = percent_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof app.protobuf.client.SpriteStatContent.SingleSpriteStatProto) {
          return mergeFrom((app.protobuf.client.SpriteStatContent.SingleSpriteStatProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(app.protobuf.client.SpriteStatContent.SingleSpriteStatProto other) {
        if (other == app.protobuf.client.SpriteStatContent.SingleSpriteStatProto.getDefaultInstance()) return this;
        if (other.hasStatType()) {
          setStatType(other.getStatType());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        if (other.hasPercent()) {
          setPercent(other.getPercent());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        app.protobuf.client.SpriteStatContent.SingleSpriteStatProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (app.protobuf.client.SpriteStatContent.SingleSpriteStatProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private app.protobuf.client.SpriteStatContent.StatType statType_ = app.protobuf.client.SpriteStatContent.StatType.GONG_JI;
      /**
       * <code>optional .proto.StatType stat_type = 1;</code>
       *
       * <pre>
       * 属性类型
       * </pre>
       */
      public boolean hasStatType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .proto.StatType stat_type = 1;</code>
       *
       * <pre>
       * 属性类型
       * </pre>
       */
      public app.protobuf.client.SpriteStatContent.StatType getStatType() {
        return statType_;
      }
      /**
       * <code>optional .proto.StatType stat_type = 1;</code>
       *
       * <pre>
       * 属性类型
       * </pre>
       */
      public Builder setStatType(app.protobuf.client.SpriteStatContent.StatType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        statType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .proto.StatType stat_type = 1;</code>
       *
       * <pre>
       * 属性类型
       * </pre>
       */
      public Builder clearStatType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        statType_ = app.protobuf.client.SpriteStatContent.StatType.GONG_JI;
        onChanged();
        return this;
      }

      private long value_ ;
      /**
       * <code>optional int64 value = 2;</code>
       *
       * <pre>
       * 数值
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 value = 2;</code>
       *
       * <pre>
       * 数值
       * </pre>
       */
      public long getValue() {
        return value_;
      }
      /**
       * <code>optional int64 value = 2;</code>
       *
       * <pre>
       * 数值
       * </pre>
       */
      public Builder setValue(long value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 value = 2;</code>
       *
       * <pre>
       * 数值
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0L;
        onChanged();
        return this;
      }

      private int percent_ ;
      /**
       * <code>optional int32 percent = 3;</code>
       *
       * <pre>
       * 百分比
       * </pre>
       */
      public boolean hasPercent() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 percent = 3;</code>
       *
       * <pre>
       * 百分比
       * </pre>
       */
      public int getPercent() {
        return percent_;
      }
      /**
       * <code>optional int32 percent = 3;</code>
       *
       * <pre>
       * 百分比
       * </pre>
       */
      public Builder setPercent(int value) {
        bitField0_ |= 0x00000004;
        percent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 percent = 3;</code>
       *
       * <pre>
       * 百分比
       * </pre>
       */
      public Builder clearPercent() {
        bitField0_ = (bitField0_ & ~0x00000004);
        percent_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.SingleSpriteStatProto)
    }

    static {
      defaultInstance = new SingleSpriteStatProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.SingleSpriteStatProto)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_SpriteStatProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_SpriteStatProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_SingleSpriteStatProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_SingleSpriteStatProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\027client/spritestat.proto\022\005proto\"=\n\017Spri" +
      "teStatProto\022*\n\004stat\030\001 \003(\0132\034.proto.Single" +
      "SpriteStatProto\"[\n\025SingleSpriteStatProto" +
      "\022\"\n\tstat_type\030\001 \001(\0162\017.proto.StatType\022\r\n\005" +
      "value\030\002 \001(\003\022\017\n\007percent\030\003 \001(\005*\320\t\n\010StatTyp" +
      "e\022\013\n\007GONG_JI\020\000\022\016\n\nSHENG_MING\020\001\022\n\n\006PO_JIA" +
      "\020\002\022\013\n\007FANG_YU\020\003\022\016\n\nMING_ZHONG\020\004\022\013\n\007SHAN_" +
      "BI\020\005\022\n\n\006BAO_JI\020\006\022\014\n\010JIAN_REN\020\007\022\023\n\017WU_XIN" +
      "G_GONG_JI\020\010\022\023\n\017WU_XING_FANG_YU\020\t\022\026\n\022SHAN" +
      "G_HAI_JIA_SHEN\020\n\022\027\n\023SHANG_HAI_JIAN_MIAN\020",
      "\013\022\024\n\020MING_ZHONG_JI_LV\020\014\022\021\n\rSHAN_BI_JI_LV" +
      "\020\r\022\024\n\020HU_JIA_CHUAN_TOU\020\016\022\021\n\rJUE_SE_HU_JI" +
      "A\020\017\022\025\n\021GE_DANG_CHUAN_TOU\020\020\022\021\n\rGE_DANG_JI" +
      "_LV\020\021\022\020\n\014BAO_JI_JI_LV\020\022\022\022\n\016BAO_JI_DI_KAN" +
      "G\020\023\022\021\n\rHUI_XIN_JI_LV\020\024\022\023\n\017HUI_XIN_DI_KAN" +
      "G\020\025\022\024\n\020BAO_JI_SHANG_HAI\020\026\022\025\n\021HUI_XIN_SHA" +
      "NG_HAI\020\027\022\025\n\021JI_NENG_SHANG_HAI\020\030\022\026\n\022JI_NE" +
      "NG_ZENG_SHANG\020\031\022\026\n\022JI_NENG_JIAN_SHANG\020\032\022" +
      "\022\n\016QIANG_JI_JI_LV\020\033\022\020\n\014XU_RUO_JI_LV\020\034\022\016\n" +
      "\nMOVE_SPEED\020\035\022\026\n\022TONG_QIAN_DIAO_LUO\020\036\022\023\n",
      "\017WU_PIN_DIAO_LUO\020\037\022\027\n\023MEI_3_JI_SHENG_MIN" +
      "G\020 \022\024\n\020MEI_3_JI_FANG_YU\020!\022\024\n\020MEI_3_JI_GO" +
      "NG_JI\020\"\022\023\n\017MEI_3_JI_PO_JIA\020#\022\025\n\021SHA_GUAI" +
      "_JING_YAN\020$\022\026\n\022FANG_JU_SHENG_MING\020%\022\023\n\017F" +
      "ANG_JU_FANG_YU\020&\022\020\n\014WU_QI_PO_JIA\020\'\022\021\n\rWU" +
      "_QI_GONG_JI\020(\022\023\n\017XIAN_QI_GONG_JI\020)\022\021\n\rJI" +
      "_CHU_PO_JIA\020*\022\025\n\021JI_CHU_SHENG_MING\020+\022\022\n\016" +
      "JI_CHU_FANG_YU\020,\022\022\n\016JI_CHU_GONG_JI\020-\022\027\n\023" +
      "QIANG_HUA_JIA_CHENG\020.\022\024\n\020ZHUI_JIA_JI_NEN" +
      "G\020/\022\023\n\017SHAN_BI_JI_NENG\0200\022\024\n\020HUN_SHOU_GON",
      "G_JI\0201\022\027\n\023HUN_SHOU_SHENG_MING\0202\022\023\n\017HUN_S" +
      "HOU_PO_JIA\0203\022\024\n\020HUN_SHOU_FANG_YU\0204\022\030\n\024AL" +
      "L_HUN_SHOU_GONG_JI\0205\022\033\n\027ALL_HUN_SHOU_SHE" +
      "NG_MING\0206\022\027\n\023ALL_HUN_SHOU_PO_JIA\0207\022\030\n\024AL" +
      "L_HUN_SHOU_FANG_YU\0208\022\031\n\025ALL_HUN_SHOU_ALL" +
      "_BASE\0209\022\016\n\nJI_NENG_CD\020:B*\n\023app.protobuf." +
      "clientB\021SpriteStatContentH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_proto_SpriteStatProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_proto_SpriteStatProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_SpriteStatProto_descriptor,
        new java.lang.String[] { "Stat", });
    internal_static_proto_SingleSpriteStatProto_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_proto_SingleSpriteStatProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_SingleSpriteStatProto_descriptor,
        new java.lang.String[] { "StatType", "Value", "Percent", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
