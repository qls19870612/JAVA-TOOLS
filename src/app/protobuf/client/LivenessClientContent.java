// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/liveness_client.proto

package app.protobuf.client;

public final class LivenessClientContent {
  private LivenessClientContent() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code proto.LivenessType}
   */
  public enum LivenessType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LIVENESS_REWARD_TASK = 1;</code>
     *
     * <pre>
     *尾部带 ‘-’号的表示已经处理活跃度，未加的，需要后续补充
     * </pre>
     */
    LIVENESS_REWARD_TASK(0, 1),
    /**
     * <code>LIVENESS_HONOR_BATTLE = 2;</code>
     *
     * <pre>
     *决战青云 -(荣誉挑战)
     * </pre>
     */
    LIVENESS_HONOR_BATTLE(1, 2),
    /**
     * <code>LIVENESS_MOKU_DUNGEON = 3;</code>
     *
     * <pre>
     *九幽魔窟 -(远古圣坛)
     * </pre>
     */
    LIVENESS_MOKU_DUNGEON(2, 3),
    /**
     * <code>LIVENESS_XUEZHEN_DUNGEON = 4;</code>
     *
     * <pre>
     *圣灵血阵 -
     * </pre>
     */
    LIVENESS_XUEZHEN_DUNGEON(3, 4),
    /**
     * <code>LIVENESS_BAOKU_DUNGEON = 5;</code>
     *
     * <pre>
     *魔王宝库 -
     * </pre>
     */
    LIVENESS_BAOKU_DUNGEON(4, 5),
    /**
     * <code>LIVENESS_GUARD_ELF_DUNGEON = 6;</code>
     *
     * <pre>
     *守护仙灵 -
     * </pre>
     */
    LIVENESS_GUARD_ELF_DUNGEON(5, 6),
    /**
     * <code>LIVENESS_WORLD_BOSS = 7;</code>
     *
     * <pre>
     *世界BOSS -
     * </pre>
     */
    LIVENESS_WORLD_BOSS(6, 7),
    /**
     * <code>LIVENESS_SELF_BOSS = 8;</code>
     *
     * <pre>
     *个人BOSS -
     * </pre>
     */
    LIVENESS_SELF_BOSS(7, 8),
    /**
     * <code>LIVENESS_ESCORT_TASK = 9;</code>
     *
     * <pre>
     *护送美女 -
     * </pre>
     */
    LIVENESS_ESCORT_TASK(8, 9),
    /**
     * <code>LIVENESS_EQUIP_ENHANCE = 10;</code>
     *
     * <pre>
     *装备强化 -
     * </pre>
     */
    LIVENESS_EQUIP_ENHANCE(9, 10),
    /**
     * <code>LIVENESS_GUILD_TASK = 11;</code>
     *
     * <pre>
     *仙盟周任务 - 不需要活跃度
     * </pre>
     */
    LIVENESS_GUILD_TASK(10, 11),
    /**
     * <code>LIVENESS_AUTO_FIGHT = 12;</code>
     *
     * <pre>
     *推荐挂机点 - 不需要活跃度
     * </pre>
     */
    LIVENESS_AUTO_FIGHT(11, 12),
    /**
     * <code>LIVENESS_BAI_GUI_YE_XING = 13;</code>
     *
     * <pre>
     *百鬼夜行(纹章秘境) -
     * </pre>
     */
    LIVENESS_BAI_GUI_YE_XING(12, 13),
    /**
     * <code>LIVENESS_EXAM_DUNGEON = 14;</code>
     *
     * <pre>
     *休仙论道 -
     * </pre>
     */
    LIVENESS_EXAM_DUNGEON(13, 14),
    /**
     * <code>LIVENESS_ESCORT_DOUBLE_TASK = 15;</code>
     *
     * <pre>
     *双倍护送 - 不需要活跃度
     * </pre>
     */
    LIVENESS_ESCORT_DOUBLE_TASK(14, 15),
    /**
     * <code>LIVENESS_SAN_JIE_ZHAN_CHANG = 16;</code>
     *
     * <pre>
     *三界战场
     * </pre>
     */
    LIVENESS_SAN_JIE_ZHAN_CHANG(15, 16),
    /**
     * <code>LIVENESS_QING_YUN_DUO_BAO = 17;</code>
     *
     * <pre>
     *青云夺宝 - 不需要活跃度
     * </pre>
     */
    LIVENESS_QING_YUN_DUO_BAO(16, 17),
    /**
     * <code>LIVENESS_SHOU_WEI_XIAN_MENG = 18;</code>
     *
     * <pre>
     *守卫仙盟(守卫公会) -
     * </pre>
     */
    LIVENESS_SHOU_WEI_XIAN_MENG(17, 18),
    /**
     * <code>LIVENESS_DIAN_FENG_DUI_JUE = 19;</code>
     *
     * <pre>
     *巅峰对决 - 不需要活跃度
     * </pre>
     */
    LIVENESS_DIAN_FENG_DUI_JUE(18, 19),
    /**
     * <code>LIVENESS_LUE_DUO_XIAN_DAN = 20;</code>
     *
     * <pre>
     *掠夺仙丹
     * </pre>
     */
    LIVENESS_LUE_DUO_XIAN_DAN(19, 20),
    /**
     * <code>LIVENESS_QING_YUN_ZHI_DIAN = 21;</code>
     *
     * <pre>
     *青云之巅 -
     * </pre>
     */
    LIVENESS_QING_YUN_ZHI_DIAN(20, 21),
    /**
     * <code>LIVENESS_XIAN_MENG_WAN_YAN = 22;</code>
     *
     * <pre>
     *仙盟晚宴(帮会答题) -
     * </pre>
     */
    LIVENESS_XIAN_MENG_WAN_YAN(21, 22),
    /**
     * <code>LIVENESS_DIAN_FENG_JING_JI = 23;</code>
     *
     * <pre>
     *巅峰竞技 - 不需要活跃度
     * </pre>
     */
    LIVENESS_DIAN_FENG_JING_JI(22, 23),
    /**
     * <code>LIVENESS_SHEN_MO_ZHAN_CHANGE = 24;</code>
     *
     * <pre>
     *神魔战场
     * </pre>
     */
    LIVENESS_SHEN_MO_ZHAN_CHANGE(23, 24),
    /**
     * <code>LIVENESS_XIAN_MENG_ZHENG_BA = 25;</code>
     *
     * <pre>
     *仙盟争霸 -
     * </pre>
     */
    LIVENESS_XIAN_MENG_ZHENG_BA(24, 25),
    /**
     * <code>LIVENESS_KUA_FU_MENG_ZHAN = 26;</code>
     *
     * <pre>
     *跨服盟战
     * </pre>
     */
    LIVENESS_KUA_FU_MENG_ZHAN(25, 26),
    /**
     * <code>LIVENESS_SHEN_XIAN_ZHENG_BA = 27;</code>
     *
     * <pre>
     *圣仙争霸 - 不需要活跃度
     * </pre>
     */
    LIVENESS_SHEN_XIAN_ZHENG_BA(26, 27),
    /**
     * <code>LIVENESS_SHEN_SHOU_SHENG_YU = 28;</code>
     *
     * <pre>
     *神兽战域 - 不需要活跃度
     * </pre>
     */
    LIVENESS_SHEN_SHOU_SHENG_YU(27, 28),
    /**
     * <code>LIVENESS_XIONG_SHOU_JIANG_LIN = 29;</code>
     *
     * <pre>
     *凶兽降临
     * </pre>
     */
    LIVENESS_XIONG_SHOU_JIANG_LIN(28, 29),
    ;

    /**
     * <code>LIVENESS_REWARD_TASK = 1;</code>
     *
     * <pre>
     *尾部带 ‘-’号的表示已经处理活跃度，未加的，需要后续补充
     * </pre>
     */
    public static final int LIVENESS_REWARD_TASK_VALUE = 1;
    /**
     * <code>LIVENESS_HONOR_BATTLE = 2;</code>
     *
     * <pre>
     *决战青云 -(荣誉挑战)
     * </pre>
     */
    public static final int LIVENESS_HONOR_BATTLE_VALUE = 2;
    /**
     * <code>LIVENESS_MOKU_DUNGEON = 3;</code>
     *
     * <pre>
     *九幽魔窟 -(远古圣坛)
     * </pre>
     */
    public static final int LIVENESS_MOKU_DUNGEON_VALUE = 3;
    /**
     * <code>LIVENESS_XUEZHEN_DUNGEON = 4;</code>
     *
     * <pre>
     *圣灵血阵 -
     * </pre>
     */
    public static final int LIVENESS_XUEZHEN_DUNGEON_VALUE = 4;
    /**
     * <code>LIVENESS_BAOKU_DUNGEON = 5;</code>
     *
     * <pre>
     *魔王宝库 -
     * </pre>
     */
    public static final int LIVENESS_BAOKU_DUNGEON_VALUE = 5;
    /**
     * <code>LIVENESS_GUARD_ELF_DUNGEON = 6;</code>
     *
     * <pre>
     *守护仙灵 -
     * </pre>
     */
    public static final int LIVENESS_GUARD_ELF_DUNGEON_VALUE = 6;
    /**
     * <code>LIVENESS_WORLD_BOSS = 7;</code>
     *
     * <pre>
     *世界BOSS -
     * </pre>
     */
    public static final int LIVENESS_WORLD_BOSS_VALUE = 7;
    /**
     * <code>LIVENESS_SELF_BOSS = 8;</code>
     *
     * <pre>
     *个人BOSS -
     * </pre>
     */
    public static final int LIVENESS_SELF_BOSS_VALUE = 8;
    /**
     * <code>LIVENESS_ESCORT_TASK = 9;</code>
     *
     * <pre>
     *护送美女 -
     * </pre>
     */
    public static final int LIVENESS_ESCORT_TASK_VALUE = 9;
    /**
     * <code>LIVENESS_EQUIP_ENHANCE = 10;</code>
     *
     * <pre>
     *装备强化 -
     * </pre>
     */
    public static final int LIVENESS_EQUIP_ENHANCE_VALUE = 10;
    /**
     * <code>LIVENESS_GUILD_TASK = 11;</code>
     *
     * <pre>
     *仙盟周任务 - 不需要活跃度
     * </pre>
     */
    public static final int LIVENESS_GUILD_TASK_VALUE = 11;
    /**
     * <code>LIVENESS_AUTO_FIGHT = 12;</code>
     *
     * <pre>
     *推荐挂机点 - 不需要活跃度
     * </pre>
     */
    public static final int LIVENESS_AUTO_FIGHT_VALUE = 12;
    /**
     * <code>LIVENESS_BAI_GUI_YE_XING = 13;</code>
     *
     * <pre>
     *百鬼夜行(纹章秘境) -
     * </pre>
     */
    public static final int LIVENESS_BAI_GUI_YE_XING_VALUE = 13;
    /**
     * <code>LIVENESS_EXAM_DUNGEON = 14;</code>
     *
     * <pre>
     *休仙论道 -
     * </pre>
     */
    public static final int LIVENESS_EXAM_DUNGEON_VALUE = 14;
    /**
     * <code>LIVENESS_ESCORT_DOUBLE_TASK = 15;</code>
     *
     * <pre>
     *双倍护送 - 不需要活跃度
     * </pre>
     */
    public static final int LIVENESS_ESCORT_DOUBLE_TASK_VALUE = 15;
    /**
     * <code>LIVENESS_SAN_JIE_ZHAN_CHANG = 16;</code>
     *
     * <pre>
     *三界战场
     * </pre>
     */
    public static final int LIVENESS_SAN_JIE_ZHAN_CHANG_VALUE = 16;
    /**
     * <code>LIVENESS_QING_YUN_DUO_BAO = 17;</code>
     *
     * <pre>
     *青云夺宝 - 不需要活跃度
     * </pre>
     */
    public static final int LIVENESS_QING_YUN_DUO_BAO_VALUE = 17;
    /**
     * <code>LIVENESS_SHOU_WEI_XIAN_MENG = 18;</code>
     *
     * <pre>
     *守卫仙盟(守卫公会) -
     * </pre>
     */
    public static final int LIVENESS_SHOU_WEI_XIAN_MENG_VALUE = 18;
    /**
     * <code>LIVENESS_DIAN_FENG_DUI_JUE = 19;</code>
     *
     * <pre>
     *巅峰对决 - 不需要活跃度
     * </pre>
     */
    public static final int LIVENESS_DIAN_FENG_DUI_JUE_VALUE = 19;
    /**
     * <code>LIVENESS_LUE_DUO_XIAN_DAN = 20;</code>
     *
     * <pre>
     *掠夺仙丹
     * </pre>
     */
    public static final int LIVENESS_LUE_DUO_XIAN_DAN_VALUE = 20;
    /**
     * <code>LIVENESS_QING_YUN_ZHI_DIAN = 21;</code>
     *
     * <pre>
     *青云之巅 -
     * </pre>
     */
    public static final int LIVENESS_QING_YUN_ZHI_DIAN_VALUE = 21;
    /**
     * <code>LIVENESS_XIAN_MENG_WAN_YAN = 22;</code>
     *
     * <pre>
     *仙盟晚宴(帮会答题) -
     * </pre>
     */
    public static final int LIVENESS_XIAN_MENG_WAN_YAN_VALUE = 22;
    /**
     * <code>LIVENESS_DIAN_FENG_JING_JI = 23;</code>
     *
     * <pre>
     *巅峰竞技 - 不需要活跃度
     * </pre>
     */
    public static final int LIVENESS_DIAN_FENG_JING_JI_VALUE = 23;
    /**
     * <code>LIVENESS_SHEN_MO_ZHAN_CHANGE = 24;</code>
     *
     * <pre>
     *神魔战场
     * </pre>
     */
    public static final int LIVENESS_SHEN_MO_ZHAN_CHANGE_VALUE = 24;
    /**
     * <code>LIVENESS_XIAN_MENG_ZHENG_BA = 25;</code>
     *
     * <pre>
     *仙盟争霸 -
     * </pre>
     */
    public static final int LIVENESS_XIAN_MENG_ZHENG_BA_VALUE = 25;
    /**
     * <code>LIVENESS_KUA_FU_MENG_ZHAN = 26;</code>
     *
     * <pre>
     *跨服盟战
     * </pre>
     */
    public static final int LIVENESS_KUA_FU_MENG_ZHAN_VALUE = 26;
    /**
     * <code>LIVENESS_SHEN_XIAN_ZHENG_BA = 27;</code>
     *
     * <pre>
     *圣仙争霸 - 不需要活跃度
     * </pre>
     */
    public static final int LIVENESS_SHEN_XIAN_ZHENG_BA_VALUE = 27;
    /**
     * <code>LIVENESS_SHEN_SHOU_SHENG_YU = 28;</code>
     *
     * <pre>
     *神兽战域 - 不需要活跃度
     * </pre>
     */
    public static final int LIVENESS_SHEN_SHOU_SHENG_YU_VALUE = 28;
    /**
     * <code>LIVENESS_XIONG_SHOU_JIANG_LIN = 29;</code>
     *
     * <pre>
     *凶兽降临
     * </pre>
     */
    public static final int LIVENESS_XIONG_SHOU_JIANG_LIN_VALUE = 29;


    public final int getNumber() { return value; }

    public static LivenessType valueOf(int value) {
      switch (value) {
        case 1: return LIVENESS_REWARD_TASK;
        case 2: return LIVENESS_HONOR_BATTLE;
        case 3: return LIVENESS_MOKU_DUNGEON;
        case 4: return LIVENESS_XUEZHEN_DUNGEON;
        case 5: return LIVENESS_BAOKU_DUNGEON;
        case 6: return LIVENESS_GUARD_ELF_DUNGEON;
        case 7: return LIVENESS_WORLD_BOSS;
        case 8: return LIVENESS_SELF_BOSS;
        case 9: return LIVENESS_ESCORT_TASK;
        case 10: return LIVENESS_EQUIP_ENHANCE;
        case 11: return LIVENESS_GUILD_TASK;
        case 12: return LIVENESS_AUTO_FIGHT;
        case 13: return LIVENESS_BAI_GUI_YE_XING;
        case 14: return LIVENESS_EXAM_DUNGEON;
        case 15: return LIVENESS_ESCORT_DOUBLE_TASK;
        case 16: return LIVENESS_SAN_JIE_ZHAN_CHANG;
        case 17: return LIVENESS_QING_YUN_DUO_BAO;
        case 18: return LIVENESS_SHOU_WEI_XIAN_MENG;
        case 19: return LIVENESS_DIAN_FENG_DUI_JUE;
        case 20: return LIVENESS_LUE_DUO_XIAN_DAN;
        case 21: return LIVENESS_QING_YUN_ZHI_DIAN;
        case 22: return LIVENESS_XIAN_MENG_WAN_YAN;
        case 23: return LIVENESS_DIAN_FENG_JING_JI;
        case 24: return LIVENESS_SHEN_MO_ZHAN_CHANGE;
        case 25: return LIVENESS_XIAN_MENG_ZHENG_BA;
        case 26: return LIVENESS_KUA_FU_MENG_ZHAN;
        case 27: return LIVENESS_SHEN_XIAN_ZHENG_BA;
        case 28: return LIVENESS_SHEN_SHOU_SHENG_YU;
        case 29: return LIVENESS_XIONG_SHOU_JIANG_LIN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LivenessType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<LivenessType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LivenessType>() {
            public LivenessType findValueByNumber(int number) {
              return LivenessType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return app.protobuf.client.LivenessClientContent.getDescriptor().getEnumTypes().get(0);
    }

    private static final LivenessType[] VALUES = values();

    public static LivenessType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private LivenessType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:proto.LivenessType)
  }

  public interface LivenessModuleObjClientProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.LivenessModuleObjClientProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    java.util.List<app.protobuf.client.UtilContent.Int32PairProto> 
        getLivenessTimeList();
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    app.protobuf.client.UtilContent.Int32PairProto getLivenessTime(int index);
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    int getLivenessTimeCount();
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    java.util.List<? extends app.protobuf.client.UtilContent.Int32PairProtoOrBuilder> 
        getLivenessTimeOrBuilderList();
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    app.protobuf.client.UtilContent.Int32PairProtoOrBuilder getLivenessTimeOrBuilder(
        int index);

    /**
     * <code>optional int32 daily_liveness = 2;</code>
     *
     * <pre>
     *当日活跃度总数
     * </pre>
     */
    boolean hasDailyLiveness();
    /**
     * <code>optional int32 daily_liveness = 2;</code>
     *
     * <pre>
     *当日活跃度总数
     * </pre>
     */
    int getDailyLiveness();

    /**
     * <code>optional int32 total_liveness = 3;</code>
     *
     * <pre>
     *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
     * </pre>
     */
    boolean hasTotalLiveness();
    /**
     * <code>optional int32 total_liveness = 3;</code>
     *
     * <pre>
     *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
     * </pre>
     */
    int getTotalLiveness();

    /**
     * <code>optional int32 got_prize_info = 4;</code>
     *
     * <pre>
     *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
     * </pre>
     */
    boolean hasGotPrizeInfo();
    /**
     * <code>optional int32 got_prize_info = 4;</code>
     *
     * <pre>
     *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
     * </pre>
     */
    int getGotPrizeInfo();
  }
  /**
   * Protobuf type {@code proto.LivenessModuleObjClientProto}
   *
   * <pre>
   * </pre>
   */
  public static final class LivenessModuleObjClientProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.LivenessModuleObjClientProto)
      LivenessModuleObjClientProtoOrBuilder {
    // Use LivenessModuleObjClientProto.newBuilder() to construct.
    private LivenessModuleObjClientProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LivenessModuleObjClientProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LivenessModuleObjClientProto defaultInstance;
    public static LivenessModuleObjClientProto getDefaultInstance() {
      return defaultInstance;
    }

    public LivenessModuleObjClientProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LivenessModuleObjClientProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                livenessTime_ = new java.util.ArrayList<app.protobuf.client.UtilContent.Int32PairProto>();
                mutable_bitField0_ |= 0x00000001;
              }
              livenessTime_.add(input.readMessage(app.protobuf.client.UtilContent.Int32PairProto.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              dailyLiveness_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              totalLiveness_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              gotPrizeInfo_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          livenessTime_ = java.util.Collections.unmodifiableList(livenessTime_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return app.protobuf.client.LivenessClientContent.internal_static_proto_LivenessModuleObjClientProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return app.protobuf.client.LivenessClientContent.internal_static_proto_LivenessModuleObjClientProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto.class, app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto.Builder.class);
    }

    public static com.google.protobuf.Parser<LivenessModuleObjClientProto> PARSER =
        new com.google.protobuf.AbstractParser<LivenessModuleObjClientProto>() {
      public LivenessModuleObjClientProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LivenessModuleObjClientProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LivenessModuleObjClientProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int LIVENESSTIME_FIELD_NUMBER = 1;
    private java.util.List<app.protobuf.client.UtilContent.Int32PairProto> livenessTime_;
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    public java.util.List<app.protobuf.client.UtilContent.Int32PairProto> getLivenessTimeList() {
      return livenessTime_;
    }
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    public java.util.List<? extends app.protobuf.client.UtilContent.Int32PairProtoOrBuilder> 
        getLivenessTimeOrBuilderList() {
      return livenessTime_;
    }
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    public int getLivenessTimeCount() {
      return livenessTime_.size();
    }
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    public app.protobuf.client.UtilContent.Int32PairProto getLivenessTime(int index) {
      return livenessTime_.get(index);
    }
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    public app.protobuf.client.UtilContent.Int32PairProtoOrBuilder getLivenessTimeOrBuilder(
        int index) {
      return livenessTime_.get(index);
    }

    public static final int DAILY_LIVENESS_FIELD_NUMBER = 2;
    private int dailyLiveness_;
    /**
     * <code>optional int32 daily_liveness = 2;</code>
     *
     * <pre>
     *当日活跃度总数
     * </pre>
     */
    public boolean hasDailyLiveness() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 daily_liveness = 2;</code>
     *
     * <pre>
     *当日活跃度总数
     * </pre>
     */
    public int getDailyLiveness() {
      return dailyLiveness_;
    }

    public static final int TOTAL_LIVENESS_FIELD_NUMBER = 3;
    private int totalLiveness_;
    /**
     * <code>optional int32 total_liveness = 3;</code>
     *
     * <pre>
     *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
     * </pre>
     */
    public boolean hasTotalLiveness() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 total_liveness = 3;</code>
     *
     * <pre>
     *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
     * </pre>
     */
    public int getTotalLiveness() {
      return totalLiveness_;
    }

    public static final int GOT_PRIZE_INFO_FIELD_NUMBER = 4;
    private int gotPrizeInfo_;
    /**
     * <code>optional int32 got_prize_info = 4;</code>
     *
     * <pre>
     *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
     * </pre>
     */
    public boolean hasGotPrizeInfo() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 got_prize_info = 4;</code>
     *
     * <pre>
     *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
     * </pre>
     */
    public int getGotPrizeInfo() {
      return gotPrizeInfo_;
    }

    private void initFields() {
      livenessTime_ = java.util.Collections.emptyList();
      dailyLiveness_ = 0;
      totalLiveness_ = 0;
      gotPrizeInfo_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < livenessTime_.size(); i++) {
        output.writeMessage(1, livenessTime_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, dailyLiveness_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, totalLiveness_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, gotPrizeInfo_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < livenessTime_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, livenessTime_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, dailyLiveness_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, totalLiveness_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, gotPrizeInfo_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.LivenessModuleObjClientProto}
     *
     * <pre>
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.LivenessModuleObjClientProto)
        app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return app.protobuf.client.LivenessClientContent.internal_static_proto_LivenessModuleObjClientProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return app.protobuf.client.LivenessClientContent.internal_static_proto_LivenessModuleObjClientProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto.class, app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto.Builder.class);
      }

      // Construct using app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLivenessTimeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (livenessTimeBuilder_ == null) {
          livenessTime_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          livenessTimeBuilder_.clear();
        }
        dailyLiveness_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        totalLiveness_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        gotPrizeInfo_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return app.protobuf.client.LivenessClientContent.internal_static_proto_LivenessModuleObjClientProto_descriptor;
      }

      public app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto getDefaultInstanceForType() {
        return app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto.getDefaultInstance();
      }

      public app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto build() {
        app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto buildPartial() {
        app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto result = new app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (livenessTimeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            livenessTime_ = java.util.Collections.unmodifiableList(livenessTime_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.livenessTime_ = livenessTime_;
        } else {
          result.livenessTime_ = livenessTimeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.dailyLiveness_ = dailyLiveness_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.totalLiveness_ = totalLiveness_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gotPrizeInfo_ = gotPrizeInfo_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto) {
          return mergeFrom((app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto other) {
        if (other == app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto.getDefaultInstance()) return this;
        if (livenessTimeBuilder_ == null) {
          if (!other.livenessTime_.isEmpty()) {
            if (livenessTime_.isEmpty()) {
              livenessTime_ = other.livenessTime_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLivenessTimeIsMutable();
              livenessTime_.addAll(other.livenessTime_);
            }
            onChanged();
          }
        } else {
          if (!other.livenessTime_.isEmpty()) {
            if (livenessTimeBuilder_.isEmpty()) {
              livenessTimeBuilder_.dispose();
              livenessTimeBuilder_ = null;
              livenessTime_ = other.livenessTime_;
              bitField0_ = (bitField0_ & ~0x00000001);
              livenessTimeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLivenessTimeFieldBuilder() : null;
            } else {
              livenessTimeBuilder_.addAllMessages(other.livenessTime_);
            }
          }
        }
        if (other.hasDailyLiveness()) {
          setDailyLiveness(other.getDailyLiveness());
        }
        if (other.hasTotalLiveness()) {
          setTotalLiveness(other.getTotalLiveness());
        }
        if (other.hasGotPrizeInfo()) {
          setGotPrizeInfo(other.getGotPrizeInfo());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (app.protobuf.client.LivenessClientContent.LivenessModuleObjClientProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<app.protobuf.client.UtilContent.Int32PairProto> livenessTime_ =
        java.util.Collections.emptyList();
      private void ensureLivenessTimeIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          livenessTime_ = new java.util.ArrayList<app.protobuf.client.UtilContent.Int32PairProto>(livenessTime_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          app.protobuf.client.UtilContent.Int32PairProto, app.protobuf.client.UtilContent.Int32PairProto.Builder, app.protobuf.client.UtilContent.Int32PairProtoOrBuilder> livenessTimeBuilder_;

      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public java.util.List<app.protobuf.client.UtilContent.Int32PairProto> getLivenessTimeList() {
        if (livenessTimeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(livenessTime_);
        } else {
          return livenessTimeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public int getLivenessTimeCount() {
        if (livenessTimeBuilder_ == null) {
          return livenessTime_.size();
        } else {
          return livenessTimeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32PairProto getLivenessTime(int index) {
        if (livenessTimeBuilder_ == null) {
          return livenessTime_.get(index);
        } else {
          return livenessTimeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder setLivenessTime(
          int index, app.protobuf.client.UtilContent.Int32PairProto value) {
        if (livenessTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLivenessTimeIsMutable();
          livenessTime_.set(index, value);
          onChanged();
        } else {
          livenessTimeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder setLivenessTime(
          int index, app.protobuf.client.UtilContent.Int32PairProto.Builder builderForValue) {
        if (livenessTimeBuilder_ == null) {
          ensureLivenessTimeIsMutable();
          livenessTime_.set(index, builderForValue.build());
          onChanged();
        } else {
          livenessTimeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder addLivenessTime(app.protobuf.client.UtilContent.Int32PairProto value) {
        if (livenessTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLivenessTimeIsMutable();
          livenessTime_.add(value);
          onChanged();
        } else {
          livenessTimeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder addLivenessTime(
          int index, app.protobuf.client.UtilContent.Int32PairProto value) {
        if (livenessTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLivenessTimeIsMutable();
          livenessTime_.add(index, value);
          onChanged();
        } else {
          livenessTimeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder addLivenessTime(
          app.protobuf.client.UtilContent.Int32PairProto.Builder builderForValue) {
        if (livenessTimeBuilder_ == null) {
          ensureLivenessTimeIsMutable();
          livenessTime_.add(builderForValue.build());
          onChanged();
        } else {
          livenessTimeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder addLivenessTime(
          int index, app.protobuf.client.UtilContent.Int32PairProto.Builder builderForValue) {
        if (livenessTimeBuilder_ == null) {
          ensureLivenessTimeIsMutable();
          livenessTime_.add(index, builderForValue.build());
          onChanged();
        } else {
          livenessTimeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder addAllLivenessTime(
          java.lang.Iterable<? extends app.protobuf.client.UtilContent.Int32PairProto> values) {
        if (livenessTimeBuilder_ == null) {
          ensureLivenessTimeIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, livenessTime_);
          onChanged();
        } else {
          livenessTimeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder clearLivenessTime() {
        if (livenessTimeBuilder_ == null) {
          livenessTime_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          livenessTimeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder removeLivenessTime(int index) {
        if (livenessTimeBuilder_ == null) {
          ensureLivenessTimeIsMutable();
          livenessTime_.remove(index);
          onChanged();
        } else {
          livenessTimeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32PairProto.Builder getLivenessTimeBuilder(
          int index) {
        return getLivenessTimeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32PairProtoOrBuilder getLivenessTimeOrBuilder(
          int index) {
        if (livenessTimeBuilder_ == null) {
          return livenessTime_.get(index);  } else {
          return livenessTimeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public java.util.List<? extends app.protobuf.client.UtilContent.Int32PairProtoOrBuilder> 
           getLivenessTimeOrBuilderList() {
        if (livenessTimeBuilder_ != null) {
          return livenessTimeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(livenessTime_);
        }
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32PairProto.Builder addLivenessTimeBuilder() {
        return getLivenessTimeFieldBuilder().addBuilder(
            app.protobuf.client.UtilContent.Int32PairProto.getDefaultInstance());
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32PairProto.Builder addLivenessTimeBuilder(
          int index) {
        return getLivenessTimeFieldBuilder().addBuilder(
            index, app.protobuf.client.UtilContent.Int32PairProto.getDefaultInstance());
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public java.util.List<app.protobuf.client.UtilContent.Int32PairProto.Builder> 
           getLivenessTimeBuilderList() {
        return getLivenessTimeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          app.protobuf.client.UtilContent.Int32PairProto, app.protobuf.client.UtilContent.Int32PairProto.Builder, app.protobuf.client.UtilContent.Int32PairProtoOrBuilder> 
          getLivenessTimeFieldBuilder() {
        if (livenessTimeBuilder_ == null) {
          livenessTimeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              app.protobuf.client.UtilContent.Int32PairProto, app.protobuf.client.UtilContent.Int32PairProto.Builder, app.protobuf.client.UtilContent.Int32PairProtoOrBuilder>(
                  livenessTime_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          livenessTime_ = null;
        }
        return livenessTimeBuilder_;
      }

      private int dailyLiveness_ ;
      /**
       * <code>optional int32 daily_liveness = 2;</code>
       *
       * <pre>
       *当日活跃度总数
       * </pre>
       */
      public boolean hasDailyLiveness() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 daily_liveness = 2;</code>
       *
       * <pre>
       *当日活跃度总数
       * </pre>
       */
      public int getDailyLiveness() {
        return dailyLiveness_;
      }
      /**
       * <code>optional int32 daily_liveness = 2;</code>
       *
       * <pre>
       *当日活跃度总数
       * </pre>
       */
      public Builder setDailyLiveness(int value) {
        bitField0_ |= 0x00000002;
        dailyLiveness_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 daily_liveness = 2;</code>
       *
       * <pre>
       *当日活跃度总数
       * </pre>
       */
      public Builder clearDailyLiveness() {
        bitField0_ = (bitField0_ & ~0x00000002);
        dailyLiveness_ = 0;
        onChanged();
        return this;
      }

      private int totalLiveness_ ;
      /**
       * <code>optional int32 total_liveness = 3;</code>
       *
       * <pre>
       *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
       * </pre>
       */
      public boolean hasTotalLiveness() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 total_liveness = 3;</code>
       *
       * <pre>
       *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
       * </pre>
       */
      public int getTotalLiveness() {
        return totalLiveness_;
      }
      /**
       * <code>optional int32 total_liveness = 3;</code>
       *
       * <pre>
       *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
       * </pre>
       */
      public Builder setTotalLiveness(int value) {
        bitField0_ |= 0x00000004;
        totalLiveness_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 total_liveness = 3;</code>
       *
       * <pre>
       *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
       * </pre>
       */
      public Builder clearTotalLiveness() {
        bitField0_ = (bitField0_ & ~0x00000004);
        totalLiveness_ = 0;
        onChanged();
        return this;
      }

      private int gotPrizeInfo_ ;
      /**
       * <code>optional int32 got_prize_info = 4;</code>
       *
       * <pre>
       *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
       * </pre>
       */
      public boolean hasGotPrizeInfo() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 got_prize_info = 4;</code>
       *
       * <pre>
       *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
       * </pre>
       */
      public int getGotPrizeInfo() {
        return gotPrizeInfo_;
      }
      /**
       * <code>optional int32 got_prize_info = 4;</code>
       *
       * <pre>
       *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
       * </pre>
       */
      public Builder setGotPrizeInfo(int value) {
        bitField0_ |= 0x00000008;
        gotPrizeInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 got_prize_info = 4;</code>
       *
       * <pre>
       *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
       * </pre>
       */
      public Builder clearGotPrizeInfo() {
        bitField0_ = (bitField0_ & ~0x00000008);
        gotPrizeInfo_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.LivenessModuleObjClientProto)
    }

    static {
      defaultInstance = new LivenessModuleObjClientProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.LivenessModuleObjClientProto)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_LivenessModuleObjClientProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_LivenessModuleObjClientProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034client/liveness_client.proto\022\005proto\032\021c" +
      "lient/util.proto\"\223\001\n\034LivenessModuleObjCl" +
      "ientProto\022+\n\014livenessTime\030\001 \003(\0132\025.proto." +
      "Int32PairProto\022\026\n\016daily_liveness\030\002 \001(\005\022\026" +
      "\n\016total_liveness\030\003 \001(\005\022\026\n\016got_prize_info" +
      "\030\004 \001(\005*\362\006\n\014LivenessType\022\030\n\024LIVENESS_REWA" +
      "RD_TASK\020\001\022\031\n\025LIVENESS_HONOR_BATTLE\020\002\022\031\n\025" +
      "LIVENESS_MOKU_DUNGEON\020\003\022\034\n\030LIVENESS_XUEZ" +
      "HEN_DUNGEON\020\004\022\032\n\026LIVENESS_BAOKU_DUNGEON\020" +
      "\005\022\036\n\032LIVENESS_GUARD_ELF_DUNGEON\020\006\022\027\n\023LIV",
      "ENESS_WORLD_BOSS\020\007\022\026\n\022LIVENESS_SELF_BOSS" +
      "\020\010\022\030\n\024LIVENESS_ESCORT_TASK\020\t\022\032\n\026LIVENESS" +
      "_EQUIP_ENHANCE\020\n\022\027\n\023LIVENESS_GUILD_TASK\020" +
      "\013\022\027\n\023LIVENESS_AUTO_FIGHT\020\014\022\034\n\030LIVENESS_B" +
      "AI_GUI_YE_XING\020\r\022\031\n\025LIVENESS_EXAM_DUNGEO" +
      "N\020\016\022\037\n\033LIVENESS_ESCORT_DOUBLE_TASK\020\017\022\037\n\033" +
      "LIVENESS_SAN_JIE_ZHAN_CHANG\020\020\022\035\n\031LIVENES" +
      "S_QING_YUN_DUO_BAO\020\021\022\037\n\033LIVENESS_SHOU_WE" +
      "I_XIAN_MENG\020\022\022\036\n\032LIVENESS_DIAN_FENG_DUI_" +
      "JUE\020\023\022\035\n\031LIVENESS_LUE_DUO_XIAN_DAN\020\024\022\036\n\032",
      "LIVENESS_QING_YUN_ZHI_DIAN\020\025\022\036\n\032LIVENESS" +
      "_XIAN_MENG_WAN_YAN\020\026\022\036\n\032LIVENESS_DIAN_FE" +
      "NG_JING_JI\020\027\022 \n\034LIVENESS_SHEN_MO_ZHAN_CH" +
      "ANGE\020\030\022\037\n\033LIVENESS_XIAN_MENG_ZHENG_BA\020\031\022" +
      "\035\n\031LIVENESS_KUA_FU_MENG_ZHAN\020\032\022\037\n\033LIVENE" +
      "SS_SHEN_XIAN_ZHENG_BA\020\033\022\037\n\033LIVENESS_SHEN" +
      "_SHOU_SHENG_YU\020\034\022!\n\035LIVENESS_XIONG_SHOU_" +
      "JIANG_LIN\020\035B.\n\023app.protobuf.clientB\025Live" +
      "nessClientContentH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          app.protobuf.client.UtilContent.getDescriptor(),
        }, assigner);
    internal_static_proto_LivenessModuleObjClientProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_proto_LivenessModuleObjClientProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_LivenessModuleObjClientProto_descriptor,
        new java.lang.String[] { "LivenessTime", "DailyLiveness", "TotalLiveness", "GotPrizeInfo", });
    app.protobuf.client.UtilContent.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
