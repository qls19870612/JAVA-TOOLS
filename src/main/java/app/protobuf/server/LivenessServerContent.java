// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/liveness_server.proto

package app.protobuf.server;

public final class LivenessServerContent {
  private LivenessServerContent() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface LivenessModuleObjMinorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.LivenessModuleObjMinorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    java.util.List<app.protobuf.client.UtilContent.Int32PairProto> 
        getLivenessTimeList();
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    app.protobuf.client.UtilContent.Int32PairProto getLivenessTime(int index);
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    int getLivenessTimeCount();
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    java.util.List<? extends app.protobuf.client.UtilContent.Int32PairProtoOrBuilder> 
        getLivenessTimeOrBuilderList();
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    app.protobuf.client.UtilContent.Int32PairProtoOrBuilder getLivenessTimeOrBuilder(
        int index);

    /**
     * <code>optional int32 total_liveness = 2;</code>
     *
     * <pre>
     *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
     * </pre>
     */
    boolean hasTotalLiveness();
    /**
     * <code>optional int32 total_liveness = 2;</code>
     *
     * <pre>
     *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
     * </pre>
     */
    int getTotalLiveness();

    /**
     * <code>optional int32 got_prize_info = 3;</code>
     *
     * <pre>
     *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
     * </pre>
     */
    boolean hasGotPrizeInfo();
    /**
     * <code>optional int32 got_prize_info = 3;</code>
     *
     * <pre>
     *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
     * </pre>
     */
    int getGotPrizeInfo();
  }
  /**
   * Protobuf type {@code proto.LivenessModuleObjMinorProto}
   *
   * <pre>
   * </pre>
   */
  public static final class LivenessModuleObjMinorProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.LivenessModuleObjMinorProto)
      LivenessModuleObjMinorProtoOrBuilder {
    // Use LivenessModuleObjMinorProto.newBuilder() to construct.
    private LivenessModuleObjMinorProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LivenessModuleObjMinorProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LivenessModuleObjMinorProto defaultInstance;
    public static LivenessModuleObjMinorProto getDefaultInstance() {
      return defaultInstance;
    }

    public LivenessModuleObjMinorProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LivenessModuleObjMinorProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                livenessTime_ = new java.util.ArrayList<app.protobuf.client.UtilContent.Int32PairProto>();
                mutable_bitField0_ |= 0x00000001;
              }
              livenessTime_.add(input.readMessage(app.protobuf.client.UtilContent.Int32PairProto.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              totalLiveness_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              gotPrizeInfo_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          livenessTime_ = java.util.Collections.unmodifiableList(livenessTime_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return app.protobuf.server.LivenessServerContent.internal_static_proto_LivenessModuleObjMinorProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return app.protobuf.server.LivenessServerContent.internal_static_proto_LivenessModuleObjMinorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto.class, app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto.Builder.class);
    }

    public static com.google.protobuf.Parser<LivenessModuleObjMinorProto> PARSER =
        new com.google.protobuf.AbstractParser<LivenessModuleObjMinorProto>() {
      public LivenessModuleObjMinorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LivenessModuleObjMinorProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LivenessModuleObjMinorProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int LIVENESSTIME_FIELD_NUMBER = 1;
    private java.util.List<app.protobuf.client.UtilContent.Int32PairProto> livenessTime_;
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    public java.util.List<app.protobuf.client.UtilContent.Int32PairProto> getLivenessTimeList() {
      return livenessTime_;
    }
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    public java.util.List<? extends app.protobuf.client.UtilContent.Int32PairProtoOrBuilder> 
        getLivenessTimeOrBuilderList() {
      return livenessTime_;
    }
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    public int getLivenessTimeCount() {
      return livenessTime_.size();
    }
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    public app.protobuf.client.UtilContent.Int32PairProto getLivenessTime(int index) {
      return livenessTime_.get(index);
    }
    /**
     * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
     *
     * <pre>
     *各种LivenessType所完成次数
     * </pre>
     */
    public app.protobuf.client.UtilContent.Int32PairProtoOrBuilder getLivenessTimeOrBuilder(
        int index) {
      return livenessTime_.get(index);
    }

    public static final int TOTAL_LIVENESS_FIELD_NUMBER = 2;
    private int totalLiveness_;
    /**
     * <code>optional int32 total_liveness = 2;</code>
     *
     * <pre>
     *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
     * </pre>
     */
    public boolean hasTotalLiveness() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 total_liveness = 2;</code>
     *
     * <pre>
     *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
     * </pre>
     */
    public int getTotalLiveness() {
      return totalLiveness_;
    }

    public static final int GOT_PRIZE_INFO_FIELD_NUMBER = 3;
    private int gotPrizeInfo_;
    /**
     * <code>optional int32 got_prize_info = 3;</code>
     *
     * <pre>
     *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
     * </pre>
     */
    public boolean hasGotPrizeInfo() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 got_prize_info = 3;</code>
     *
     * <pre>
     *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
     * </pre>
     */
    public int getGotPrizeInfo() {
      return gotPrizeInfo_;
    }

    private void initFields() {
      livenessTime_ = java.util.Collections.emptyList();
      totalLiveness_ = 0;
      gotPrizeInfo_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < livenessTime_.size(); i++) {
        output.writeMessage(1, livenessTime_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, totalLiveness_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, gotPrizeInfo_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < livenessTime_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, livenessTime_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, totalLiveness_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gotPrizeInfo_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.LivenessModuleObjMinorProto}
     *
     * <pre>
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.LivenessModuleObjMinorProto)
        app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return app.protobuf.server.LivenessServerContent.internal_static_proto_LivenessModuleObjMinorProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return app.protobuf.server.LivenessServerContent.internal_static_proto_LivenessModuleObjMinorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto.class, app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto.Builder.class);
      }

      // Construct using app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLivenessTimeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (livenessTimeBuilder_ == null) {
          livenessTime_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          livenessTimeBuilder_.clear();
        }
        totalLiveness_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gotPrizeInfo_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return app.protobuf.server.LivenessServerContent.internal_static_proto_LivenessModuleObjMinorProto_descriptor;
      }

      public app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto getDefaultInstanceForType() {
        return app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto.getDefaultInstance();
      }

      public app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto build() {
        app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto buildPartial() {
        app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto result = new app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (livenessTimeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            livenessTime_ = java.util.Collections.unmodifiableList(livenessTime_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.livenessTime_ = livenessTime_;
        } else {
          result.livenessTime_ = livenessTimeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.totalLiveness_ = totalLiveness_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.gotPrizeInfo_ = gotPrizeInfo_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto) {
          return mergeFrom((app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto other) {
        if (other == app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto.getDefaultInstance()) return this;
        if (livenessTimeBuilder_ == null) {
          if (!other.livenessTime_.isEmpty()) {
            if (livenessTime_.isEmpty()) {
              livenessTime_ = other.livenessTime_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLivenessTimeIsMutable();
              livenessTime_.addAll(other.livenessTime_);
            }
            onChanged();
          }
        } else {
          if (!other.livenessTime_.isEmpty()) {
            if (livenessTimeBuilder_.isEmpty()) {
              livenessTimeBuilder_.dispose();
              livenessTimeBuilder_ = null;
              livenessTime_ = other.livenessTime_;
              bitField0_ = (bitField0_ & ~0x00000001);
              livenessTimeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLivenessTimeFieldBuilder() : null;
            } else {
              livenessTimeBuilder_.addAllMessages(other.livenessTime_);
            }
          }
        }
        if (other.hasTotalLiveness()) {
          setTotalLiveness(other.getTotalLiveness());
        }
        if (other.hasGotPrizeInfo()) {
          setGotPrizeInfo(other.getGotPrizeInfo());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (app.protobuf.server.LivenessServerContent.LivenessModuleObjMinorProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<app.protobuf.client.UtilContent.Int32PairProto> livenessTime_ =
        java.util.Collections.emptyList();
      private void ensureLivenessTimeIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          livenessTime_ = new java.util.ArrayList<app.protobuf.client.UtilContent.Int32PairProto>(livenessTime_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          app.protobuf.client.UtilContent.Int32PairProto, app.protobuf.client.UtilContent.Int32PairProto.Builder, app.protobuf.client.UtilContent.Int32PairProtoOrBuilder> livenessTimeBuilder_;

      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public java.util.List<app.protobuf.client.UtilContent.Int32PairProto> getLivenessTimeList() {
        if (livenessTimeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(livenessTime_);
        } else {
          return livenessTimeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public int getLivenessTimeCount() {
        if (livenessTimeBuilder_ == null) {
          return livenessTime_.size();
        } else {
          return livenessTimeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32PairProto getLivenessTime(int index) {
        if (livenessTimeBuilder_ == null) {
          return livenessTime_.get(index);
        } else {
          return livenessTimeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder setLivenessTime(
          int index, app.protobuf.client.UtilContent.Int32PairProto value) {
        if (livenessTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLivenessTimeIsMutable();
          livenessTime_.set(index, value);
          onChanged();
        } else {
          livenessTimeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder setLivenessTime(
          int index, app.protobuf.client.UtilContent.Int32PairProto.Builder builderForValue) {
        if (livenessTimeBuilder_ == null) {
          ensureLivenessTimeIsMutable();
          livenessTime_.set(index, builderForValue.build());
          onChanged();
        } else {
          livenessTimeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder addLivenessTime(app.protobuf.client.UtilContent.Int32PairProto value) {
        if (livenessTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLivenessTimeIsMutable();
          livenessTime_.add(value);
          onChanged();
        } else {
          livenessTimeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder addLivenessTime(
          int index, app.protobuf.client.UtilContent.Int32PairProto value) {
        if (livenessTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLivenessTimeIsMutable();
          livenessTime_.add(index, value);
          onChanged();
        } else {
          livenessTimeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder addLivenessTime(
          app.protobuf.client.UtilContent.Int32PairProto.Builder builderForValue) {
        if (livenessTimeBuilder_ == null) {
          ensureLivenessTimeIsMutable();
          livenessTime_.add(builderForValue.build());
          onChanged();
        } else {
          livenessTimeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder addLivenessTime(
          int index, app.protobuf.client.UtilContent.Int32PairProto.Builder builderForValue) {
        if (livenessTimeBuilder_ == null) {
          ensureLivenessTimeIsMutable();
          livenessTime_.add(index, builderForValue.build());
          onChanged();
        } else {
          livenessTimeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder addAllLivenessTime(
          java.lang.Iterable<? extends app.protobuf.client.UtilContent.Int32PairProto> values) {
        if (livenessTimeBuilder_ == null) {
          ensureLivenessTimeIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, livenessTime_);
          onChanged();
        } else {
          livenessTimeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder clearLivenessTime() {
        if (livenessTimeBuilder_ == null) {
          livenessTime_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          livenessTimeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public Builder removeLivenessTime(int index) {
        if (livenessTimeBuilder_ == null) {
          ensureLivenessTimeIsMutable();
          livenessTime_.remove(index);
          onChanged();
        } else {
          livenessTimeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32PairProto.Builder getLivenessTimeBuilder(
          int index) {
        return getLivenessTimeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32PairProtoOrBuilder getLivenessTimeOrBuilder(
          int index) {
        if (livenessTimeBuilder_ == null) {
          return livenessTime_.get(index);  } else {
          return livenessTimeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public java.util.List<? extends app.protobuf.client.UtilContent.Int32PairProtoOrBuilder> 
           getLivenessTimeOrBuilderList() {
        if (livenessTimeBuilder_ != null) {
          return livenessTimeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(livenessTime_);
        }
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32PairProto.Builder addLivenessTimeBuilder() {
        return getLivenessTimeFieldBuilder().addBuilder(
            app.protobuf.client.UtilContent.Int32PairProto.getDefaultInstance());
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32PairProto.Builder addLivenessTimeBuilder(
          int index) {
        return getLivenessTimeFieldBuilder().addBuilder(
            index, app.protobuf.client.UtilContent.Int32PairProto.getDefaultInstance());
      }
      /**
       * <code>repeated .proto.Int32PairProto livenessTime = 1;</code>
       *
       * <pre>
       *各种LivenessType所完成次数
       * </pre>
       */
      public java.util.List<app.protobuf.client.UtilContent.Int32PairProto.Builder> 
           getLivenessTimeBuilderList() {
        return getLivenessTimeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          app.protobuf.client.UtilContent.Int32PairProto, app.protobuf.client.UtilContent.Int32PairProto.Builder, app.protobuf.client.UtilContent.Int32PairProtoOrBuilder> 
          getLivenessTimeFieldBuilder() {
        if (livenessTimeBuilder_ == null) {
          livenessTimeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              app.protobuf.client.UtilContent.Int32PairProto, app.protobuf.client.UtilContent.Int32PairProto.Builder, app.protobuf.client.UtilContent.Int32PairProtoOrBuilder>(
                  livenessTime_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          livenessTime_ = null;
        }
        return livenessTimeBuilder_;
      }

      private int totalLiveness_ ;
      /**
       * <code>optional int32 total_liveness = 2;</code>
       *
       * <pre>
       *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
       * </pre>
       */
      public boolean hasTotalLiveness() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 total_liveness = 2;</code>
       *
       * <pre>
       *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
       * </pre>
       */
      public int getTotalLiveness() {
        return totalLiveness_;
      }
      /**
       * <code>optional int32 total_liveness = 2;</code>
       *
       * <pre>
       *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
       * </pre>
       */
      public Builder setTotalLiveness(int value) {
        bitField0_ |= 0x00000002;
        totalLiveness_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 total_liveness = 2;</code>
       *
       * <pre>
       *所有活跃度总数（从活跃度功能开启算，不包含已经用于外形升级的活跃度) 又名：日常经验
       * </pre>
       */
      public Builder clearTotalLiveness() {
        bitField0_ = (bitField0_ & ~0x00000002);
        totalLiveness_ = 0;
        onChanged();
        return this;
      }

      private int gotPrizeInfo_ ;
      /**
       * <code>optional int32 got_prize_info = 3;</code>
       *
       * <pre>
       *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
       * </pre>
       */
      public boolean hasGotPrizeInfo() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 got_prize_info = 3;</code>
       *
       * <pre>
       *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
       * </pre>
       */
      public int getGotPrizeInfo() {
        return gotPrizeInfo_;
      }
      /**
       * <code>optional int32 got_prize_info = 3;</code>
       *
       * <pre>
       *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
       * </pre>
       */
      public Builder setGotPrizeInfo(int value) {
        bitField0_ |= 0x00000004;
        gotPrizeInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 got_prize_info = 3;</code>
       *
       * <pre>
       *已经领取奖励的ID(按位算，第n个奖励是 (got_prize_info &gt;&gt; n) &amp; 1
       * </pre>
       */
      public Builder clearGotPrizeInfo() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gotPrizeInfo_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.LivenessModuleObjMinorProto)
    }

    static {
      defaultInstance = new LivenessModuleObjMinorProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.LivenessModuleObjMinorProto)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_LivenessModuleObjMinorProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_LivenessModuleObjMinorProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034server/liveness_server.proto\022\005proto\032\021c" +
      "lient/util.proto\"z\n\033LivenessModuleObjMin" +
      "orProto\022+\n\014livenessTime\030\001 \003(\0132\025.proto.In" +
      "t32PairProto\022\026\n\016total_liveness\030\002 \001(\005\022\026\n\016" +
      "got_prize_info\030\003 \001(\005B.\n\023app.protobuf.ser" +
      "verB\025LivenessServerContentH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          app.protobuf.client.UtilContent.getDescriptor(),
        }, assigner);
    internal_static_proto_LivenessModuleObjMinorProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_proto_LivenessModuleObjMinorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_LivenessModuleObjMinorProto_descriptor,
        new java.lang.String[] { "LivenessTime", "TotalLiveness", "GotPrizeInfo", });
    app.protobuf.client.UtilContent.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
