// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/function_open_client.proto

package app.protobuf.client;

public final class FunctionClientContent {
  private FunctionClientContent() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code proto.FunctionType}
   *
   * <pre>
   * 相关的功能开启
   * </pre>
   */
  public enum FunctionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>FUNC_SPELL = 1;</code>
     *
     * <pre>
     * 这里功能开启类型
     * 不可以修改
     * </pre>
     */
    FUNC_SPELL(0, 1),
    /**
     * <code>FUNC_PET = 2;</code>
     *
     * <pre>
     * 宠物
     * </pre>
     */
    FUNC_PET(1, 2),
    /**
     * <code>FUNC_MAGIC = 3;</code>
     *
     * <pre>
     * 法宝
     * </pre>
     */
    FUNC_MAGIC(2, 3),
    /**
     * <code>FUNC_GOD = 4;</code>
     *
     * <pre>
     * 神兵
     * </pre>
     */
    FUNC_GOD(3, 4),
    /**
     * <code>FUNC_FEATHER = 5;</code>
     *
     * <pre>
     * 翅膀
     * </pre>
     */
    FUNC_FEATHER(4, 5),
    /**
     * <code>FUNC_BAO_KU = 6;</code>
     *
     * <pre>
     *宝库副本
     * </pre>
     */
    FUNC_BAO_KU(5, 6),
    /**
     * <code>FUNC_GUARD_ELF = 7;</code>
     *
     * <pre>
     *守护精灵副本
     * </pre>
     */
    FUNC_GUARD_ELF(6, 7),
    /**
     * <code>FUNC_MOKU = 8;</code>
     *
     * <pre>
     *魔窟副本
     * </pre>
     */
    FUNC_MOKU(7, 8),
    /**
     * <code>FUNC_REIN = 9;</code>
     *
     * <pre>
     *转职
     * </pre>
     */
    FUNC_REIN(8, 9),
    /**
     * <code>FUNC_TOWER = 10;</code>
     *
     * <pre>
     *爬塔副本
     * </pre>
     */
    FUNC_TOWER(9, 10),
    /**
     * <code>FUNC_XUE_ZHEN = 11;</code>
     *
     * <pre>
     *血阵副本
     * </pre>
     */
    FUNC_XUE_ZHEN(10, 11),
    /**
     * <code>FUNC_RUNE = 12;</code>
     *
     * <pre>
     *符文系统
     * </pre>
     */
    FUNC_RUNE(11, 12),
    /**
     * <code>FUNC_COMPOUND = 13;</code>
     *
     * <pre>
     *合成系统
     * </pre>
     */
    FUNC_COMPOUND(12, 13),
    /**
     * <code>FUNC_TEAM = 14;</code>
     *
     * <pre>
     *组队系统
     * </pre>
     */
    FUNC_TEAM(13, 14),
    /**
     * <code>FUNC_BOSS = 15;</code>
     *
     * <pre>
     *boss系统
     * </pre>
     */
    FUNC_BOSS(14, 15),
    /**
     * <code>FUNC_EQUIP = 16;</code>
     *
     * <pre>
     *装备
     * </pre>
     */
    FUNC_EQUIP(15, 16),
    /**
     * <code>FUNC_GUILD = 17;</code>
     *
     * <pre>
     *仙盟
     * </pre>
     */
    FUNC_GUILD(16, 17),
    /**
     * <code>FUNC_MOUNT = 18;</code>
     *
     * <pre>
     *坐骑
     * </pre>
     */
    FUNC_MOUNT(17, 18),
    /**
     * <code>FUNC_EXAM = 19;</code>
     *
     * <pre>
     * 答题
     * </pre>
     */
    FUNC_EXAM(18, 19),
    /**
     * <code>FUNC_MARRIAGE = 20;</code>
     *
     * <pre>
     * 结婚
     * </pre>
     */
    FUNC_MARRIAGE(19, 20),
    /**
     * <code>FUNC_RELATION = 21;</code>
     *
     * <pre>
     * 好友
     * </pre>
     */
    FUNC_RELATION(20, 21),
    /**
     * <code>FUNC_SHOP = 22;</code>
     *
     * <pre>
     * 商城
     * </pre>
     */
    FUNC_SHOP(21, 22),
    /**
     * <code>FUNC_REALM = 23;</code>
     *
     * <pre>
     * 境界
     * </pre>
     */
    FUNC_REALM(22, 23),
    /**
     * <code>FUNC_ACHIEVEMENT = 24;</code>
     *
     * <pre>
     * 成就
     * </pre>
     */
    FUNC_ACHIEVEMENT(23, 24),
    /**
     * <code>FUNC_HONOR_BATTLE = 25;</code>
     *
     * <pre>
     * 荣誉挑战
     * </pre>
     */
    FUNC_HONOR_BATTLE(24, 25),
    /**
     * <code>FUNC_RESOUCE_BACK = 26;</code>
     *
     * <pre>
     * 资源找回
     * </pre>
     */
    FUNC_RESOUCE_BACK(25, 26),
    /**
     * <code>FUNC_PEAK_COMBAT = 27;</code>
     *
     * <pre>
     * 巅峰竞技
     * </pre>
     */
    FUNC_PEAK_COMBAT(26, 27),
    /**
     * <code>FUNC_RANK = 28;</code>
     *
     * <pre>
     * 排行榜
     * </pre>
     */
    FUNC_RANK(27, 28),
    /**
     * <code>FUNC_CLOAK = 29;</code>
     *
     * <pre>
     * 披风
     * </pre>
     */
    FUNC_CLOAK(28, 29),
    /**
     * <code>FUNC_BRAVE_PEAK = 30;</code>
     *
     * <pre>
     * 勇者之巅
     * </pre>
     */
    FUNC_BRAVE_PEAK(29, 30),
    /**
     * <code>FUNC_LIVENESS = 31;</code>
     *
     * <pre>
     * 活跃度&amp;外形（这两个功能是同时开放的)
     * </pre>
     */
    FUNC_LIVENESS(30, 31),
    /**
     * <code>FUNC_THREE_BATTLE = 32;</code>
     *
     * <pre>
     * 三界战场
     * </pre>
     */
    FUNC_THREE_BATTLE(31, 32),
    /**
     * <code>FUNC_TRANSFORM_MAGIC = 33;</code>
     *
     * <pre>
     *化形法宝
     * </pre>
     */
    FUNC_TRANSFORM_MAGIC(32, 33),
    /**
     * <code>FUNC_TRANSFORM_GOD = 34;</code>
     *
     * <pre>
     *化形神兵
     * </pre>
     */
    FUNC_TRANSFORM_GOD(33, 34),
    /**
     * <code>FUNC_TRANSFORM_CLOAK = 35;</code>
     *
     * <pre>
     *化形披风
     * </pre>
     */
    FUNC_TRANSFORM_CLOAK(34, 35),
    /**
     * <code>FUNC_TRANSFORM_MOUNT = 36;</code>
     *
     * <pre>
     *化形坐骑
     * </pre>
     */
    FUNC_TRANSFORM_MOUNT(35, 36),
    /**
     * <code>FUNC_TRANSFORM_PET = 37;</code>
     *
     * <pre>
     *化形宠物
     * </pre>
     */
    FUNC_TRANSFORM_PET(36, 37),
    /**
     * <code>FUNC_TRANSFORM_FEATHER = 38;</code>
     *
     * <pre>
     *化形翅膀
     * </pre>
     */
    FUNC_TRANSFORM_FEATHER(37, 38),
    /**
     * <code>FUNC_SKIN = 39;</code>
     *
     * <pre>
     *装扮系统
     * </pre>
     */
    FUNC_SKIN(38, 39),
    /**
     * <code>FUNC_REWARD_TASK = 40;</code>
     *
     * <pre>
     *赏金任务
     * </pre>
     */
    FUNC_REWARD_TASK(39, 40),
    /**
     * <code>FUNC_GUILD_FIRE = 41;</code>
     *
     * <pre>
     *仙盟烤火（仙盟晚宴,帮会答题)
     * </pre>
     */
    FUNC_GUILD_FIRE(40, 41),
    /**
     * <code>FUNC_ESCORT_TASK = 42;</code>
     *
     * <pre>
     *护送任务
     * </pre>
     */
    FUNC_ESCORT_TASK(41, 42),
    /**
     * <code>FUNC_TOU_ZI_JI_HUA = 43;</code>
     *
     * <pre>
     * 投资计划
     * </pre>
     */
    FUNC_TOU_ZI_JI_HUA(42, 43),
    /**
     * <code>FUNC_YUE_KA_TOU_ZI = 44;</code>
     *
     * <pre>
     * 月卡投资
     * </pre>
     */
    FUNC_YUE_KA_TOU_ZI(43, 44),
    /**
     * <code>FUNC_FU_LI = 45;</code>
     *
     * <pre>
     * 福利大厅
     * </pre>
     */
    FUNC_FU_LI(44, 45),
    /**
     * <code>FUNC_DENG_JI_XIAN_GOU = 46;</code>
     *
     * <pre>
     * 等级限购
     * </pre>
     */
    FUNC_DENG_JI_XIAN_GOU(45, 46),
    /**
     * <code>FUNC_TIAN_SHU_XUN_ZHU = 47;</code>
     *
     * <pre>
     * 天书寻主
     * </pre>
     */
    FUNC_TIAN_SHU_XUN_ZHU(46, 47),
    /**
     * <code>FUNC_MEI_RI_LEI_CHONG = 48;</code>
     *
     * <pre>
     * 每日累充
     * </pre>
     */
    FUNC_MEI_RI_LEI_CHONG(47, 48),
    /**
     * <code>FUNC_MEI_ZHOU_LEI_CHONG = 49;</code>
     *
     * <pre>
     * 每周累充
     * </pre>
     */
    FUNC_MEI_ZHOU_LEI_CHONG(48, 49),
    /**
     * <code>FUNC_LIAN_CHONG = 50;</code>
     *
     * <pre>
     * 连充
     * </pre>
     */
    FUNC_LIAN_CHONG(49, 50),
    /**
     * <code>FUNC_QI_RI_DENG_LU = 51;</code>
     *
     * <pre>
     * 七日登陆
     * </pre>
     */
    FUNC_QI_RI_DENG_LU(50, 51),
    /**
     * <code>FUNC_RED_EQUIP_COMPOUND = 52;</code>
     *
     * <pre>
     * 红装合成
     * </pre>
     */
    FUNC_RED_EQUIP_COMPOUND(51, 52),
    /**
     * <code>FUNC_TRANSFORM = 53;</code>
     *
     * <pre>
     * 化形
     * </pre>
     */
    FUNC_TRANSFORM(52, 53),
    /**
     * <code>FUNC_SUIT_FORGE = 54;</code>
     *
     * <pre>
     * 套装锻造
     * </pre>
     */
    FUNC_SUIT_FORGE(53, 54),
    /**
     * <code>FUNC_DEMON_BOSS = 55;</code>
     *
     * <pre>
     * 魔界boss
     * </pre>
     */
    FUNC_DEMON_BOSS(54, 55),
    /**
     * <code>FUNC_WORLD_BOSS = 56;</code>
     *
     * <pre>
     * 世界boss
     * </pre>
     */
    FUNC_WORLD_BOSS(55, 56),
    /**
     * <code>FUNC_MATE = 57;</code>
     *
     * <pre>
     * 伴侣
     * </pre>
     */
    FUNC_MATE(56, 57),
    /**
     * <code>FUNC_GEM = 58;</code>
     *
     * <pre>
     * 宝石镶嵌
     * </pre>
     */
    FUNC_GEM(57, 58),
    /**
     * <code>FUNC_CHONG_BANG = 59;</code>
     *
     * <pre>
     * 冲榜
     * </pre>
     */
    FUNC_CHONG_BANG(58, 59),
    /**
     * <code>FUNC_OFFLINE_HUNG = 60;</code>
     *
     * <pre>
     * 离线挂机
     * </pre>
     */
    FUNC_OFFLINE_HUNG(59, 60),
    /**
     * <code>FUNC_JING_JI = 61;</code>
     *
     * <pre>
     * 竞技
     * </pre>
     */
    FUNC_JING_JI(60, 61),
    /**
     * <code>FUNC_PRAY = 62;</code>
     *
     * <pre>
     * 祈福
     * </pre>
     */
    FUNC_PRAY(61, 62),
    /**
     * <code>FUNC_PERSONAL_BOSS = 63;</code>
     *
     * <pre>
     * 个人boss
     * </pre>
     */
    FUNC_PERSONAL_BOSS(62, 63),
    /**
     * <code>FUNC_HOME_BOSS = 64;</code>
     *
     * <pre>
     * boss之家
     * </pre>
     */
    FUNC_HOME_BOSS(63, 64),
    /**
     * <code>FUNC_AUCTION = 65;</code>
     *
     * <pre>
     * 市场
     * </pre>
     */
    FUNC_AUCTION(64, 65),
    /**
     * <code>FUNC_RUNE_LOTTERY = 66;</code>
     *
     * <pre>
     * 符文寻宝
     * </pre>
     */
    FUNC_RUNE_LOTTERY(65, 66),
    /**
     * <code>FUNC_EQUIP_LOTTERY = 67;</code>
     *
     * <pre>
     * 装备寻宝
     * </pre>
     */
    FUNC_EQUIP_LOTTERY(66, 67),
    /**
     * <code>FUNC_LING_YUAN_GOU = 68;</code>
     *
     * <pre>
     * 零元购
     * </pre>
     */
    FUNC_LING_YUAN_GOU(67, 68),
    /**
     * <code>FUNC_FORGE = 69;</code>
     *
     * <pre>
     * 打造
     * </pre>
     */
    FUNC_FORGE(68, 69),
    /**
     * <code>FUNC_KUANG_HUAN = 70;</code>
     *
     * <pre>
     * 开服狂欢
     * </pre>
     */
    FUNC_KUANG_HUAN(69, 70),
    /**
     * <code>FUNC_BE_STRONG = 71;</code>
     *
     * <pre>
     * 变强
     * </pre>
     */
    FUNC_BE_STRONG(70, 71),
    /**
     * <code>FUNC_CLIENT_DOWNLOAD = 72;</code>
     *
     * <pre>
     * 下载
     * </pre>
     */
    FUNC_CLIENT_DOWNLOAD(71, 72),
    /**
     * <code>FUNC_TREASURE = 73;</code>
     *
     * <pre>
     * 天使秘宝
     * </pre>
     */
    FUNC_TREASURE(72, 73),
    /**
     * <code>FUNC_HANDBOOK = 74;</code>
     *
     * <pre>
     * 图鉴
     * </pre>
     */
    FUNC_HANDBOOK(73, 74),
    /**
     * <code>FUNC_CLOUD_BUY = 75;</code>
     *
     * <pre>
     * 限时云购
     * </pre>
     */
    FUNC_CLOUD_BUY(74, 75),
    /**
     * <code>FUNC_LUCK_SHOP = 76;</code>
     *
     * <pre>
     * 幸运商店
     * </pre>
     */
    FUNC_LUCK_SHOP(75, 76),
    /**
     * <code>FUNC_HERALDRY = 77;</code>
     *
     * <pre>
     * 纹章
     * </pre>
     */
    FUNC_HERALDRY(76, 77),
    /**
     * <code>FUNC_GUARD_GUILD = 78;</code>
     *
     * <pre>
     * 守卫公会
     * </pre>
     */
    FUNC_GUARD_GUILD(77, 78),
    /**
     * <code>FUNC_PET_PLUGIN = 79;</code>
     *
     * <pre>
     * 宠物插件
     * </pre>
     */
    FUNC_PET_PLUGIN(78, 79),
    /**
     * <code>FUNC_HERALDRY_MYSTERY = 80;</code>
     *
     * <pre>
     * 纹章秘境
     * </pre>
     */
    FUNC_HERALDRY_MYSTERY(79, 80),
    /**
     * <code>FUNC_BOSS_TOU_ZI = 81;</code>
     *
     * <pre>
     * boss投资
     * </pre>
     */
    FUNC_BOSS_TOU_ZI(80, 81),
    /**
     * <code>FUNC_TIAN_TIAN_FAN_LI = 82;</code>
     *
     * <pre>
     *天天返利
     * </pre>
     */
    FUNC_TIAN_TIAN_FAN_LI(81, 82),
    /**
     * <code>FUNC_BOSS_XUAN_SHANG = 83;</code>
     *
     * <pre>
     *boss悬赏
     * </pre>
     */
    FUNC_BOSS_XUAN_SHANG(82, 83),
    /**
     * <code>FUNC_ZHUANG_BEI_XUAN_SHANG = 84;</code>
     *
     * <pre>
     *装备悬赏
     * </pre>
     */
    FUNC_ZHUANG_BEI_XUAN_SHANG(83, 84),
    /**
     * <code>FUNC_SOUL_BEAST = 85;</code>
     *
     * <pre>
     *魂兽
     * </pre>
     */
    FUNC_SOUL_BEAST(84, 85),
    /**
     * <code>FUNC_JI_FEN_CHONG_BANG = 86;</code>
     *
     * <pre>
     * 积分冲榜
     * </pre>
     */
    FUNC_JI_FEN_CHONG_BANG(85, 86),
    /**
     * <code>FUNC_XIAN_GOU_DA_LI_BAO = 87;</code>
     *
     * <pre>
     * 限购大礼包
     * </pre>
     */
    FUNC_XIAN_GOU_DA_LI_BAO(86, 87),
    /**
     * <code>FUNC_LIFE_GRID = 88;</code>
     *
     * <pre>
     *命格
     * </pre>
     */
    FUNC_LIFE_GRID(87, 88),
    /**
     * <code>FUNC_BROTHERS = 89;</code>
     *
     * <pre>
     *血盟
     * </pre>
     */
    FUNC_BROTHERS(88, 89),
    /**
     * <code>FUNC_BROTHERS_BANQUET = 90;</code>
     *
     * <pre>
     *血盟宴席
     * </pre>
     */
    FUNC_BROTHERS_BANQUET(89, 90),
    /**
     * <code>FUNC_ARTIFACT = 91;</code>
     *
     * <pre>
     *神器
     * </pre>
     */
    FUNC_ARTIFACT(90, 91),
    /**
     * <code>FUNC_XING_YUN_LUN_PAN = 92;</code>
     *
     * <pre>
     * 幸运轮盘
     * </pre>
     */
    FUNC_XING_YUN_LUN_PAN(91, 92),
    /**
     * <code>FUNC_PLAYER_STRATEGY = 93;</code>
     *
     * <pre>
     * 玩家攻略
     * </pre>
     */
    FUNC_PLAYER_STRATEGY(92, 93),
    /**
     * <code>FUNC_ASCEND_PRODUCT = 94;</code>
     *
     * <pre>
     * 升品
     * </pre>
     */
    FUNC_ASCEND_PRODUCT(93, 94),
    /**
     * <code>FUNC_UP_QUALITY_DUNGEON = 95;</code>
     *
     * <pre>
     * 升品副本
     * </pre>
     */
    FUNC_UP_QUALITY_DUNGEON(94, 95),
    /**
     * <code>FUNC_XING_ZHEN = 96;</code>
     *
     * <pre>
     * 星阵
     * </pre>
     */
    FUNC_XING_ZHEN(95, 96),
    /**
     * <code>FUNC_AMULET = 97;</code>
     *
     * <pre>
     * 刻印
     * </pre>
     */
    FUNC_AMULET(96, 97),
    /**
     * <code>FUNC_MIRAGE = 98;</code>
     *
     * <pre>
     * 幻影
     * </pre>
     */
    FUNC_MIRAGE(97, 98),
    /**
     * <code>FUNC_TRANSFORM_MIRAGE = 99;</code>
     *
     * <pre>
     * 化形幻影
     * </pre>
     */
    FUNC_TRANSFORM_MIRAGE(98, 99),
    /**
     * <code>FUNC_TALENT = 100;</code>
     *
     * <pre>
     *天赋
     * </pre>
     */
    FUNC_TALENT(99, 100),
    /**
     * <code>FUNC_EVIL_TREASURY = 101;</code>
     *
     * <pre>
     * 恶魔宝库
     * </pre>
     */
    FUNC_EVIL_TREASURY(100, 101),
    /**
     * <code>FUNC_EQUIP_ADVANCE = 102;</code>
     *
     * <pre>
     * 装备进阶
     * </pre>
     */
    FUNC_EQUIP_ADVANCE(101, 102),
    /**
     * <code>FUNC_GUILD_WAR = 103;</code>
     *
     * <pre>
     * 跨服公会战
     * </pre>
     */
    FUNC_GUILD_WAR(102, 103),
    /**
     * <code>FUNC_ACTIVE_TURNTABLE = 104;</code>
     *
     * <pre>
     * 活跃转盘
     * </pre>
     */
    FUNC_ACTIVE_TURNTABLE(103, 104),
    /**
     * <code>FUNC_BROTHER_BATTLE = 105;</code>
     *
     * <pre>
     * 血盟竞技
     * </pre>
     */
    FUNC_BROTHER_BATTLE(104, 105),
    /**
     * <code>FUNC_BOSS_MELEE = 106;</code>
     *
     * <pre>
     * BOSS乱斗
     * </pre>
     */
    FUNC_BOSS_MELEE(105, 106),
    ;

    /**
     * <code>FUNC_SPELL = 1;</code>
     *
     * <pre>
     * 这里功能开启类型
     * 不可以修改
     * </pre>
     */
    public static final int FUNC_SPELL_VALUE = 1;
    /**
     * <code>FUNC_PET = 2;</code>
     *
     * <pre>
     * 宠物
     * </pre>
     */
    public static final int FUNC_PET_VALUE = 2;
    /**
     * <code>FUNC_MAGIC = 3;</code>
     *
     * <pre>
     * 法宝
     * </pre>
     */
    public static final int FUNC_MAGIC_VALUE = 3;
    /**
     * <code>FUNC_GOD = 4;</code>
     *
     * <pre>
     * 神兵
     * </pre>
     */
    public static final int FUNC_GOD_VALUE = 4;
    /**
     * <code>FUNC_FEATHER = 5;</code>
     *
     * <pre>
     * 翅膀
     * </pre>
     */
    public static final int FUNC_FEATHER_VALUE = 5;
    /**
     * <code>FUNC_BAO_KU = 6;</code>
     *
     * <pre>
     *宝库副本
     * </pre>
     */
    public static final int FUNC_BAO_KU_VALUE = 6;
    /**
     * <code>FUNC_GUARD_ELF = 7;</code>
     *
     * <pre>
     *守护精灵副本
     * </pre>
     */
    public static final int FUNC_GUARD_ELF_VALUE = 7;
    /**
     * <code>FUNC_MOKU = 8;</code>
     *
     * <pre>
     *魔窟副本
     * </pre>
     */
    public static final int FUNC_MOKU_VALUE = 8;
    /**
     * <code>FUNC_REIN = 9;</code>
     *
     * <pre>
     *转职
     * </pre>
     */
    public static final int FUNC_REIN_VALUE = 9;
    /**
     * <code>FUNC_TOWER = 10;</code>
     *
     * <pre>
     *爬塔副本
     * </pre>
     */
    public static final int FUNC_TOWER_VALUE = 10;
    /**
     * <code>FUNC_XUE_ZHEN = 11;</code>
     *
     * <pre>
     *血阵副本
     * </pre>
     */
    public static final int FUNC_XUE_ZHEN_VALUE = 11;
    /**
     * <code>FUNC_RUNE = 12;</code>
     *
     * <pre>
     *符文系统
     * </pre>
     */
    public static final int FUNC_RUNE_VALUE = 12;
    /**
     * <code>FUNC_COMPOUND = 13;</code>
     *
     * <pre>
     *合成系统
     * </pre>
     */
    public static final int FUNC_COMPOUND_VALUE = 13;
    /**
     * <code>FUNC_TEAM = 14;</code>
     *
     * <pre>
     *组队系统
     * </pre>
     */
    public static final int FUNC_TEAM_VALUE = 14;
    /**
     * <code>FUNC_BOSS = 15;</code>
     *
     * <pre>
     *boss系统
     * </pre>
     */
    public static final int FUNC_BOSS_VALUE = 15;
    /**
     * <code>FUNC_EQUIP = 16;</code>
     *
     * <pre>
     *装备
     * </pre>
     */
    public static final int FUNC_EQUIP_VALUE = 16;
    /**
     * <code>FUNC_GUILD = 17;</code>
     *
     * <pre>
     *仙盟
     * </pre>
     */
    public static final int FUNC_GUILD_VALUE = 17;
    /**
     * <code>FUNC_MOUNT = 18;</code>
     *
     * <pre>
     *坐骑
     * </pre>
     */
    public static final int FUNC_MOUNT_VALUE = 18;
    /**
     * <code>FUNC_EXAM = 19;</code>
     *
     * <pre>
     * 答题
     * </pre>
     */
    public static final int FUNC_EXAM_VALUE = 19;
    /**
     * <code>FUNC_MARRIAGE = 20;</code>
     *
     * <pre>
     * 结婚
     * </pre>
     */
    public static final int FUNC_MARRIAGE_VALUE = 20;
    /**
     * <code>FUNC_RELATION = 21;</code>
     *
     * <pre>
     * 好友
     * </pre>
     */
    public static final int FUNC_RELATION_VALUE = 21;
    /**
     * <code>FUNC_SHOP = 22;</code>
     *
     * <pre>
     * 商城
     * </pre>
     */
    public static final int FUNC_SHOP_VALUE = 22;
    /**
     * <code>FUNC_REALM = 23;</code>
     *
     * <pre>
     * 境界
     * </pre>
     */
    public static final int FUNC_REALM_VALUE = 23;
    /**
     * <code>FUNC_ACHIEVEMENT = 24;</code>
     *
     * <pre>
     * 成就
     * </pre>
     */
    public static final int FUNC_ACHIEVEMENT_VALUE = 24;
    /**
     * <code>FUNC_HONOR_BATTLE = 25;</code>
     *
     * <pre>
     * 荣誉挑战
     * </pre>
     */
    public static final int FUNC_HONOR_BATTLE_VALUE = 25;
    /**
     * <code>FUNC_RESOUCE_BACK = 26;</code>
     *
     * <pre>
     * 资源找回
     * </pre>
     */
    public static final int FUNC_RESOUCE_BACK_VALUE = 26;
    /**
     * <code>FUNC_PEAK_COMBAT = 27;</code>
     *
     * <pre>
     * 巅峰竞技
     * </pre>
     */
    public static final int FUNC_PEAK_COMBAT_VALUE = 27;
    /**
     * <code>FUNC_RANK = 28;</code>
     *
     * <pre>
     * 排行榜
     * </pre>
     */
    public static final int FUNC_RANK_VALUE = 28;
    /**
     * <code>FUNC_CLOAK = 29;</code>
     *
     * <pre>
     * 披风
     * </pre>
     */
    public static final int FUNC_CLOAK_VALUE = 29;
    /**
     * <code>FUNC_BRAVE_PEAK = 30;</code>
     *
     * <pre>
     * 勇者之巅
     * </pre>
     */
    public static final int FUNC_BRAVE_PEAK_VALUE = 30;
    /**
     * <code>FUNC_LIVENESS = 31;</code>
     *
     * <pre>
     * 活跃度&amp;外形（这两个功能是同时开放的)
     * </pre>
     */
    public static final int FUNC_LIVENESS_VALUE = 31;
    /**
     * <code>FUNC_THREE_BATTLE = 32;</code>
     *
     * <pre>
     * 三界战场
     * </pre>
     */
    public static final int FUNC_THREE_BATTLE_VALUE = 32;
    /**
     * <code>FUNC_TRANSFORM_MAGIC = 33;</code>
     *
     * <pre>
     *化形法宝
     * </pre>
     */
    public static final int FUNC_TRANSFORM_MAGIC_VALUE = 33;
    /**
     * <code>FUNC_TRANSFORM_GOD = 34;</code>
     *
     * <pre>
     *化形神兵
     * </pre>
     */
    public static final int FUNC_TRANSFORM_GOD_VALUE = 34;
    /**
     * <code>FUNC_TRANSFORM_CLOAK = 35;</code>
     *
     * <pre>
     *化形披风
     * </pre>
     */
    public static final int FUNC_TRANSFORM_CLOAK_VALUE = 35;
    /**
     * <code>FUNC_TRANSFORM_MOUNT = 36;</code>
     *
     * <pre>
     *化形坐骑
     * </pre>
     */
    public static final int FUNC_TRANSFORM_MOUNT_VALUE = 36;
    /**
     * <code>FUNC_TRANSFORM_PET = 37;</code>
     *
     * <pre>
     *化形宠物
     * </pre>
     */
    public static final int FUNC_TRANSFORM_PET_VALUE = 37;
    /**
     * <code>FUNC_TRANSFORM_FEATHER = 38;</code>
     *
     * <pre>
     *化形翅膀
     * </pre>
     */
    public static final int FUNC_TRANSFORM_FEATHER_VALUE = 38;
    /**
     * <code>FUNC_SKIN = 39;</code>
     *
     * <pre>
     *装扮系统
     * </pre>
     */
    public static final int FUNC_SKIN_VALUE = 39;
    /**
     * <code>FUNC_REWARD_TASK = 40;</code>
     *
     * <pre>
     *赏金任务
     * </pre>
     */
    public static final int FUNC_REWARD_TASK_VALUE = 40;
    /**
     * <code>FUNC_GUILD_FIRE = 41;</code>
     *
     * <pre>
     *仙盟烤火（仙盟晚宴,帮会答题)
     * </pre>
     */
    public static final int FUNC_GUILD_FIRE_VALUE = 41;
    /**
     * <code>FUNC_ESCORT_TASK = 42;</code>
     *
     * <pre>
     *护送任务
     * </pre>
     */
    public static final int FUNC_ESCORT_TASK_VALUE = 42;
    /**
     * <code>FUNC_TOU_ZI_JI_HUA = 43;</code>
     *
     * <pre>
     * 投资计划
     * </pre>
     */
    public static final int FUNC_TOU_ZI_JI_HUA_VALUE = 43;
    /**
     * <code>FUNC_YUE_KA_TOU_ZI = 44;</code>
     *
     * <pre>
     * 月卡投资
     * </pre>
     */
    public static final int FUNC_YUE_KA_TOU_ZI_VALUE = 44;
    /**
     * <code>FUNC_FU_LI = 45;</code>
     *
     * <pre>
     * 福利大厅
     * </pre>
     */
    public static final int FUNC_FU_LI_VALUE = 45;
    /**
     * <code>FUNC_DENG_JI_XIAN_GOU = 46;</code>
     *
     * <pre>
     * 等级限购
     * </pre>
     */
    public static final int FUNC_DENG_JI_XIAN_GOU_VALUE = 46;
    /**
     * <code>FUNC_TIAN_SHU_XUN_ZHU = 47;</code>
     *
     * <pre>
     * 天书寻主
     * </pre>
     */
    public static final int FUNC_TIAN_SHU_XUN_ZHU_VALUE = 47;
    /**
     * <code>FUNC_MEI_RI_LEI_CHONG = 48;</code>
     *
     * <pre>
     * 每日累充
     * </pre>
     */
    public static final int FUNC_MEI_RI_LEI_CHONG_VALUE = 48;
    /**
     * <code>FUNC_MEI_ZHOU_LEI_CHONG = 49;</code>
     *
     * <pre>
     * 每周累充
     * </pre>
     */
    public static final int FUNC_MEI_ZHOU_LEI_CHONG_VALUE = 49;
    /**
     * <code>FUNC_LIAN_CHONG = 50;</code>
     *
     * <pre>
     * 连充
     * </pre>
     */
    public static final int FUNC_LIAN_CHONG_VALUE = 50;
    /**
     * <code>FUNC_QI_RI_DENG_LU = 51;</code>
     *
     * <pre>
     * 七日登陆
     * </pre>
     */
    public static final int FUNC_QI_RI_DENG_LU_VALUE = 51;
    /**
     * <code>FUNC_RED_EQUIP_COMPOUND = 52;</code>
     *
     * <pre>
     * 红装合成
     * </pre>
     */
    public static final int FUNC_RED_EQUIP_COMPOUND_VALUE = 52;
    /**
     * <code>FUNC_TRANSFORM = 53;</code>
     *
     * <pre>
     * 化形
     * </pre>
     */
    public static final int FUNC_TRANSFORM_VALUE = 53;
    /**
     * <code>FUNC_SUIT_FORGE = 54;</code>
     *
     * <pre>
     * 套装锻造
     * </pre>
     */
    public static final int FUNC_SUIT_FORGE_VALUE = 54;
    /**
     * <code>FUNC_DEMON_BOSS = 55;</code>
     *
     * <pre>
     * 魔界boss
     * </pre>
     */
    public static final int FUNC_DEMON_BOSS_VALUE = 55;
    /**
     * <code>FUNC_WORLD_BOSS = 56;</code>
     *
     * <pre>
     * 世界boss
     * </pre>
     */
    public static final int FUNC_WORLD_BOSS_VALUE = 56;
    /**
     * <code>FUNC_MATE = 57;</code>
     *
     * <pre>
     * 伴侣
     * </pre>
     */
    public static final int FUNC_MATE_VALUE = 57;
    /**
     * <code>FUNC_GEM = 58;</code>
     *
     * <pre>
     * 宝石镶嵌
     * </pre>
     */
    public static final int FUNC_GEM_VALUE = 58;
    /**
     * <code>FUNC_CHONG_BANG = 59;</code>
     *
     * <pre>
     * 冲榜
     * </pre>
     */
    public static final int FUNC_CHONG_BANG_VALUE = 59;
    /**
     * <code>FUNC_OFFLINE_HUNG = 60;</code>
     *
     * <pre>
     * 离线挂机
     * </pre>
     */
    public static final int FUNC_OFFLINE_HUNG_VALUE = 60;
    /**
     * <code>FUNC_JING_JI = 61;</code>
     *
     * <pre>
     * 竞技
     * </pre>
     */
    public static final int FUNC_JING_JI_VALUE = 61;
    /**
     * <code>FUNC_PRAY = 62;</code>
     *
     * <pre>
     * 祈福
     * </pre>
     */
    public static final int FUNC_PRAY_VALUE = 62;
    /**
     * <code>FUNC_PERSONAL_BOSS = 63;</code>
     *
     * <pre>
     * 个人boss
     * </pre>
     */
    public static final int FUNC_PERSONAL_BOSS_VALUE = 63;
    /**
     * <code>FUNC_HOME_BOSS = 64;</code>
     *
     * <pre>
     * boss之家
     * </pre>
     */
    public static final int FUNC_HOME_BOSS_VALUE = 64;
    /**
     * <code>FUNC_AUCTION = 65;</code>
     *
     * <pre>
     * 市场
     * </pre>
     */
    public static final int FUNC_AUCTION_VALUE = 65;
    /**
     * <code>FUNC_RUNE_LOTTERY = 66;</code>
     *
     * <pre>
     * 符文寻宝
     * </pre>
     */
    public static final int FUNC_RUNE_LOTTERY_VALUE = 66;
    /**
     * <code>FUNC_EQUIP_LOTTERY = 67;</code>
     *
     * <pre>
     * 装备寻宝
     * </pre>
     */
    public static final int FUNC_EQUIP_LOTTERY_VALUE = 67;
    /**
     * <code>FUNC_LING_YUAN_GOU = 68;</code>
     *
     * <pre>
     * 零元购
     * </pre>
     */
    public static final int FUNC_LING_YUAN_GOU_VALUE = 68;
    /**
     * <code>FUNC_FORGE = 69;</code>
     *
     * <pre>
     * 打造
     * </pre>
     */
    public static final int FUNC_FORGE_VALUE = 69;
    /**
     * <code>FUNC_KUANG_HUAN = 70;</code>
     *
     * <pre>
     * 开服狂欢
     * </pre>
     */
    public static final int FUNC_KUANG_HUAN_VALUE = 70;
    /**
     * <code>FUNC_BE_STRONG = 71;</code>
     *
     * <pre>
     * 变强
     * </pre>
     */
    public static final int FUNC_BE_STRONG_VALUE = 71;
    /**
     * <code>FUNC_CLIENT_DOWNLOAD = 72;</code>
     *
     * <pre>
     * 下载
     * </pre>
     */
    public static final int FUNC_CLIENT_DOWNLOAD_VALUE = 72;
    /**
     * <code>FUNC_TREASURE = 73;</code>
     *
     * <pre>
     * 天使秘宝
     * </pre>
     */
    public static final int FUNC_TREASURE_VALUE = 73;
    /**
     * <code>FUNC_HANDBOOK = 74;</code>
     *
     * <pre>
     * 图鉴
     * </pre>
     */
    public static final int FUNC_HANDBOOK_VALUE = 74;
    /**
     * <code>FUNC_CLOUD_BUY = 75;</code>
     *
     * <pre>
     * 限时云购
     * </pre>
     */
    public static final int FUNC_CLOUD_BUY_VALUE = 75;
    /**
     * <code>FUNC_LUCK_SHOP = 76;</code>
     *
     * <pre>
     * 幸运商店
     * </pre>
     */
    public static final int FUNC_LUCK_SHOP_VALUE = 76;
    /**
     * <code>FUNC_HERALDRY = 77;</code>
     *
     * <pre>
     * 纹章
     * </pre>
     */
    public static final int FUNC_HERALDRY_VALUE = 77;
    /**
     * <code>FUNC_GUARD_GUILD = 78;</code>
     *
     * <pre>
     * 守卫公会
     * </pre>
     */
    public static final int FUNC_GUARD_GUILD_VALUE = 78;
    /**
     * <code>FUNC_PET_PLUGIN = 79;</code>
     *
     * <pre>
     * 宠物插件
     * </pre>
     */
    public static final int FUNC_PET_PLUGIN_VALUE = 79;
    /**
     * <code>FUNC_HERALDRY_MYSTERY = 80;</code>
     *
     * <pre>
     * 纹章秘境
     * </pre>
     */
    public static final int FUNC_HERALDRY_MYSTERY_VALUE = 80;
    /**
     * <code>FUNC_BOSS_TOU_ZI = 81;</code>
     *
     * <pre>
     * boss投资
     * </pre>
     */
    public static final int FUNC_BOSS_TOU_ZI_VALUE = 81;
    /**
     * <code>FUNC_TIAN_TIAN_FAN_LI = 82;</code>
     *
     * <pre>
     *天天返利
     * </pre>
     */
    public static final int FUNC_TIAN_TIAN_FAN_LI_VALUE = 82;
    /**
     * <code>FUNC_BOSS_XUAN_SHANG = 83;</code>
     *
     * <pre>
     *boss悬赏
     * </pre>
     */
    public static final int FUNC_BOSS_XUAN_SHANG_VALUE = 83;
    /**
     * <code>FUNC_ZHUANG_BEI_XUAN_SHANG = 84;</code>
     *
     * <pre>
     *装备悬赏
     * </pre>
     */
    public static final int FUNC_ZHUANG_BEI_XUAN_SHANG_VALUE = 84;
    /**
     * <code>FUNC_SOUL_BEAST = 85;</code>
     *
     * <pre>
     *魂兽
     * </pre>
     */
    public static final int FUNC_SOUL_BEAST_VALUE = 85;
    /**
     * <code>FUNC_JI_FEN_CHONG_BANG = 86;</code>
     *
     * <pre>
     * 积分冲榜
     * </pre>
     */
    public static final int FUNC_JI_FEN_CHONG_BANG_VALUE = 86;
    /**
     * <code>FUNC_XIAN_GOU_DA_LI_BAO = 87;</code>
     *
     * <pre>
     * 限购大礼包
     * </pre>
     */
    public static final int FUNC_XIAN_GOU_DA_LI_BAO_VALUE = 87;
    /**
     * <code>FUNC_LIFE_GRID = 88;</code>
     *
     * <pre>
     *命格
     * </pre>
     */
    public static final int FUNC_LIFE_GRID_VALUE = 88;
    /**
     * <code>FUNC_BROTHERS = 89;</code>
     *
     * <pre>
     *血盟
     * </pre>
     */
    public static final int FUNC_BROTHERS_VALUE = 89;
    /**
     * <code>FUNC_BROTHERS_BANQUET = 90;</code>
     *
     * <pre>
     *血盟宴席
     * </pre>
     */
    public static final int FUNC_BROTHERS_BANQUET_VALUE = 90;
    /**
     * <code>FUNC_ARTIFACT = 91;</code>
     *
     * <pre>
     *神器
     * </pre>
     */
    public static final int FUNC_ARTIFACT_VALUE = 91;
    /**
     * <code>FUNC_XING_YUN_LUN_PAN = 92;</code>
     *
     * <pre>
     * 幸运轮盘
     * </pre>
     */
    public static final int FUNC_XING_YUN_LUN_PAN_VALUE = 92;
    /**
     * <code>FUNC_PLAYER_STRATEGY = 93;</code>
     *
     * <pre>
     * 玩家攻略
     * </pre>
     */
    public static final int FUNC_PLAYER_STRATEGY_VALUE = 93;
    /**
     * <code>FUNC_ASCEND_PRODUCT = 94;</code>
     *
     * <pre>
     * 升品
     * </pre>
     */
    public static final int FUNC_ASCEND_PRODUCT_VALUE = 94;
    /**
     * <code>FUNC_UP_QUALITY_DUNGEON = 95;</code>
     *
     * <pre>
     * 升品副本
     * </pre>
     */
    public static final int FUNC_UP_QUALITY_DUNGEON_VALUE = 95;
    /**
     * <code>FUNC_XING_ZHEN = 96;</code>
     *
     * <pre>
     * 星阵
     * </pre>
     */
    public static final int FUNC_XING_ZHEN_VALUE = 96;
    /**
     * <code>FUNC_AMULET = 97;</code>
     *
     * <pre>
     * 刻印
     * </pre>
     */
    public static final int FUNC_AMULET_VALUE = 97;
    /**
     * <code>FUNC_MIRAGE = 98;</code>
     *
     * <pre>
     * 幻影
     * </pre>
     */
    public static final int FUNC_MIRAGE_VALUE = 98;
    /**
     * <code>FUNC_TRANSFORM_MIRAGE = 99;</code>
     *
     * <pre>
     * 化形幻影
     * </pre>
     */
    public static final int FUNC_TRANSFORM_MIRAGE_VALUE = 99;
    /**
     * <code>FUNC_TALENT = 100;</code>
     *
     * <pre>
     *天赋
     * </pre>
     */
    public static final int FUNC_TALENT_VALUE = 100;
    /**
     * <code>FUNC_EVIL_TREASURY = 101;</code>
     *
     * <pre>
     * 恶魔宝库
     * </pre>
     */
    public static final int FUNC_EVIL_TREASURY_VALUE = 101;
    /**
     * <code>FUNC_EQUIP_ADVANCE = 102;</code>
     *
     * <pre>
     * 装备进阶
     * </pre>
     */
    public static final int FUNC_EQUIP_ADVANCE_VALUE = 102;
    /**
     * <code>FUNC_GUILD_WAR = 103;</code>
     *
     * <pre>
     * 跨服公会战
     * </pre>
     */
    public static final int FUNC_GUILD_WAR_VALUE = 103;
    /**
     * <code>FUNC_ACTIVE_TURNTABLE = 104;</code>
     *
     * <pre>
     * 活跃转盘
     * </pre>
     */
    public static final int FUNC_ACTIVE_TURNTABLE_VALUE = 104;
    /**
     * <code>FUNC_BROTHER_BATTLE = 105;</code>
     *
     * <pre>
     * 血盟竞技
     * </pre>
     */
    public static final int FUNC_BROTHER_BATTLE_VALUE = 105;
    /**
     * <code>FUNC_BOSS_MELEE = 106;</code>
     *
     * <pre>
     * BOSS乱斗
     * </pre>
     */
    public static final int FUNC_BOSS_MELEE_VALUE = 106;


    public final int getNumber() { return value; }

    public static FunctionType valueOf(int value) {
      switch (value) {
        case 1: return FUNC_SPELL;
        case 2: return FUNC_PET;
        case 3: return FUNC_MAGIC;
        case 4: return FUNC_GOD;
        case 5: return FUNC_FEATHER;
        case 6: return FUNC_BAO_KU;
        case 7: return FUNC_GUARD_ELF;
        case 8: return FUNC_MOKU;
        case 9: return FUNC_REIN;
        case 10: return FUNC_TOWER;
        case 11: return FUNC_XUE_ZHEN;
        case 12: return FUNC_RUNE;
        case 13: return FUNC_COMPOUND;
        case 14: return FUNC_TEAM;
        case 15: return FUNC_BOSS;
        case 16: return FUNC_EQUIP;
        case 17: return FUNC_GUILD;
        case 18: return FUNC_MOUNT;
        case 19: return FUNC_EXAM;
        case 20: return FUNC_MARRIAGE;
        case 21: return FUNC_RELATION;
        case 22: return FUNC_SHOP;
        case 23: return FUNC_REALM;
        case 24: return FUNC_ACHIEVEMENT;
        case 25: return FUNC_HONOR_BATTLE;
        case 26: return FUNC_RESOUCE_BACK;
        case 27: return FUNC_PEAK_COMBAT;
        case 28: return FUNC_RANK;
        case 29: return FUNC_CLOAK;
        case 30: return FUNC_BRAVE_PEAK;
        case 31: return FUNC_LIVENESS;
        case 32: return FUNC_THREE_BATTLE;
        case 33: return FUNC_TRANSFORM_MAGIC;
        case 34: return FUNC_TRANSFORM_GOD;
        case 35: return FUNC_TRANSFORM_CLOAK;
        case 36: return FUNC_TRANSFORM_MOUNT;
        case 37: return FUNC_TRANSFORM_PET;
        case 38: return FUNC_TRANSFORM_FEATHER;
        case 39: return FUNC_SKIN;
        case 40: return FUNC_REWARD_TASK;
        case 41: return FUNC_GUILD_FIRE;
        case 42: return FUNC_ESCORT_TASK;
        case 43: return FUNC_TOU_ZI_JI_HUA;
        case 44: return FUNC_YUE_KA_TOU_ZI;
        case 45: return FUNC_FU_LI;
        case 46: return FUNC_DENG_JI_XIAN_GOU;
        case 47: return FUNC_TIAN_SHU_XUN_ZHU;
        case 48: return FUNC_MEI_RI_LEI_CHONG;
        case 49: return FUNC_MEI_ZHOU_LEI_CHONG;
        case 50: return FUNC_LIAN_CHONG;
        case 51: return FUNC_QI_RI_DENG_LU;
        case 52: return FUNC_RED_EQUIP_COMPOUND;
        case 53: return FUNC_TRANSFORM;
        case 54: return FUNC_SUIT_FORGE;
        case 55: return FUNC_DEMON_BOSS;
        case 56: return FUNC_WORLD_BOSS;
        case 57: return FUNC_MATE;
        case 58: return FUNC_GEM;
        case 59: return FUNC_CHONG_BANG;
        case 60: return FUNC_OFFLINE_HUNG;
        case 61: return FUNC_JING_JI;
        case 62: return FUNC_PRAY;
        case 63: return FUNC_PERSONAL_BOSS;
        case 64: return FUNC_HOME_BOSS;
        case 65: return FUNC_AUCTION;
        case 66: return FUNC_RUNE_LOTTERY;
        case 67: return FUNC_EQUIP_LOTTERY;
        case 68: return FUNC_LING_YUAN_GOU;
        case 69: return FUNC_FORGE;
        case 70: return FUNC_KUANG_HUAN;
        case 71: return FUNC_BE_STRONG;
        case 72: return FUNC_CLIENT_DOWNLOAD;
        case 73: return FUNC_TREASURE;
        case 74: return FUNC_HANDBOOK;
        case 75: return FUNC_CLOUD_BUY;
        case 76: return FUNC_LUCK_SHOP;
        case 77: return FUNC_HERALDRY;
        case 78: return FUNC_GUARD_GUILD;
        case 79: return FUNC_PET_PLUGIN;
        case 80: return FUNC_HERALDRY_MYSTERY;
        case 81: return FUNC_BOSS_TOU_ZI;
        case 82: return FUNC_TIAN_TIAN_FAN_LI;
        case 83: return FUNC_BOSS_XUAN_SHANG;
        case 84: return FUNC_ZHUANG_BEI_XUAN_SHANG;
        case 85: return FUNC_SOUL_BEAST;
        case 86: return FUNC_JI_FEN_CHONG_BANG;
        case 87: return FUNC_XIAN_GOU_DA_LI_BAO;
        case 88: return FUNC_LIFE_GRID;
        case 89: return FUNC_BROTHERS;
        case 90: return FUNC_BROTHERS_BANQUET;
        case 91: return FUNC_ARTIFACT;
        case 92: return FUNC_XING_YUN_LUN_PAN;
        case 93: return FUNC_PLAYER_STRATEGY;
        case 94: return FUNC_ASCEND_PRODUCT;
        case 95: return FUNC_UP_QUALITY_DUNGEON;
        case 96: return FUNC_XING_ZHEN;
        case 97: return FUNC_AMULET;
        case 98: return FUNC_MIRAGE;
        case 99: return FUNC_TRANSFORM_MIRAGE;
        case 100: return FUNC_TALENT;
        case 101: return FUNC_EVIL_TREASURY;
        case 102: return FUNC_EQUIP_ADVANCE;
        case 103: return FUNC_GUILD_WAR;
        case 104: return FUNC_ACTIVE_TURNTABLE;
        case 105: return FUNC_BROTHER_BATTLE;
        case 106: return FUNC_BOSS_MELEE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FunctionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<FunctionType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FunctionType>() {
            public FunctionType findValueByNumber(int number) {
              return FunctionType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return app.protobuf.client.FunctionClientContent.getDescriptor().getEnumTypes().get(0);
    }

    private static final FunctionType[] VALUES = values();

    public static FunctionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private FunctionType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:proto.FunctionType)
  }

  public interface FunctionOpenClientProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.FunctionOpenClientProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
     *
     * <pre>
     *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
     * </pre>
     */
    boolean hasFunctionTypeArr();
    /**
     * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
     *
     * <pre>
     *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
     * </pre>
     */
    app.protobuf.client.UtilContent.BoolArrayProto getFunctionTypeArr();
    /**
     * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
     *
     * <pre>
     *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
     * </pre>
     */
    app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder getFunctionTypeArrOrBuilder();

    /**
     * <code>repeated int32 openPrizeCollects = 2;</code>
     *
     * <pre>
     * 已领取的开启奖励id
     * </pre>
     */
    java.util.List<java.lang.Integer> getOpenPrizeCollectsList();
    /**
     * <code>repeated int32 openPrizeCollects = 2;</code>
     *
     * <pre>
     * 已领取的开启奖励id
     * </pre>
     */
    int getOpenPrizeCollectsCount();
    /**
     * <code>repeated int32 openPrizeCollects = 2;</code>
     *
     * <pre>
     * 已领取的开启奖励id
     * </pre>
     */
    int getOpenPrizeCollects(int index);
  }
  /**
   * Protobuf type {@code proto.FunctionOpenClientProto}
   *
   * <pre>
   * </pre>
   */
  public static final class FunctionOpenClientProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.FunctionOpenClientProto)
      FunctionOpenClientProtoOrBuilder {
    // Use FunctionOpenClientProto.newBuilder() to construct.
    private FunctionOpenClientProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FunctionOpenClientProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FunctionOpenClientProto defaultInstance;
    public static FunctionOpenClientProto getDefaultInstance() {
      return defaultInstance;
    }

    public FunctionOpenClientProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FunctionOpenClientProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              app.protobuf.client.UtilContent.BoolArrayProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = functionTypeArr_.toBuilder();
              }
              functionTypeArr_ = input.readMessage(app.protobuf.client.UtilContent.BoolArrayProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(functionTypeArr_);
                functionTypeArr_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                openPrizeCollects_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              openPrizeCollects_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                openPrizeCollects_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                openPrizeCollects_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          openPrizeCollects_ = java.util.Collections.unmodifiableList(openPrizeCollects_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return app.protobuf.client.FunctionClientContent.internal_static_proto_FunctionOpenClientProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return app.protobuf.client.FunctionClientContent.internal_static_proto_FunctionOpenClientProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              app.protobuf.client.FunctionClientContent.FunctionOpenClientProto.class, app.protobuf.client.FunctionClientContent.FunctionOpenClientProto.Builder.class);
    }

    public static com.google.protobuf.Parser<FunctionOpenClientProto> PARSER =
        new com.google.protobuf.AbstractParser<FunctionOpenClientProto>() {
      public FunctionOpenClientProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FunctionOpenClientProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FunctionOpenClientProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FUNCTIONTYPEARR_FIELD_NUMBER = 1;
    private app.protobuf.client.UtilContent.BoolArrayProto functionTypeArr_;
    /**
     * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
     *
     * <pre>
     *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
     * </pre>
     */
    public boolean hasFunctionTypeArr() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
     *
     * <pre>
     *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
     * </pre>
     */
    public app.protobuf.client.UtilContent.BoolArrayProto getFunctionTypeArr() {
      return functionTypeArr_;
    }
    /**
     * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
     *
     * <pre>
     *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
     * </pre>
     */
    public app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder getFunctionTypeArrOrBuilder() {
      return functionTypeArr_;
    }

    public static final int OPENPRIZECOLLECTS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> openPrizeCollects_;
    /**
     * <code>repeated int32 openPrizeCollects = 2;</code>
     *
     * <pre>
     * 已领取的开启奖励id
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOpenPrizeCollectsList() {
      return openPrizeCollects_;
    }
    /**
     * <code>repeated int32 openPrizeCollects = 2;</code>
     *
     * <pre>
     * 已领取的开启奖励id
     * </pre>
     */
    public int getOpenPrizeCollectsCount() {
      return openPrizeCollects_.size();
    }
    /**
     * <code>repeated int32 openPrizeCollects = 2;</code>
     *
     * <pre>
     * 已领取的开启奖励id
     * </pre>
     */
    public int getOpenPrizeCollects(int index) {
      return openPrizeCollects_.get(index);
    }

    private void initFields() {
      functionTypeArr_ = app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance();
      openPrizeCollects_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, functionTypeArr_);
      }
      for (int i = 0; i < openPrizeCollects_.size(); i++) {
        output.writeInt32(2, openPrizeCollects_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, functionTypeArr_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < openPrizeCollects_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(openPrizeCollects_.get(i));
        }
        size += dataSize;
        size += 1 * getOpenPrizeCollectsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static app.protobuf.client.FunctionClientContent.FunctionOpenClientProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.client.FunctionClientContent.FunctionOpenClientProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.client.FunctionClientContent.FunctionOpenClientProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.client.FunctionClientContent.FunctionOpenClientProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.client.FunctionClientContent.FunctionOpenClientProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.client.FunctionClientContent.FunctionOpenClientProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static app.protobuf.client.FunctionClientContent.FunctionOpenClientProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static app.protobuf.client.FunctionClientContent.FunctionOpenClientProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static app.protobuf.client.FunctionClientContent.FunctionOpenClientProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.client.FunctionClientContent.FunctionOpenClientProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(app.protobuf.client.FunctionClientContent.FunctionOpenClientProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.FunctionOpenClientProto}
     *
     * <pre>
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.FunctionOpenClientProto)
        app.protobuf.client.FunctionClientContent.FunctionOpenClientProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return app.protobuf.client.FunctionClientContent.internal_static_proto_FunctionOpenClientProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return app.protobuf.client.FunctionClientContent.internal_static_proto_FunctionOpenClientProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                app.protobuf.client.FunctionClientContent.FunctionOpenClientProto.class, app.protobuf.client.FunctionClientContent.FunctionOpenClientProto.Builder.class);
      }

      // Construct using app.protobuf.client.FunctionClientContent.FunctionOpenClientProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFunctionTypeArrFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (functionTypeArrBuilder_ == null) {
          functionTypeArr_ = app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance();
        } else {
          functionTypeArrBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        openPrizeCollects_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return app.protobuf.client.FunctionClientContent.internal_static_proto_FunctionOpenClientProto_descriptor;
      }

      public app.protobuf.client.FunctionClientContent.FunctionOpenClientProto getDefaultInstanceForType() {
        return app.protobuf.client.FunctionClientContent.FunctionOpenClientProto.getDefaultInstance();
      }

      public app.protobuf.client.FunctionClientContent.FunctionOpenClientProto build() {
        app.protobuf.client.FunctionClientContent.FunctionOpenClientProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public app.protobuf.client.FunctionClientContent.FunctionOpenClientProto buildPartial() {
        app.protobuf.client.FunctionClientContent.FunctionOpenClientProto result = new app.protobuf.client.FunctionClientContent.FunctionOpenClientProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (functionTypeArrBuilder_ == null) {
          result.functionTypeArr_ = functionTypeArr_;
        } else {
          result.functionTypeArr_ = functionTypeArrBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          openPrizeCollects_ = java.util.Collections.unmodifiableList(openPrizeCollects_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.openPrizeCollects_ = openPrizeCollects_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof app.protobuf.client.FunctionClientContent.FunctionOpenClientProto) {
          return mergeFrom((app.protobuf.client.FunctionClientContent.FunctionOpenClientProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(app.protobuf.client.FunctionClientContent.FunctionOpenClientProto other) {
        if (other == app.protobuf.client.FunctionClientContent.FunctionOpenClientProto.getDefaultInstance()) return this;
        if (other.hasFunctionTypeArr()) {
          mergeFunctionTypeArr(other.getFunctionTypeArr());
        }
        if (!other.openPrizeCollects_.isEmpty()) {
          if (openPrizeCollects_.isEmpty()) {
            openPrizeCollects_ = other.openPrizeCollects_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureOpenPrizeCollectsIsMutable();
            openPrizeCollects_.addAll(other.openPrizeCollects_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        app.protobuf.client.FunctionClientContent.FunctionOpenClientProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (app.protobuf.client.FunctionClientContent.FunctionOpenClientProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private app.protobuf.client.UtilContent.BoolArrayProto functionTypeArr_ = app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          app.protobuf.client.UtilContent.BoolArrayProto, app.protobuf.client.UtilContent.BoolArrayProto.Builder, app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder> functionTypeArrBuilder_;
      /**
       * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
       *
       * <pre>
       *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
       * </pre>
       */
      public boolean hasFunctionTypeArr() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
       *
       * <pre>
       *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
       * </pre>
       */
      public app.protobuf.client.UtilContent.BoolArrayProto getFunctionTypeArr() {
        if (functionTypeArrBuilder_ == null) {
          return functionTypeArr_;
        } else {
          return functionTypeArrBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
       *
       * <pre>
       *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
       * </pre>
       */
      public Builder setFunctionTypeArr(app.protobuf.client.UtilContent.BoolArrayProto value) {
        if (functionTypeArrBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          functionTypeArr_ = value;
          onChanged();
        } else {
          functionTypeArrBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
       *
       * <pre>
       *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
       * </pre>
       */
      public Builder setFunctionTypeArr(
          app.protobuf.client.UtilContent.BoolArrayProto.Builder builderForValue) {
        if (functionTypeArrBuilder_ == null) {
          functionTypeArr_ = builderForValue.build();
          onChanged();
        } else {
          functionTypeArrBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
       *
       * <pre>
       *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
       * </pre>
       */
      public Builder mergeFunctionTypeArr(app.protobuf.client.UtilContent.BoolArrayProto value) {
        if (functionTypeArrBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              functionTypeArr_ != app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance()) {
            functionTypeArr_ =
              app.protobuf.client.UtilContent.BoolArrayProto.newBuilder(functionTypeArr_).mergeFrom(value).buildPartial();
          } else {
            functionTypeArr_ = value;
          }
          onChanged();
        } else {
          functionTypeArrBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
       *
       * <pre>
       *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
       * </pre>
       */
      public Builder clearFunctionTypeArr() {
        if (functionTypeArrBuilder_ == null) {
          functionTypeArr_ = app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance();
          onChanged();
        } else {
          functionTypeArrBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
       *
       * <pre>
       *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
       * </pre>
       */
      public app.protobuf.client.UtilContent.BoolArrayProto.Builder getFunctionTypeArrBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFunctionTypeArrFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
       *
       * <pre>
       *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
       * </pre>
       */
      public app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder getFunctionTypeArrOrBuilder() {
        if (functionTypeArrBuilder_ != null) {
          return functionTypeArrBuilder_.getMessageOrBuilder();
        } else {
          return functionTypeArr_;
        }
      }
      /**
       * <code>optional .proto.BoolArrayProto functionTypeArr = 1;</code>
       *
       * <pre>
       *    repeated int32 functionTypeArr = 1; //已经开放的功能 FunctionType
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          app.protobuf.client.UtilContent.BoolArrayProto, app.protobuf.client.UtilContent.BoolArrayProto.Builder, app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder> 
          getFunctionTypeArrFieldBuilder() {
        if (functionTypeArrBuilder_ == null) {
          functionTypeArrBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              app.protobuf.client.UtilContent.BoolArrayProto, app.protobuf.client.UtilContent.BoolArrayProto.Builder, app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder>(
                  getFunctionTypeArr(),
                  getParentForChildren(),
                  isClean());
          functionTypeArr_ = null;
        }
        return functionTypeArrBuilder_;
      }

      private java.util.List<java.lang.Integer> openPrizeCollects_ = java.util.Collections.emptyList();
      private void ensureOpenPrizeCollectsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          openPrizeCollects_ = new java.util.ArrayList<java.lang.Integer>(openPrizeCollects_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 openPrizeCollects = 2;</code>
       *
       * <pre>
       * 已领取的开启奖励id
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOpenPrizeCollectsList() {
        return java.util.Collections.unmodifiableList(openPrizeCollects_);
      }
      /**
       * <code>repeated int32 openPrizeCollects = 2;</code>
       *
       * <pre>
       * 已领取的开启奖励id
       * </pre>
       */
      public int getOpenPrizeCollectsCount() {
        return openPrizeCollects_.size();
      }
      /**
       * <code>repeated int32 openPrizeCollects = 2;</code>
       *
       * <pre>
       * 已领取的开启奖励id
       * </pre>
       */
      public int getOpenPrizeCollects(int index) {
        return openPrizeCollects_.get(index);
      }
      /**
       * <code>repeated int32 openPrizeCollects = 2;</code>
       *
       * <pre>
       * 已领取的开启奖励id
       * </pre>
       */
      public Builder setOpenPrizeCollects(
          int index, int value) {
        ensureOpenPrizeCollectsIsMutable();
        openPrizeCollects_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 openPrizeCollects = 2;</code>
       *
       * <pre>
       * 已领取的开启奖励id
       * </pre>
       */
      public Builder addOpenPrizeCollects(int value) {
        ensureOpenPrizeCollectsIsMutable();
        openPrizeCollects_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 openPrizeCollects = 2;</code>
       *
       * <pre>
       * 已领取的开启奖励id
       * </pre>
       */
      public Builder addAllOpenPrizeCollects(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOpenPrizeCollectsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, openPrizeCollects_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 openPrizeCollects = 2;</code>
       *
       * <pre>
       * 已领取的开启奖励id
       * </pre>
       */
      public Builder clearOpenPrizeCollects() {
        openPrizeCollects_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.FunctionOpenClientProto)
    }

    static {
      defaultInstance = new FunctionOpenClientProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.FunctionOpenClientProto)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_FunctionOpenClientProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_FunctionOpenClientProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n!client/function_open_client.proto\022\005pro" +
      "to\032\021client/util.proto\"d\n\027FunctionOpenCli" +
      "entProto\022.\n\017functionTypeArr\030\001 \001(\0132\025.prot" +
      "o.BoolArrayProto\022\031\n\021openPrizeCollects\030\002 " +
      "\003(\005*\304\021\n\014FunctionType\022\016\n\nFUNC_SPELL\020\001\022\014\n\010" +
      "FUNC_PET\020\002\022\016\n\nFUNC_MAGIC\020\003\022\014\n\010FUNC_GOD\020\004" +
      "\022\020\n\014FUNC_FEATHER\020\005\022\017\n\013FUNC_BAO_KU\020\006\022\022\n\016F" +
      "UNC_GUARD_ELF\020\007\022\r\n\tFUNC_MOKU\020\010\022\r\n\tFUNC_R" +
      "EIN\020\t\022\016\n\nFUNC_TOWER\020\n\022\021\n\rFUNC_XUE_ZHEN\020\013" +
      "\022\r\n\tFUNC_RUNE\020\014\022\021\n\rFUNC_COMPOUND\020\r\022\r\n\tFU",
      "NC_TEAM\020\016\022\r\n\tFUNC_BOSS\020\017\022\016\n\nFUNC_EQUIP\020\020" +
      "\022\016\n\nFUNC_GUILD\020\021\022\016\n\nFUNC_MOUNT\020\022\022\r\n\tFUNC" +
      "_EXAM\020\023\022\021\n\rFUNC_MARRIAGE\020\024\022\021\n\rFUNC_RELAT" +
      "ION\020\025\022\r\n\tFUNC_SHOP\020\026\022\016\n\nFUNC_REALM\020\027\022\024\n\020" +
      "FUNC_ACHIEVEMENT\020\030\022\025\n\021FUNC_HONOR_BATTLE\020" +
      "\031\022\025\n\021FUNC_RESOUCE_BACK\020\032\022\024\n\020FUNC_PEAK_CO" +
      "MBAT\020\033\022\r\n\tFUNC_RANK\020\034\022\016\n\nFUNC_CLOAK\020\035\022\023\n" +
      "\017FUNC_BRAVE_PEAK\020\036\022\021\n\rFUNC_LIVENESS\020\037\022\025\n" +
      "\021FUNC_THREE_BATTLE\020 \022\030\n\024FUNC_TRANSFORM_M" +
      "AGIC\020!\022\026\n\022FUNC_TRANSFORM_GOD\020\"\022\030\n\024FUNC_T",
      "RANSFORM_CLOAK\020#\022\030\n\024FUNC_TRANSFORM_MOUNT" +
      "\020$\022\026\n\022FUNC_TRANSFORM_PET\020%\022\032\n\026FUNC_TRANS" +
      "FORM_FEATHER\020&\022\r\n\tFUNC_SKIN\020\'\022\024\n\020FUNC_RE" +
      "WARD_TASK\020(\022\023\n\017FUNC_GUILD_FIRE\020)\022\024\n\020FUNC" +
      "_ESCORT_TASK\020*\022\026\n\022FUNC_TOU_ZI_JI_HUA\020+\022\026" +
      "\n\022FUNC_YUE_KA_TOU_ZI\020,\022\016\n\nFUNC_FU_LI\020-\022\031" +
      "\n\025FUNC_DENG_JI_XIAN_GOU\020.\022\031\n\025FUNC_TIAN_S" +
      "HU_XUN_ZHU\020/\022\031\n\025FUNC_MEI_RI_LEI_CHONG\0200\022" +
      "\033\n\027FUNC_MEI_ZHOU_LEI_CHONG\0201\022\023\n\017FUNC_LIA" +
      "N_CHONG\0202\022\026\n\022FUNC_QI_RI_DENG_LU\0203\022\033\n\027FUN",
      "C_RED_EQUIP_COMPOUND\0204\022\022\n\016FUNC_TRANSFORM" +
      "\0205\022\023\n\017FUNC_SUIT_FORGE\0206\022\023\n\017FUNC_DEMON_BO" +
      "SS\0207\022\023\n\017FUNC_WORLD_BOSS\0208\022\r\n\tFUNC_MATE\0209" +
      "\022\014\n\010FUNC_GEM\020:\022\023\n\017FUNC_CHONG_BANG\020;\022\025\n\021F" +
      "UNC_OFFLINE_HUNG\020<\022\020\n\014FUNC_JING_JI\020=\022\r\n\t" +
      "FUNC_PRAY\020>\022\026\n\022FUNC_PERSONAL_BOSS\020?\022\022\n\016F" +
      "UNC_HOME_BOSS\020@\022\020\n\014FUNC_AUCTION\020A\022\025\n\021FUN" +
      "C_RUNE_LOTTERY\020B\022\026\n\022FUNC_EQUIP_LOTTERY\020C" +
      "\022\026\n\022FUNC_LING_YUAN_GOU\020D\022\016\n\nFUNC_FORGE\020E" +
      "\022\023\n\017FUNC_KUANG_HUAN\020F\022\022\n\016FUNC_BE_STRONG\020",
      "G\022\030\n\024FUNC_CLIENT_DOWNLOAD\020H\022\021\n\rFUNC_TREA" +
      "SURE\020I\022\021\n\rFUNC_HANDBOOK\020J\022\022\n\016FUNC_CLOUD_" +
      "BUY\020K\022\022\n\016FUNC_LUCK_SHOP\020L\022\021\n\rFUNC_HERALD" +
      "RY\020M\022\024\n\020FUNC_GUARD_GUILD\020N\022\023\n\017FUNC_PET_P" +
      "LUGIN\020O\022\031\n\025FUNC_HERALDRY_MYSTERY\020P\022\024\n\020FU" +
      "NC_BOSS_TOU_ZI\020Q\022\031\n\025FUNC_TIAN_TIAN_FAN_L" +
      "I\020R\022\030\n\024FUNC_BOSS_XUAN_SHANG\020S\022\036\n\032FUNC_ZH" +
      "UANG_BEI_XUAN_SHANG\020T\022\023\n\017FUNC_SOUL_BEAST" +
      "\020U\022\032\n\026FUNC_JI_FEN_CHONG_BANG\020V\022\033\n\027FUNC_X" +
      "IAN_GOU_DA_LI_BAO\020W\022\022\n\016FUNC_LIFE_GRID\020X\022",
      "\021\n\rFUNC_BROTHERS\020Y\022\031\n\025FUNC_BROTHERS_BANQ" +
      "UET\020Z\022\021\n\rFUNC_ARTIFACT\020[\022\031\n\025FUNC_XING_YU" +
      "N_LUN_PAN\020\\\022\030\n\024FUNC_PLAYER_STRATEGY\020]\022\027\n" +
      "\023FUNC_ASCEND_PRODUCT\020^\022\033\n\027FUNC_UP_QUALIT" +
      "Y_DUNGEON\020_\022\022\n\016FUNC_XING_ZHEN\020`\022\017\n\013FUNC_" +
      "AMULET\020a\022\017\n\013FUNC_MIRAGE\020b\022\031\n\025FUNC_TRANSF" +
      "ORM_MIRAGE\020c\022\017\n\013FUNC_TALENT\020d\022\026\n\022FUNC_EV" +
      "IL_TREASURY\020e\022\026\n\022FUNC_EQUIP_ADVANCE\020f\022\022\n" +
      "\016FUNC_GUILD_WAR\020g\022\031\n\025FUNC_ACTIVE_TURNTAB" +
      "LE\020h\022\027\n\023FUNC_BROTHER_BATTLE\020i\022\023\n\017FUNC_BO",
      "SS_MELEE\020jB.\n\023app.protobuf.clientB\025Funct" +
      "ionClientContentH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          app.protobuf.client.UtilContent.getDescriptor(),
        }, assigner);
    internal_static_proto_FunctionOpenClientProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_proto_FunctionOpenClientProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_FunctionOpenClientProto_descriptor,
        new java.lang.String[] { "FunctionTypeArr", "OpenPrizeCollects", });
    app.protobuf.client.UtilContent.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
