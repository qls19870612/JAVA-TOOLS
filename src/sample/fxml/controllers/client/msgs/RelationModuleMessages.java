// Generated by tool. DO NOT EDIT!

package sample.fxml.controllers.client.msgs;

import org.jboss.netty.buffer.ChannelBuffer;

import sample.fxml.controllers.client.Modules;

import static sample.utils.BufferUtil.computeUTF;
import static sample.utils.BufferUtil.newDynamicMessage;
import static sample.utils.BufferUtil.newFixedSizeMessage;
import static sample.utils.BufferUtil.onlySendHeaderMessage;
import static sample.utils.BufferUtil.writeBoolean;
import static sample.utils.BufferUtil.writeUTF;


public class RelationModuleMessages {

    public static final int MODULE_ID = Modules.RELATION_MODULE_ID;

    /**
     * 请求添加某人为好友，无论后续是否添加好友成功，只要客户端发了这条消息 如果这个Id在你的黑名单，都要将他从黑名单移除掉
     * string 目标id targetHeroId
     * <p>
     */
    public static final int C2S_ADD_FRIEND = 1;

    /**
     * 请求获取好友详细信息
     */
    public static final int C2S_GET_RELATIONS = 2;

    /**
     * 回复其它人请求添加我好友
     * string 请求添加其它人为好友 targetId
     * bool 是否同意 agree
     */
    public static final int C2S_REPLY_ADD_FRIEND = 3;

    /**
     * 删除好友
     * string targetId 需要删除的好友ID
     */
    public static final int C2S_REMOVE_FRIEND = 4;

    /**
     * 添加黑名单
     * string 添加角色id targetHeroId
     */
    public static final int C2S_ADD_BLACK = 5;

    /**
     * 添加黑名单成功,注意:客户端需要判断,如果这个人之前是你的好友,则要把他从好友列表中移除掉
     *
     * bool 是否在线
     * bytes 关系详细信息
     */
    public static final int S2C_ADD_BLACK_OK = 1;

    public static ChannelBuffer addBlackOk(boolean isOnline, byte[] singleRelation) {
        ChannelBuffer buffer = newFixedSizeMessage(MODULE_ID, S2C_ADD_BLACK_OK, 1 + singleRelation.length + 2);
        writeBoolean(buffer, isOnline);
        writeUTF(buffer, singleRelation);
        return buffer;
    }

    /**
     * 成功，发送添加好友成功，等待对方回复，不附带任何别的参数
     */
    public static final int S2C_ADD_FRIEND_OK = 2;

    public static final ChannelBuffer addFriendOk = onlySendHeaderMessage(MODULE_ID, S2C_ADD_FRIEND_OK);

    /**
     * 获取成功
     *
     * bytes AllClientRelationDetail
     */
    public static final int S2C_GET_RELATIONS_OK = 3;

    public static ChannelBuffer getRelationsOk(byte[] allClientRelationDetail) {
        ChannelBuffer buffer = newFixedSizeMessage(MODULE_ID, S2C_GET_RELATIONS_OK, allClientRelationDetail.length + 2);
        writeUTF(buffer, allClientRelationDetail);
        return buffer;
    }

    /**
     * 删除黑名单
     * string targetId 要删除黑名单的ID
     */
    public static final int C2S_REMOVE_BLACK = 6;

    /**
     * 删除成功
     *
     * string 要删除黑名单的ID
     */
    public static final int S2C_REMOVE_BLACK_OK = 4;

    public static ChannelBuffer removeBlackOk(String targetId) {
        ChannelBuffer buffer = newFixedSizeMessage(MODULE_ID, S2C_REMOVE_BLACK_OK, computeUTF(targetId));
        writeUTF(buffer, targetId);
        return buffer;
    }

    /**
     * 删除好友成功
     *
     * string 删除的好友ID
     */
    public static final int S2C_REMOVE_FRIEND_OK = 5;

    public static ChannelBuffer removeFriendOk(String targetId) {
        ChannelBuffer buffer = newFixedSizeMessage(MODULE_ID, S2C_REMOVE_FRIEND_OK, computeUTF(targetId));
        writeUTF(buffer, targetId);
        return buffer;
    }

    /**
     * 回复加好友成功，返回目标的数据
     *
     * string 请求添加其它人为好友
     * bool 是否同意
     */
    public static final int S2C_REPLY_ADD_FRIEND_OK = 6;

    public static ChannelBuffer replyAddFriendOk(String targetId, boolean agree) {
        ChannelBuffer buffer = newFixedSizeMessage(MODULE_ID, S2C_REPLY_ADD_FRIEND_OK, computeUTF(targetId) + 1);
        writeUTF(buffer, targetId);
        writeBoolean(buffer, agree);
        return buffer;
    }

    /**
     * 删除对手
     * string targetId 需要删除的对手ID
     */
    public static final int C2S_REMOVE_ENEMY = 7;

    /**
     * 删除对手成功
     *
     * string 删除的对手ID
     */
    public static final int S2C_REMOVE_ENEMY_OK = 7;

    public static ChannelBuffer removeEnemyOk(String targetId) {
        ChannelBuffer buffer = newFixedSizeMessage(MODULE_ID, S2C_REMOVE_ENEMY_OK, computeUTF(targetId));
        writeUTF(buffer, targetId);
        return buffer;
    }

    /**
     * 获取推荐好友列表
     * <p>
     */
    public static final int C2S_RECOMMEND_FRIENDS_LIST = 8;

    /**
     * 获取推荐列表成功
     * short count 角色个数
     * for(count)
     * {
     * bytes 单个人的详细信息 SingleRelation
     * }
     */
    public static final int S2C_RECOMMEND_FRIENDS_LIST_OK = 8;

    public static ChannelBuffer recommendFriendsListOk() {
        return newDynamicMessage(MODULE_ID, S2C_RECOMMEND_FRIENDS_LIST_OK);
    }

}