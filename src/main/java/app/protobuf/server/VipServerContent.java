// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/vip_server.proto

package app.protobuf.server;

public final class VipServerContent {
  private VipServerContent() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface VipModuleObjMinorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.VipModuleObjMinorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 vipLevel = 1;</code>
     *
     * <pre>
     * vip等级
     * </pre>
     */
    boolean hasVipLevel();
    /**
     * <code>optional int32 vipLevel = 1;</code>
     *
     * <pre>
     * vip等级
     * </pre>
     */
    int getVipLevel();

    /**
     * <code>optional int64 expireTime = 2;</code>
     *
     * <pre>
     * vip 过期时间
     * </pre>
     */
    boolean hasExpireTime();
    /**
     * <code>optional int64 expireTime = 2;</code>
     *
     * <pre>
     * vip 过期时间
     * </pre>
     */
    long getExpireTime();

    /**
     * <code>optional int32 vipExp = 3;</code>
     *
     * <pre>
     * 已获得的vip经验
     * </pre>
     */
    boolean hasVipExp();
    /**
     * <code>optional int32 vipExp = 3;</code>
     *
     * <pre>
     * 已获得的vip经验
     * </pre>
     */
    int getVipExp();

    /**
     * <code>optional int32 tempLevel = 4;</code>
     *
     * <pre>
     * vip体验等级
     * </pre>
     */
    boolean hasTempLevel();
    /**
     * <code>optional int32 tempLevel = 4;</code>
     *
     * <pre>
     * vip体验等级
     * </pre>
     */
    int getTempLevel();

    /**
     * <code>repeated int32 tempVipCollectIds = 5;</code>
     *
     * <pre>
     * vip体验卡领取状态,存vip购买表的id
     * </pre>
     */
    java.util.List<java.lang.Integer> getTempVipCollectIdsList();
    /**
     * <code>repeated int32 tempVipCollectIds = 5;</code>
     *
     * <pre>
     * vip体验卡领取状态,存vip购买表的id
     * </pre>
     */
    int getTempVipCollectIdsCount();
    /**
     * <code>repeated int32 tempVipCollectIds = 5;</code>
     *
     * <pre>
     * vip体验卡领取状态,存vip购买表的id
     * </pre>
     */
    int getTempVipCollectIds(int index);

    /**
     * <code>optional int32 highestVipBuyExp = 6;</code>
     *
     * <pre>
     * 购买的vip卡的最高经验值
     * </pre>
     */
    boolean hasHighestVipBuyExp();
    /**
     * <code>optional int32 highestVipBuyExp = 6;</code>
     *
     * <pre>
     * 购买的vip卡的最高经验值
     * </pre>
     */
    int getHighestVipBuyExp();

    /**
     * <code>optional int32 highestVipBuyDiamond = 7;</code>
     *
     * <pre>
     * 购买的vip卡的最高花费
     * </pre>
     */
    boolean hasHighestVipBuyDiamond();
    /**
     * <code>optional int32 highestVipBuyDiamond = 7;</code>
     *
     * <pre>
     * 购买的vip卡的最高花费
     * </pre>
     */
    int getHighestVipBuyDiamond();

    /**
     * <code>optional int32 costDiamond = 8;</code>
     *
     * <pre>
     * 消耗的钻石，满100后转化为经验值
     * </pre>
     */
    boolean hasCostDiamond();
    /**
     * <code>optional int32 costDiamond = 8;</code>
     *
     * <pre>
     * 消耗的钻石，满100后转化为经验值
     * </pre>
     */
    int getCostDiamond();

    /**
     * <code>optional int32 weeklyPrizeLevel = 9;</code>
     *
     * <pre>
     * 周礼包最大等级,每周重置为0
     * </pre>
     */
    boolean hasWeeklyPrizeLevel();
    /**
     * <code>optional int32 weeklyPrizeLevel = 9;</code>
     *
     * <pre>
     * 周礼包最大等级,每周重置为0
     * </pre>
     */
    int getWeeklyPrizeLevel();

    /**
     * <code>optional int32 oncePrizeCollect = 10;</code>
     *
     * <pre>
     * 一次性礼包领取情况，从低位开始，每位表示对应等级是否已领取 1是领取,0是未领取
     * </pre>
     */
    boolean hasOncePrizeCollect();
    /**
     * <code>optional int32 oncePrizeCollect = 10;</code>
     *
     * <pre>
     * 一次性礼包领取情况，从低位开始，每位表示对应等级是否已领取 1是领取,0是未领取
     * </pre>
     */
    int getOncePrizeCollect();

    /**
     * <code>optional int32 costBindDiamond = 11;</code>
     *
     * <pre>
     * 消耗的绑定钻石，满1000后转化为经验值
     * </pre>
     */
    boolean hasCostBindDiamond();
    /**
     * <code>optional int32 costBindDiamond = 11;</code>
     *
     * <pre>
     * 消耗的绑定钻石，满1000后转化为经验值
     * </pre>
     */
    int getCostBindDiamond();

    /**
     * <code>optional int64 storeExp = 12;</code>
     *
     * <pre>
     * 保存的vip经验
     * </pre>
     */
    boolean hasStoreExp();
    /**
     * <code>optional int64 storeExp = 12;</code>
     *
     * <pre>
     * 保存的vip经验
     * </pre>
     */
    long getStoreExp();

    /**
     * <code>optional int64 tempExpireTime = 13;</code>
     *
     * <pre>
     * 临时卡的vip 过期时间
     * </pre>
     */
    boolean hasTempExpireTime();
    /**
     * <code>optional int64 tempExpireTime = 13;</code>
     *
     * <pre>
     * 临时卡的vip 过期时间
     * </pre>
     */
    long getTempExpireTime();
  }
  /**
   * Protobuf type {@code proto.VipModuleObjMinorProto}
   */
  public static final class VipModuleObjMinorProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.VipModuleObjMinorProto)
      VipModuleObjMinorProtoOrBuilder {
    // Use VipModuleObjMinorProto.newBuilder() to construct.
    private VipModuleObjMinorProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private VipModuleObjMinorProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final VipModuleObjMinorProto defaultInstance;
    public static VipModuleObjMinorProto getDefaultInstance() {
      return defaultInstance;
    }

    public VipModuleObjMinorProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private VipModuleObjMinorProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              vipLevel_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              expireTime_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              vipExp_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              tempLevel_ = input.readInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                tempVipCollectIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              tempVipCollectIds_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                tempVipCollectIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                tempVipCollectIds_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              highestVipBuyExp_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              highestVipBuyDiamond_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              costDiamond_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              weeklyPrizeLevel_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              oncePrizeCollect_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              costBindDiamond_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000400;
              storeExp_ = input.readInt64();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000800;
              tempExpireTime_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          tempVipCollectIds_ = java.util.Collections.unmodifiableList(tempVipCollectIds_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return app.protobuf.server.VipServerContent.internal_static_proto_VipModuleObjMinorProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return app.protobuf.server.VipServerContent.internal_static_proto_VipModuleObjMinorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              app.protobuf.server.VipServerContent.VipModuleObjMinorProto.class, app.protobuf.server.VipServerContent.VipModuleObjMinorProto.Builder.class);
    }

    public static com.google.protobuf.Parser<VipModuleObjMinorProto> PARSER =
        new com.google.protobuf.AbstractParser<VipModuleObjMinorProto>() {
      public VipModuleObjMinorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VipModuleObjMinorProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<VipModuleObjMinorProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int VIPLEVEL_FIELD_NUMBER = 1;
    private int vipLevel_;
    /**
     * <code>optional int32 vipLevel = 1;</code>
     *
     * <pre>
     * vip等级
     * </pre>
     */
    public boolean hasVipLevel() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 vipLevel = 1;</code>
     *
     * <pre>
     * vip等级
     * </pre>
     */
    public int getVipLevel() {
      return vipLevel_;
    }

    public static final int EXPIRETIME_FIELD_NUMBER = 2;
    private long expireTime_;
    /**
     * <code>optional int64 expireTime = 2;</code>
     *
     * <pre>
     * vip 过期时间
     * </pre>
     */
    public boolean hasExpireTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 expireTime = 2;</code>
     *
     * <pre>
     * vip 过期时间
     * </pre>
     */
    public long getExpireTime() {
      return expireTime_;
    }

    public static final int VIPEXP_FIELD_NUMBER = 3;
    private int vipExp_;
    /**
     * <code>optional int32 vipExp = 3;</code>
     *
     * <pre>
     * 已获得的vip经验
     * </pre>
     */
    public boolean hasVipExp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 vipExp = 3;</code>
     *
     * <pre>
     * 已获得的vip经验
     * </pre>
     */
    public int getVipExp() {
      return vipExp_;
    }

    public static final int TEMPLEVEL_FIELD_NUMBER = 4;
    private int tempLevel_;
    /**
     * <code>optional int32 tempLevel = 4;</code>
     *
     * <pre>
     * vip体验等级
     * </pre>
     */
    public boolean hasTempLevel() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 tempLevel = 4;</code>
     *
     * <pre>
     * vip体验等级
     * </pre>
     */
    public int getTempLevel() {
      return tempLevel_;
    }

    public static final int TEMPVIPCOLLECTIDS_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> tempVipCollectIds_;
    /**
     * <code>repeated int32 tempVipCollectIds = 5;</code>
     *
     * <pre>
     * vip体验卡领取状态,存vip购买表的id
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTempVipCollectIdsList() {
      return tempVipCollectIds_;
    }
    /**
     * <code>repeated int32 tempVipCollectIds = 5;</code>
     *
     * <pre>
     * vip体验卡领取状态,存vip购买表的id
     * </pre>
     */
    public int getTempVipCollectIdsCount() {
      return tempVipCollectIds_.size();
    }
    /**
     * <code>repeated int32 tempVipCollectIds = 5;</code>
     *
     * <pre>
     * vip体验卡领取状态,存vip购买表的id
     * </pre>
     */
    public int getTempVipCollectIds(int index) {
      return tempVipCollectIds_.get(index);
    }

    public static final int HIGHESTVIPBUYEXP_FIELD_NUMBER = 6;
    private int highestVipBuyExp_;
    /**
     * <code>optional int32 highestVipBuyExp = 6;</code>
     *
     * <pre>
     * 购买的vip卡的最高经验值
     * </pre>
     */
    public boolean hasHighestVipBuyExp() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 highestVipBuyExp = 6;</code>
     *
     * <pre>
     * 购买的vip卡的最高经验值
     * </pre>
     */
    public int getHighestVipBuyExp() {
      return highestVipBuyExp_;
    }

    public static final int HIGHESTVIPBUYDIAMOND_FIELD_NUMBER = 7;
    private int highestVipBuyDiamond_;
    /**
     * <code>optional int32 highestVipBuyDiamond = 7;</code>
     *
     * <pre>
     * 购买的vip卡的最高花费
     * </pre>
     */
    public boolean hasHighestVipBuyDiamond() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 highestVipBuyDiamond = 7;</code>
     *
     * <pre>
     * 购买的vip卡的最高花费
     * </pre>
     */
    public int getHighestVipBuyDiamond() {
      return highestVipBuyDiamond_;
    }

    public static final int COSTDIAMOND_FIELD_NUMBER = 8;
    private int costDiamond_;
    /**
     * <code>optional int32 costDiamond = 8;</code>
     *
     * <pre>
     * 消耗的钻石，满100后转化为经验值
     * </pre>
     */
    public boolean hasCostDiamond() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 costDiamond = 8;</code>
     *
     * <pre>
     * 消耗的钻石，满100后转化为经验值
     * </pre>
     */
    public int getCostDiamond() {
      return costDiamond_;
    }

    public static final int WEEKLYPRIZELEVEL_FIELD_NUMBER = 9;
    private int weeklyPrizeLevel_;
    /**
     * <code>optional int32 weeklyPrizeLevel = 9;</code>
     *
     * <pre>
     * 周礼包最大等级,每周重置为0
     * </pre>
     */
    public boolean hasWeeklyPrizeLevel() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 weeklyPrizeLevel = 9;</code>
     *
     * <pre>
     * 周礼包最大等级,每周重置为0
     * </pre>
     */
    public int getWeeklyPrizeLevel() {
      return weeklyPrizeLevel_;
    }

    public static final int ONCEPRIZECOLLECT_FIELD_NUMBER = 10;
    private int oncePrizeCollect_;
    /**
     * <code>optional int32 oncePrizeCollect = 10;</code>
     *
     * <pre>
     * 一次性礼包领取情况，从低位开始，每位表示对应等级是否已领取 1是领取,0是未领取
     * </pre>
     */
    public boolean hasOncePrizeCollect() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 oncePrizeCollect = 10;</code>
     *
     * <pre>
     * 一次性礼包领取情况，从低位开始，每位表示对应等级是否已领取 1是领取,0是未领取
     * </pre>
     */
    public int getOncePrizeCollect() {
      return oncePrizeCollect_;
    }

    public static final int COSTBINDDIAMOND_FIELD_NUMBER = 11;
    private int costBindDiamond_;
    /**
     * <code>optional int32 costBindDiamond = 11;</code>
     *
     * <pre>
     * 消耗的绑定钻石，满1000后转化为经验值
     * </pre>
     */
    public boolean hasCostBindDiamond() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 costBindDiamond = 11;</code>
     *
     * <pre>
     * 消耗的绑定钻石，满1000后转化为经验值
     * </pre>
     */
    public int getCostBindDiamond() {
      return costBindDiamond_;
    }

    public static final int STOREEXP_FIELD_NUMBER = 12;
    private long storeExp_;
    /**
     * <code>optional int64 storeExp = 12;</code>
     *
     * <pre>
     * 保存的vip经验
     * </pre>
     */
    public boolean hasStoreExp() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int64 storeExp = 12;</code>
     *
     * <pre>
     * 保存的vip经验
     * </pre>
     */
    public long getStoreExp() {
      return storeExp_;
    }

    public static final int TEMPEXPIRETIME_FIELD_NUMBER = 13;
    private long tempExpireTime_;
    /**
     * <code>optional int64 tempExpireTime = 13;</code>
     *
     * <pre>
     * 临时卡的vip 过期时间
     * </pre>
     */
    public boolean hasTempExpireTime() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int64 tempExpireTime = 13;</code>
     *
     * <pre>
     * 临时卡的vip 过期时间
     * </pre>
     */
    public long getTempExpireTime() {
      return tempExpireTime_;
    }

    private void initFields() {
      vipLevel_ = 0;
      expireTime_ = 0L;
      vipExp_ = 0;
      tempLevel_ = 0;
      tempVipCollectIds_ = java.util.Collections.emptyList();
      highestVipBuyExp_ = 0;
      highestVipBuyDiamond_ = 0;
      costDiamond_ = 0;
      weeklyPrizeLevel_ = 0;
      oncePrizeCollect_ = 0;
      costBindDiamond_ = 0;
      storeExp_ = 0L;
      tempExpireTime_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, vipLevel_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, expireTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, vipExp_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, tempLevel_);
      }
      for (int i = 0; i < tempVipCollectIds_.size(); i++) {
        output.writeInt32(5, tempVipCollectIds_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, highestVipBuyExp_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, highestVipBuyDiamond_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(8, costDiamond_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(9, weeklyPrizeLevel_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(10, oncePrizeCollect_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(11, costBindDiamond_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt64(12, storeExp_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt64(13, tempExpireTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, vipLevel_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, expireTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, vipExp_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, tempLevel_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < tempVipCollectIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(tempVipCollectIds_.get(i));
        }
        size += dataSize;
        size += 1 * getTempVipCollectIdsList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, highestVipBuyExp_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, highestVipBuyDiamond_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, costDiamond_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, weeklyPrizeLevel_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, oncePrizeCollect_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, costBindDiamond_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(12, storeExp_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, tempExpireTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static app.protobuf.server.VipServerContent.VipModuleObjMinorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.server.VipServerContent.VipModuleObjMinorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.server.VipServerContent.VipModuleObjMinorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.server.VipServerContent.VipModuleObjMinorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.server.VipServerContent.VipModuleObjMinorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.server.VipServerContent.VipModuleObjMinorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static app.protobuf.server.VipServerContent.VipModuleObjMinorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static app.protobuf.server.VipServerContent.VipModuleObjMinorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static app.protobuf.server.VipServerContent.VipModuleObjMinorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.server.VipServerContent.VipModuleObjMinorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(app.protobuf.server.VipServerContent.VipModuleObjMinorProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.VipModuleObjMinorProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.VipModuleObjMinorProto)
        app.protobuf.server.VipServerContent.VipModuleObjMinorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return app.protobuf.server.VipServerContent.internal_static_proto_VipModuleObjMinorProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return app.protobuf.server.VipServerContent.internal_static_proto_VipModuleObjMinorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                app.protobuf.server.VipServerContent.VipModuleObjMinorProto.class, app.protobuf.server.VipServerContent.VipModuleObjMinorProto.Builder.class);
      }

      // Construct using app.protobuf.server.VipServerContent.VipModuleObjMinorProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        vipLevel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        expireTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        vipExp_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        tempLevel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        tempVipCollectIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        highestVipBuyExp_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        highestVipBuyDiamond_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        costDiamond_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        weeklyPrizeLevel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        oncePrizeCollect_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        costBindDiamond_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        storeExp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        tempExpireTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return app.protobuf.server.VipServerContent.internal_static_proto_VipModuleObjMinorProto_descriptor;
      }

      public app.protobuf.server.VipServerContent.VipModuleObjMinorProto getDefaultInstanceForType() {
        return app.protobuf.server.VipServerContent.VipModuleObjMinorProto.getDefaultInstance();
      }

      public app.protobuf.server.VipServerContent.VipModuleObjMinorProto build() {
        app.protobuf.server.VipServerContent.VipModuleObjMinorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public app.protobuf.server.VipServerContent.VipModuleObjMinorProto buildPartial() {
        app.protobuf.server.VipServerContent.VipModuleObjMinorProto result = new app.protobuf.server.VipServerContent.VipModuleObjMinorProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.vipLevel_ = vipLevel_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.expireTime_ = expireTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.vipExp_ = vipExp_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.tempLevel_ = tempLevel_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          tempVipCollectIds_ = java.util.Collections.unmodifiableList(tempVipCollectIds_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.tempVipCollectIds_ = tempVipCollectIds_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.highestVipBuyExp_ = highestVipBuyExp_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.highestVipBuyDiamond_ = highestVipBuyDiamond_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.costDiamond_ = costDiamond_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.weeklyPrizeLevel_ = weeklyPrizeLevel_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.oncePrizeCollect_ = oncePrizeCollect_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.costBindDiamond_ = costBindDiamond_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.storeExp_ = storeExp_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.tempExpireTime_ = tempExpireTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof app.protobuf.server.VipServerContent.VipModuleObjMinorProto) {
          return mergeFrom((app.protobuf.server.VipServerContent.VipModuleObjMinorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(app.protobuf.server.VipServerContent.VipModuleObjMinorProto other) {
        if (other == app.protobuf.server.VipServerContent.VipModuleObjMinorProto.getDefaultInstance()) return this;
        if (other.hasVipLevel()) {
          setVipLevel(other.getVipLevel());
        }
        if (other.hasExpireTime()) {
          setExpireTime(other.getExpireTime());
        }
        if (other.hasVipExp()) {
          setVipExp(other.getVipExp());
        }
        if (other.hasTempLevel()) {
          setTempLevel(other.getTempLevel());
        }
        if (!other.tempVipCollectIds_.isEmpty()) {
          if (tempVipCollectIds_.isEmpty()) {
            tempVipCollectIds_ = other.tempVipCollectIds_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureTempVipCollectIdsIsMutable();
            tempVipCollectIds_.addAll(other.tempVipCollectIds_);
          }
          onChanged();
        }
        if (other.hasHighestVipBuyExp()) {
          setHighestVipBuyExp(other.getHighestVipBuyExp());
        }
        if (other.hasHighestVipBuyDiamond()) {
          setHighestVipBuyDiamond(other.getHighestVipBuyDiamond());
        }
        if (other.hasCostDiamond()) {
          setCostDiamond(other.getCostDiamond());
        }
        if (other.hasWeeklyPrizeLevel()) {
          setWeeklyPrizeLevel(other.getWeeklyPrizeLevel());
        }
        if (other.hasOncePrizeCollect()) {
          setOncePrizeCollect(other.getOncePrizeCollect());
        }
        if (other.hasCostBindDiamond()) {
          setCostBindDiamond(other.getCostBindDiamond());
        }
        if (other.hasStoreExp()) {
          setStoreExp(other.getStoreExp());
        }
        if (other.hasTempExpireTime()) {
          setTempExpireTime(other.getTempExpireTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        app.protobuf.server.VipServerContent.VipModuleObjMinorProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (app.protobuf.server.VipServerContent.VipModuleObjMinorProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int vipLevel_ ;
      /**
       * <code>optional int32 vipLevel = 1;</code>
       *
       * <pre>
       * vip等级
       * </pre>
       */
      public boolean hasVipLevel() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 vipLevel = 1;</code>
       *
       * <pre>
       * vip等级
       * </pre>
       */
      public int getVipLevel() {
        return vipLevel_;
      }
      /**
       * <code>optional int32 vipLevel = 1;</code>
       *
       * <pre>
       * vip等级
       * </pre>
       */
      public Builder setVipLevel(int value) {
        bitField0_ |= 0x00000001;
        vipLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 vipLevel = 1;</code>
       *
       * <pre>
       * vip等级
       * </pre>
       */
      public Builder clearVipLevel() {
        bitField0_ = (bitField0_ & ~0x00000001);
        vipLevel_ = 0;
        onChanged();
        return this;
      }

      private long expireTime_ ;
      /**
       * <code>optional int64 expireTime = 2;</code>
       *
       * <pre>
       * vip 过期时间
       * </pre>
       */
      public boolean hasExpireTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 expireTime = 2;</code>
       *
       * <pre>
       * vip 过期时间
       * </pre>
       */
      public long getExpireTime() {
        return expireTime_;
      }
      /**
       * <code>optional int64 expireTime = 2;</code>
       *
       * <pre>
       * vip 过期时间
       * </pre>
       */
      public Builder setExpireTime(long value) {
        bitField0_ |= 0x00000002;
        expireTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 expireTime = 2;</code>
       *
       * <pre>
       * vip 过期时间
       * </pre>
       */
      public Builder clearExpireTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        expireTime_ = 0L;
        onChanged();
        return this;
      }

      private int vipExp_ ;
      /**
       * <code>optional int32 vipExp = 3;</code>
       *
       * <pre>
       * 已获得的vip经验
       * </pre>
       */
      public boolean hasVipExp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 vipExp = 3;</code>
       *
       * <pre>
       * 已获得的vip经验
       * </pre>
       */
      public int getVipExp() {
        return vipExp_;
      }
      /**
       * <code>optional int32 vipExp = 3;</code>
       *
       * <pre>
       * 已获得的vip经验
       * </pre>
       */
      public Builder setVipExp(int value) {
        bitField0_ |= 0x00000004;
        vipExp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 vipExp = 3;</code>
       *
       * <pre>
       * 已获得的vip经验
       * </pre>
       */
      public Builder clearVipExp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        vipExp_ = 0;
        onChanged();
        return this;
      }

      private int tempLevel_ ;
      /**
       * <code>optional int32 tempLevel = 4;</code>
       *
       * <pre>
       * vip体验等级
       * </pre>
       */
      public boolean hasTempLevel() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 tempLevel = 4;</code>
       *
       * <pre>
       * vip体验等级
       * </pre>
       */
      public int getTempLevel() {
        return tempLevel_;
      }
      /**
       * <code>optional int32 tempLevel = 4;</code>
       *
       * <pre>
       * vip体验等级
       * </pre>
       */
      public Builder setTempLevel(int value) {
        bitField0_ |= 0x00000008;
        tempLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tempLevel = 4;</code>
       *
       * <pre>
       * vip体验等级
       * </pre>
       */
      public Builder clearTempLevel() {
        bitField0_ = (bitField0_ & ~0x00000008);
        tempLevel_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> tempVipCollectIds_ = java.util.Collections.emptyList();
      private void ensureTempVipCollectIdsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          tempVipCollectIds_ = new java.util.ArrayList<java.lang.Integer>(tempVipCollectIds_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 tempVipCollectIds = 5;</code>
       *
       * <pre>
       * vip体验卡领取状态,存vip购买表的id
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTempVipCollectIdsList() {
        return java.util.Collections.unmodifiableList(tempVipCollectIds_);
      }
      /**
       * <code>repeated int32 tempVipCollectIds = 5;</code>
       *
       * <pre>
       * vip体验卡领取状态,存vip购买表的id
       * </pre>
       */
      public int getTempVipCollectIdsCount() {
        return tempVipCollectIds_.size();
      }
      /**
       * <code>repeated int32 tempVipCollectIds = 5;</code>
       *
       * <pre>
       * vip体验卡领取状态,存vip购买表的id
       * </pre>
       */
      public int getTempVipCollectIds(int index) {
        return tempVipCollectIds_.get(index);
      }
      /**
       * <code>repeated int32 tempVipCollectIds = 5;</code>
       *
       * <pre>
       * vip体验卡领取状态,存vip购买表的id
       * </pre>
       */
      public Builder setTempVipCollectIds(
          int index, int value) {
        ensureTempVipCollectIdsIsMutable();
        tempVipCollectIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 tempVipCollectIds = 5;</code>
       *
       * <pre>
       * vip体验卡领取状态,存vip购买表的id
       * </pre>
       */
      public Builder addTempVipCollectIds(int value) {
        ensureTempVipCollectIdsIsMutable();
        tempVipCollectIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 tempVipCollectIds = 5;</code>
       *
       * <pre>
       * vip体验卡领取状态,存vip购买表的id
       * </pre>
       */
      public Builder addAllTempVipCollectIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTempVipCollectIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tempVipCollectIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 tempVipCollectIds = 5;</code>
       *
       * <pre>
       * vip体验卡领取状态,存vip购买表的id
       * </pre>
       */
      public Builder clearTempVipCollectIds() {
        tempVipCollectIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private int highestVipBuyExp_ ;
      /**
       * <code>optional int32 highestVipBuyExp = 6;</code>
       *
       * <pre>
       * 购买的vip卡的最高经验值
       * </pre>
       */
      public boolean hasHighestVipBuyExp() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 highestVipBuyExp = 6;</code>
       *
       * <pre>
       * 购买的vip卡的最高经验值
       * </pre>
       */
      public int getHighestVipBuyExp() {
        return highestVipBuyExp_;
      }
      /**
       * <code>optional int32 highestVipBuyExp = 6;</code>
       *
       * <pre>
       * 购买的vip卡的最高经验值
       * </pre>
       */
      public Builder setHighestVipBuyExp(int value) {
        bitField0_ |= 0x00000020;
        highestVipBuyExp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 highestVipBuyExp = 6;</code>
       *
       * <pre>
       * 购买的vip卡的最高经验值
       * </pre>
       */
      public Builder clearHighestVipBuyExp() {
        bitField0_ = (bitField0_ & ~0x00000020);
        highestVipBuyExp_ = 0;
        onChanged();
        return this;
      }

      private int highestVipBuyDiamond_ ;
      /**
       * <code>optional int32 highestVipBuyDiamond = 7;</code>
       *
       * <pre>
       * 购买的vip卡的最高花费
       * </pre>
       */
      public boolean hasHighestVipBuyDiamond() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 highestVipBuyDiamond = 7;</code>
       *
       * <pre>
       * 购买的vip卡的最高花费
       * </pre>
       */
      public int getHighestVipBuyDiamond() {
        return highestVipBuyDiamond_;
      }
      /**
       * <code>optional int32 highestVipBuyDiamond = 7;</code>
       *
       * <pre>
       * 购买的vip卡的最高花费
       * </pre>
       */
      public Builder setHighestVipBuyDiamond(int value) {
        bitField0_ |= 0x00000040;
        highestVipBuyDiamond_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 highestVipBuyDiamond = 7;</code>
       *
       * <pre>
       * 购买的vip卡的最高花费
       * </pre>
       */
      public Builder clearHighestVipBuyDiamond() {
        bitField0_ = (bitField0_ & ~0x00000040);
        highestVipBuyDiamond_ = 0;
        onChanged();
        return this;
      }

      private int costDiamond_ ;
      /**
       * <code>optional int32 costDiamond = 8;</code>
       *
       * <pre>
       * 消耗的钻石，满100后转化为经验值
       * </pre>
       */
      public boolean hasCostDiamond() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 costDiamond = 8;</code>
       *
       * <pre>
       * 消耗的钻石，满100后转化为经验值
       * </pre>
       */
      public int getCostDiamond() {
        return costDiamond_;
      }
      /**
       * <code>optional int32 costDiamond = 8;</code>
       *
       * <pre>
       * 消耗的钻石，满100后转化为经验值
       * </pre>
       */
      public Builder setCostDiamond(int value) {
        bitField0_ |= 0x00000080;
        costDiamond_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 costDiamond = 8;</code>
       *
       * <pre>
       * 消耗的钻石，满100后转化为经验值
       * </pre>
       */
      public Builder clearCostDiamond() {
        bitField0_ = (bitField0_ & ~0x00000080);
        costDiamond_ = 0;
        onChanged();
        return this;
      }

      private int weeklyPrizeLevel_ ;
      /**
       * <code>optional int32 weeklyPrizeLevel = 9;</code>
       *
       * <pre>
       * 周礼包最大等级,每周重置为0
       * </pre>
       */
      public boolean hasWeeklyPrizeLevel() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 weeklyPrizeLevel = 9;</code>
       *
       * <pre>
       * 周礼包最大等级,每周重置为0
       * </pre>
       */
      public int getWeeklyPrizeLevel() {
        return weeklyPrizeLevel_;
      }
      /**
       * <code>optional int32 weeklyPrizeLevel = 9;</code>
       *
       * <pre>
       * 周礼包最大等级,每周重置为0
       * </pre>
       */
      public Builder setWeeklyPrizeLevel(int value) {
        bitField0_ |= 0x00000100;
        weeklyPrizeLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 weeklyPrizeLevel = 9;</code>
       *
       * <pre>
       * 周礼包最大等级,每周重置为0
       * </pre>
       */
      public Builder clearWeeklyPrizeLevel() {
        bitField0_ = (bitField0_ & ~0x00000100);
        weeklyPrizeLevel_ = 0;
        onChanged();
        return this;
      }

      private int oncePrizeCollect_ ;
      /**
       * <code>optional int32 oncePrizeCollect = 10;</code>
       *
       * <pre>
       * 一次性礼包领取情况，从低位开始，每位表示对应等级是否已领取 1是领取,0是未领取
       * </pre>
       */
      public boolean hasOncePrizeCollect() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 oncePrizeCollect = 10;</code>
       *
       * <pre>
       * 一次性礼包领取情况，从低位开始，每位表示对应等级是否已领取 1是领取,0是未领取
       * </pre>
       */
      public int getOncePrizeCollect() {
        return oncePrizeCollect_;
      }
      /**
       * <code>optional int32 oncePrizeCollect = 10;</code>
       *
       * <pre>
       * 一次性礼包领取情况，从低位开始，每位表示对应等级是否已领取 1是领取,0是未领取
       * </pre>
       */
      public Builder setOncePrizeCollect(int value) {
        bitField0_ |= 0x00000200;
        oncePrizeCollect_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 oncePrizeCollect = 10;</code>
       *
       * <pre>
       * 一次性礼包领取情况，从低位开始，每位表示对应等级是否已领取 1是领取,0是未领取
       * </pre>
       */
      public Builder clearOncePrizeCollect() {
        bitField0_ = (bitField0_ & ~0x00000200);
        oncePrizeCollect_ = 0;
        onChanged();
        return this;
      }

      private int costBindDiamond_ ;
      /**
       * <code>optional int32 costBindDiamond = 11;</code>
       *
       * <pre>
       * 消耗的绑定钻石，满1000后转化为经验值
       * </pre>
       */
      public boolean hasCostBindDiamond() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 costBindDiamond = 11;</code>
       *
       * <pre>
       * 消耗的绑定钻石，满1000后转化为经验值
       * </pre>
       */
      public int getCostBindDiamond() {
        return costBindDiamond_;
      }
      /**
       * <code>optional int32 costBindDiamond = 11;</code>
       *
       * <pre>
       * 消耗的绑定钻石，满1000后转化为经验值
       * </pre>
       */
      public Builder setCostBindDiamond(int value) {
        bitField0_ |= 0x00000400;
        costBindDiamond_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 costBindDiamond = 11;</code>
       *
       * <pre>
       * 消耗的绑定钻石，满1000后转化为经验值
       * </pre>
       */
      public Builder clearCostBindDiamond() {
        bitField0_ = (bitField0_ & ~0x00000400);
        costBindDiamond_ = 0;
        onChanged();
        return this;
      }

      private long storeExp_ ;
      /**
       * <code>optional int64 storeExp = 12;</code>
       *
       * <pre>
       * 保存的vip经验
       * </pre>
       */
      public boolean hasStoreExp() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int64 storeExp = 12;</code>
       *
       * <pre>
       * 保存的vip经验
       * </pre>
       */
      public long getStoreExp() {
        return storeExp_;
      }
      /**
       * <code>optional int64 storeExp = 12;</code>
       *
       * <pre>
       * 保存的vip经验
       * </pre>
       */
      public Builder setStoreExp(long value) {
        bitField0_ |= 0x00000800;
        storeExp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 storeExp = 12;</code>
       *
       * <pre>
       * 保存的vip经验
       * </pre>
       */
      public Builder clearStoreExp() {
        bitField0_ = (bitField0_ & ~0x00000800);
        storeExp_ = 0L;
        onChanged();
        return this;
      }

      private long tempExpireTime_ ;
      /**
       * <code>optional int64 tempExpireTime = 13;</code>
       *
       * <pre>
       * 临时卡的vip 过期时间
       * </pre>
       */
      public boolean hasTempExpireTime() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int64 tempExpireTime = 13;</code>
       *
       * <pre>
       * 临时卡的vip 过期时间
       * </pre>
       */
      public long getTempExpireTime() {
        return tempExpireTime_;
      }
      /**
       * <code>optional int64 tempExpireTime = 13;</code>
       *
       * <pre>
       * 临时卡的vip 过期时间
       * </pre>
       */
      public Builder setTempExpireTime(long value) {
        bitField0_ |= 0x00001000;
        tempExpireTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 tempExpireTime = 13;</code>
       *
       * <pre>
       * 临时卡的vip 过期时间
       * </pre>
       */
      public Builder clearTempExpireTime() {
        bitField0_ = (bitField0_ & ~0x00001000);
        tempExpireTime_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.VipModuleObjMinorProto)
    }

    static {
      defaultInstance = new VipModuleObjMinorProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.VipModuleObjMinorProto)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_VipModuleObjMinorProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_VipModuleObjMinorProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\027server/vip_server.proto\022\005proto\"\300\002\n\026Vip" +
      "ModuleObjMinorProto\022\020\n\010vipLevel\030\001 \001(\005\022\022\n" +
      "\nexpireTime\030\002 \001(\003\022\016\n\006vipExp\030\003 \001(\005\022\021\n\ttem" +
      "pLevel\030\004 \001(\005\022\031\n\021tempVipCollectIds\030\005 \003(\005\022" +
      "\030\n\020highestVipBuyExp\030\006 \001(\005\022\034\n\024highestVipB" +
      "uyDiamond\030\007 \001(\005\022\023\n\013costDiamond\030\010 \001(\005\022\030\n\020" +
      "weeklyPrizeLevel\030\t \001(\005\022\030\n\020oncePrizeColle" +
      "ct\030\n \001(\005\022\027\n\017costBindDiamond\030\013 \001(\005\022\020\n\010sto" +
      "reExp\030\014 \001(\003\022\026\n\016tempExpireTime\030\r \001(\003B)\n\023a" +
      "pp.protobuf.serverB\020VipServerContentH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_proto_VipModuleObjMinorProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_proto_VipModuleObjMinorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_VipModuleObjMinorProto_descriptor,
        new java.lang.String[] { "VipLevel", "ExpireTime", "VipExp", "TempLevel", "TempVipCollectIds", "HighestVipBuyExp", "HighestVipBuyDiamond", "CostDiamond", "WeeklyPrizeLevel", "OncePrizeCollect", "CostBindDiamond", "StoreExp", "TempExpireTime", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
