// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/achievement_server.proto

package app.protobuf.server;

public final class AchievementServerContent {
  private AchievementServerContent() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface AchievementModuleObjMinorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.AchievementModuleObjMinorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
     *
     * <pre>
     *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
     * </pre>
     */
    boolean hasNonLineAchievedId();
    /**
     * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
     *
     * <pre>
     *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
     * </pre>
     */
    app.protobuf.client.UtilContent.BoolArrayProto getNonLineAchievedId();
    /**
     * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
     *
     * <pre>
     *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
     * </pre>
     */
    app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder getNonLineAchievedIdOrBuilder();

    /**
     * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
     * </pre>
     */
    java.util.List<app.protobuf.client.UtilContent.StringInt32PairProto> 
        getLineAchievementGroupCompleteInfoList();
    /**
     * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
     * </pre>
     */
    app.protobuf.client.UtilContent.StringInt32PairProto getLineAchievementGroupCompleteInfo(int index);
    /**
     * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
     * </pre>
     */
    int getLineAchievementGroupCompleteInfoCount();
    /**
     * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
     * </pre>
     */
    java.util.List<? extends app.protobuf.client.UtilContent.StringInt32PairProtoOrBuilder> 
        getLineAchievementGroupCompleteInfoOrBuilderList();
    /**
     * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
     * </pre>
     */
    app.protobuf.client.UtilContent.StringInt32PairProtoOrBuilder getLineAchievementGroupCompleteInfoOrBuilder(
        int index);

    /**
     * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    java.util.List<app.protobuf.client.UtilContent.StringInt64PairProto> 
        getLineAchievementGroupProgressInfoList();
    /**
     * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    app.protobuf.client.UtilContent.StringInt64PairProto getLineAchievementGroupProgressInfo(int index);
    /**
     * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    int getLineAchievementGroupProgressInfoCount();
    /**
     * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    java.util.List<? extends app.protobuf.client.UtilContent.StringInt64PairProtoOrBuilder> 
        getLineAchievementGroupProgressInfoOrBuilderList();
    /**
     * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    app.protobuf.client.UtilContent.StringInt64PairProtoOrBuilder getLineAchievementGroupProgressInfoOrBuilder(
        int index);

    /**
     * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
     *
     * <pre>
     *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    java.util.List<app.protobuf.client.UtilContent.Int32Int64PairProto> 
        getAchievementProgressInfoList();
    /**
     * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
     *
     * <pre>
     *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    app.protobuf.client.UtilContent.Int32Int64PairProto getAchievementProgressInfo(int index);
    /**
     * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
     *
     * <pre>
     *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    int getAchievementProgressInfoCount();
    /**
     * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
     *
     * <pre>
     *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    java.util.List<? extends app.protobuf.client.UtilContent.Int32Int64PairProtoOrBuilder> 
        getAchievementProgressInfoOrBuilderList();
    /**
     * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
     *
     * <pre>
     *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    app.protobuf.client.UtilContent.Int32Int64PairProtoOrBuilder getAchievementProgressInfoOrBuilder(
        int index);

    /**
     * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
     *
     * <pre>
     * 已经领取的成就奖励
     * </pre>
     */
    boolean hasGetPrizeAchievedId();
    /**
     * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
     *
     * <pre>
     * 已经领取的成就奖励
     * </pre>
     */
    app.protobuf.client.UtilContent.BoolArrayProto getGetPrizeAchievedId();
    /**
     * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
     *
     * <pre>
     * 已经领取的成就奖励
     * </pre>
     */
    app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder getGetPrizeAchievedIdOrBuilder();

    /**
     * <code>repeated int32 get_prize_achieved_group = 4;</code>
     *
     * <pre>
     * 已经领取的成就积分奖励
     * </pre>
     */
    java.util.List<java.lang.Integer> getGetPrizeAchievedGroupList();
    /**
     * <code>repeated int32 get_prize_achieved_group = 4;</code>
     *
     * <pre>
     * 已经领取的成就积分奖励
     * </pre>
     */
    int getGetPrizeAchievedGroupCount();
    /**
     * <code>repeated int32 get_prize_achieved_group = 4;</code>
     *
     * <pre>
     * 已经领取的成就积分奖励
     * </pre>
     */
    int getGetPrizeAchievedGroup(int index);

    /**
     * <code>optional int32 scoreReachedTime = 8;</code>
     *
     * <pre>
     * 成就积分更新的时间，用来做排行榜
     * </pre>
     */
    boolean hasScoreReachedTime();
    /**
     * <code>optional int32 scoreReachedTime = 8;</code>
     *
     * <pre>
     * 成就积分更新的时间，用来做排行榜
     * </pre>
     */
    int getScoreReachedTime();
  }
  /**
   * Protobuf type {@code proto.AchievementModuleObjMinorProto}
   *
   * <pre>
   * 
   * </pre>
   */
  public static final class AchievementModuleObjMinorProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.AchievementModuleObjMinorProto)
      AchievementModuleObjMinorProtoOrBuilder {
    // Use AchievementModuleObjMinorProto.newBuilder() to construct.
    private AchievementModuleObjMinorProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AchievementModuleObjMinorProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AchievementModuleObjMinorProto defaultInstance;
    public static AchievementModuleObjMinorProto getDefaultInstance() {
      return defaultInstance;
    }

    public AchievementModuleObjMinorProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AchievementModuleObjMinorProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              app.protobuf.client.UtilContent.BoolArrayProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = nonLineAchievedId_.toBuilder();
              }
              nonLineAchievedId_ = input.readMessage(app.protobuf.client.UtilContent.BoolArrayProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(nonLineAchievedId_);
                nonLineAchievedId_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 26: {
              app.protobuf.client.UtilContent.BoolArrayProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = getPrizeAchievedId_.toBuilder();
              }
              getPrizeAchievedId_ = input.readMessage(app.protobuf.client.UtilContent.BoolArrayProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getPrizeAchievedId_);
                getPrizeAchievedId_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                getPrizeAchievedGroup_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              getPrizeAchievedGroup_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                getPrizeAchievedGroup_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                getPrizeAchievedGroup_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                lineAchievementGroupCompleteInfo_ = new java.util.ArrayList<app.protobuf.client.UtilContent.StringInt32PairProto>();
                mutable_bitField0_ |= 0x00000002;
              }
              lineAchievementGroupCompleteInfo_.add(input.readMessage(app.protobuf.client.UtilContent.StringInt32PairProto.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                lineAchievementGroupProgressInfo_ = new java.util.ArrayList<app.protobuf.client.UtilContent.StringInt64PairProto>();
                mutable_bitField0_ |= 0x00000004;
              }
              lineAchievementGroupProgressInfo_.add(input.readMessage(app.protobuf.client.UtilContent.StringInt64PairProto.PARSER, extensionRegistry));
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                achievementProgressInfo_ = new java.util.ArrayList<app.protobuf.client.UtilContent.Int32Int64PairProto>();
                mutable_bitField0_ |= 0x00000008;
              }
              achievementProgressInfo_.add(input.readMessage(app.protobuf.client.UtilContent.Int32Int64PairProto.PARSER, extensionRegistry));
              break;
            }
            case 64: {
              bitField0_ |= 0x00000004;
              scoreReachedTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          getPrizeAchievedGroup_ = java.util.Collections.unmodifiableList(getPrizeAchievedGroup_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          lineAchievementGroupCompleteInfo_ = java.util.Collections.unmodifiableList(lineAchievementGroupCompleteInfo_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          lineAchievementGroupProgressInfo_ = java.util.Collections.unmodifiableList(lineAchievementGroupProgressInfo_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          achievementProgressInfo_ = java.util.Collections.unmodifiableList(achievementProgressInfo_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return app.protobuf.server.AchievementServerContent.internal_static_proto_AchievementModuleObjMinorProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return app.protobuf.server.AchievementServerContent.internal_static_proto_AchievementModuleObjMinorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto.class, app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto.Builder.class);
    }

    public static com.google.protobuf.Parser<AchievementModuleObjMinorProto> PARSER =
        new com.google.protobuf.AbstractParser<AchievementModuleObjMinorProto>() {
      public AchievementModuleObjMinorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AchievementModuleObjMinorProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AchievementModuleObjMinorProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NONLINEACHIEVEDID_FIELD_NUMBER = 1;
    private app.protobuf.client.UtilContent.BoolArrayProto nonLineAchievedId_;
    /**
     * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
     *
     * <pre>
     *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
     * </pre>
     */
    public boolean hasNonLineAchievedId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
     *
     * <pre>
     *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
     * </pre>
     */
    public app.protobuf.client.UtilContent.BoolArrayProto getNonLineAchievedId() {
      return nonLineAchievedId_;
    }
    /**
     * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
     *
     * <pre>
     *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
     * </pre>
     */
    public app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder getNonLineAchievedIdOrBuilder() {
      return nonLineAchievedId_;
    }

    public static final int LINEACHIEVEMENTGROUPCOMPLETEINFO_FIELD_NUMBER = 5;
    private java.util.List<app.protobuf.client.UtilContent.StringInt32PairProto> lineAchievementGroupCompleteInfo_;
    /**
     * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
     * </pre>
     */
    public java.util.List<app.protobuf.client.UtilContent.StringInt32PairProto> getLineAchievementGroupCompleteInfoList() {
      return lineAchievementGroupCompleteInfo_;
    }
    /**
     * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
     * </pre>
     */
    public java.util.List<? extends app.protobuf.client.UtilContent.StringInt32PairProtoOrBuilder> 
        getLineAchievementGroupCompleteInfoOrBuilderList() {
      return lineAchievementGroupCompleteInfo_;
    }
    /**
     * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
     * </pre>
     */
    public int getLineAchievementGroupCompleteInfoCount() {
      return lineAchievementGroupCompleteInfo_.size();
    }
    /**
     * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
     * </pre>
     */
    public app.protobuf.client.UtilContent.StringInt32PairProto getLineAchievementGroupCompleteInfo(int index) {
      return lineAchievementGroupCompleteInfo_.get(index);
    }
    /**
     * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
     * </pre>
     */
    public app.protobuf.client.UtilContent.StringInt32PairProtoOrBuilder getLineAchievementGroupCompleteInfoOrBuilder(
        int index) {
      return lineAchievementGroupCompleteInfo_.get(index);
    }

    public static final int LINEACHIEVEMENTGROUPPROGRESSINFO_FIELD_NUMBER = 6;
    private java.util.List<app.protobuf.client.UtilContent.StringInt64PairProto> lineAchievementGroupProgressInfo_;
    /**
     * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    public java.util.List<app.protobuf.client.UtilContent.StringInt64PairProto> getLineAchievementGroupProgressInfoList() {
      return lineAchievementGroupProgressInfo_;
    }
    /**
     * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    public java.util.List<? extends app.protobuf.client.UtilContent.StringInt64PairProtoOrBuilder> 
        getLineAchievementGroupProgressInfoOrBuilderList() {
      return lineAchievementGroupProgressInfo_;
    }
    /**
     * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    public int getLineAchievementGroupProgressInfoCount() {
      return lineAchievementGroupProgressInfo_.size();
    }
    /**
     * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    public app.protobuf.client.UtilContent.StringInt64PairProto getLineAchievementGroupProgressInfo(int index) {
      return lineAchievementGroupProgressInfo_.get(index);
    }
    /**
     * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
     *
     * <pre>
     *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    public app.protobuf.client.UtilContent.StringInt64PairProtoOrBuilder getLineAchievementGroupProgressInfoOrBuilder(
        int index) {
      return lineAchievementGroupProgressInfo_.get(index);
    }

    public static final int ACHIEVEMENTPROGRESSINFO_FIELD_NUMBER = 7;
    private java.util.List<app.protobuf.client.UtilContent.Int32Int64PairProto> achievementProgressInfo_;
    /**
     * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
     *
     * <pre>
     *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    public java.util.List<app.protobuf.client.UtilContent.Int32Int64PairProto> getAchievementProgressInfoList() {
      return achievementProgressInfo_;
    }
    /**
     * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
     *
     * <pre>
     *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    public java.util.List<? extends app.protobuf.client.UtilContent.Int32Int64PairProtoOrBuilder> 
        getAchievementProgressInfoOrBuilderList() {
      return achievementProgressInfo_;
    }
    /**
     * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
     *
     * <pre>
     *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    public int getAchievementProgressInfoCount() {
      return achievementProgressInfo_.size();
    }
    /**
     * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
     *
     * <pre>
     *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    public app.protobuf.client.UtilContent.Int32Int64PairProto getAchievementProgressInfo(int index) {
      return achievementProgressInfo_.get(index);
    }
    /**
     * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
     *
     * <pre>
     *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
     * </pre>
     */
    public app.protobuf.client.UtilContent.Int32Int64PairProtoOrBuilder getAchievementProgressInfoOrBuilder(
        int index) {
      return achievementProgressInfo_.get(index);
    }

    public static final int GET_PRIZE_ACHIEVED_ID_FIELD_NUMBER = 3;
    private app.protobuf.client.UtilContent.BoolArrayProto getPrizeAchievedId_;
    /**
     * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
     *
     * <pre>
     * 已经领取的成就奖励
     * </pre>
     */
    public boolean hasGetPrizeAchievedId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
     *
     * <pre>
     * 已经领取的成就奖励
     * </pre>
     */
    public app.protobuf.client.UtilContent.BoolArrayProto getGetPrizeAchievedId() {
      return getPrizeAchievedId_;
    }
    /**
     * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
     *
     * <pre>
     * 已经领取的成就奖励
     * </pre>
     */
    public app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder getGetPrizeAchievedIdOrBuilder() {
      return getPrizeAchievedId_;
    }

    public static final int GET_PRIZE_ACHIEVED_GROUP_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> getPrizeAchievedGroup_;
    /**
     * <code>repeated int32 get_prize_achieved_group = 4;</code>
     *
     * <pre>
     * 已经领取的成就积分奖励
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getGetPrizeAchievedGroupList() {
      return getPrizeAchievedGroup_;
    }
    /**
     * <code>repeated int32 get_prize_achieved_group = 4;</code>
     *
     * <pre>
     * 已经领取的成就积分奖励
     * </pre>
     */
    public int getGetPrizeAchievedGroupCount() {
      return getPrizeAchievedGroup_.size();
    }
    /**
     * <code>repeated int32 get_prize_achieved_group = 4;</code>
     *
     * <pre>
     * 已经领取的成就积分奖励
     * </pre>
     */
    public int getGetPrizeAchievedGroup(int index) {
      return getPrizeAchievedGroup_.get(index);
    }

    public static final int SCOREREACHEDTIME_FIELD_NUMBER = 8;
    private int scoreReachedTime_;
    /**
     * <code>optional int32 scoreReachedTime = 8;</code>
     *
     * <pre>
     * 成就积分更新的时间，用来做排行榜
     * </pre>
     */
    public boolean hasScoreReachedTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 scoreReachedTime = 8;</code>
     *
     * <pre>
     * 成就积分更新的时间，用来做排行榜
     * </pre>
     */
    public int getScoreReachedTime() {
      return scoreReachedTime_;
    }

    private void initFields() {
      nonLineAchievedId_ = app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance();
      lineAchievementGroupCompleteInfo_ = java.util.Collections.emptyList();
      lineAchievementGroupProgressInfo_ = java.util.Collections.emptyList();
      achievementProgressInfo_ = java.util.Collections.emptyList();
      getPrizeAchievedId_ = app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance();
      getPrizeAchievedGroup_ = java.util.Collections.emptyList();
      scoreReachedTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, nonLineAchievedId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, getPrizeAchievedId_);
      }
      for (int i = 0; i < getPrizeAchievedGroup_.size(); i++) {
        output.writeInt32(4, getPrizeAchievedGroup_.get(i));
      }
      for (int i = 0; i < lineAchievementGroupCompleteInfo_.size(); i++) {
        output.writeMessage(5, lineAchievementGroupCompleteInfo_.get(i));
      }
      for (int i = 0; i < lineAchievementGroupProgressInfo_.size(); i++) {
        output.writeMessage(6, lineAchievementGroupProgressInfo_.get(i));
      }
      for (int i = 0; i < achievementProgressInfo_.size(); i++) {
        output.writeMessage(7, achievementProgressInfo_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(8, scoreReachedTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, nonLineAchievedId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getPrizeAchievedId_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < getPrizeAchievedGroup_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(getPrizeAchievedGroup_.get(i));
        }
        size += dataSize;
        size += 1 * getGetPrizeAchievedGroupList().size();
      }
      for (int i = 0; i < lineAchievementGroupCompleteInfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, lineAchievementGroupCompleteInfo_.get(i));
      }
      for (int i = 0; i < lineAchievementGroupProgressInfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, lineAchievementGroupProgressInfo_.get(i));
      }
      for (int i = 0; i < achievementProgressInfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, achievementProgressInfo_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, scoreReachedTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.AchievementModuleObjMinorProto}
     *
     * <pre>
     * 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.AchievementModuleObjMinorProto)
        app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return app.protobuf.server.AchievementServerContent.internal_static_proto_AchievementModuleObjMinorProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return app.protobuf.server.AchievementServerContent.internal_static_proto_AchievementModuleObjMinorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto.class, app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto.Builder.class);
      }

      // Construct using app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getNonLineAchievedIdFieldBuilder();
          getLineAchievementGroupCompleteInfoFieldBuilder();
          getLineAchievementGroupProgressInfoFieldBuilder();
          getAchievementProgressInfoFieldBuilder();
          getGetPrizeAchievedIdFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (nonLineAchievedIdBuilder_ == null) {
          nonLineAchievedId_ = app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance();
        } else {
          nonLineAchievedIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          lineAchievementGroupCompleteInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          lineAchievementGroupCompleteInfoBuilder_.clear();
        }
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          lineAchievementGroupProgressInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          lineAchievementGroupProgressInfoBuilder_.clear();
        }
        if (achievementProgressInfoBuilder_ == null) {
          achievementProgressInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          achievementProgressInfoBuilder_.clear();
        }
        if (getPrizeAchievedIdBuilder_ == null) {
          getPrizeAchievedId_ = app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance();
        } else {
          getPrizeAchievedIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        getPrizeAchievedGroup_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        scoreReachedTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return app.protobuf.server.AchievementServerContent.internal_static_proto_AchievementModuleObjMinorProto_descriptor;
      }

      public app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto getDefaultInstanceForType() {
        return app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto.getDefaultInstance();
      }

      public app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto build() {
        app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto buildPartial() {
        app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto result = new app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (nonLineAchievedIdBuilder_ == null) {
          result.nonLineAchievedId_ = nonLineAchievedId_;
        } else {
          result.nonLineAchievedId_ = nonLineAchievedIdBuilder_.build();
        }
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            lineAchievementGroupCompleteInfo_ = java.util.Collections.unmodifiableList(lineAchievementGroupCompleteInfo_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.lineAchievementGroupCompleteInfo_ = lineAchievementGroupCompleteInfo_;
        } else {
          result.lineAchievementGroupCompleteInfo_ = lineAchievementGroupCompleteInfoBuilder_.build();
        }
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            lineAchievementGroupProgressInfo_ = java.util.Collections.unmodifiableList(lineAchievementGroupProgressInfo_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.lineAchievementGroupProgressInfo_ = lineAchievementGroupProgressInfo_;
        } else {
          result.lineAchievementGroupProgressInfo_ = lineAchievementGroupProgressInfoBuilder_.build();
        }
        if (achievementProgressInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            achievementProgressInfo_ = java.util.Collections.unmodifiableList(achievementProgressInfo_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.achievementProgressInfo_ = achievementProgressInfo_;
        } else {
          result.achievementProgressInfo_ = achievementProgressInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        if (getPrizeAchievedIdBuilder_ == null) {
          result.getPrizeAchievedId_ = getPrizeAchievedId_;
        } else {
          result.getPrizeAchievedId_ = getPrizeAchievedIdBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          getPrizeAchievedGroup_ = java.util.Collections.unmodifiableList(getPrizeAchievedGroup_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.getPrizeAchievedGroup_ = getPrizeAchievedGroup_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000004;
        }
        result.scoreReachedTime_ = scoreReachedTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto) {
          return mergeFrom((app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto other) {
        if (other == app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto.getDefaultInstance()) return this;
        if (other.hasNonLineAchievedId()) {
          mergeNonLineAchievedId(other.getNonLineAchievedId());
        }
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          if (!other.lineAchievementGroupCompleteInfo_.isEmpty()) {
            if (lineAchievementGroupCompleteInfo_.isEmpty()) {
              lineAchievementGroupCompleteInfo_ = other.lineAchievementGroupCompleteInfo_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureLineAchievementGroupCompleteInfoIsMutable();
              lineAchievementGroupCompleteInfo_.addAll(other.lineAchievementGroupCompleteInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.lineAchievementGroupCompleteInfo_.isEmpty()) {
            if (lineAchievementGroupCompleteInfoBuilder_.isEmpty()) {
              lineAchievementGroupCompleteInfoBuilder_.dispose();
              lineAchievementGroupCompleteInfoBuilder_ = null;
              lineAchievementGroupCompleteInfo_ = other.lineAchievementGroupCompleteInfo_;
              bitField0_ = (bitField0_ & ~0x00000002);
              lineAchievementGroupCompleteInfoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLineAchievementGroupCompleteInfoFieldBuilder() : null;
            } else {
              lineAchievementGroupCompleteInfoBuilder_.addAllMessages(other.lineAchievementGroupCompleteInfo_);
            }
          }
        }
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          if (!other.lineAchievementGroupProgressInfo_.isEmpty()) {
            if (lineAchievementGroupProgressInfo_.isEmpty()) {
              lineAchievementGroupProgressInfo_ = other.lineAchievementGroupProgressInfo_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureLineAchievementGroupProgressInfoIsMutable();
              lineAchievementGroupProgressInfo_.addAll(other.lineAchievementGroupProgressInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.lineAchievementGroupProgressInfo_.isEmpty()) {
            if (lineAchievementGroupProgressInfoBuilder_.isEmpty()) {
              lineAchievementGroupProgressInfoBuilder_.dispose();
              lineAchievementGroupProgressInfoBuilder_ = null;
              lineAchievementGroupProgressInfo_ = other.lineAchievementGroupProgressInfo_;
              bitField0_ = (bitField0_ & ~0x00000004);
              lineAchievementGroupProgressInfoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLineAchievementGroupProgressInfoFieldBuilder() : null;
            } else {
              lineAchievementGroupProgressInfoBuilder_.addAllMessages(other.lineAchievementGroupProgressInfo_);
            }
          }
        }
        if (achievementProgressInfoBuilder_ == null) {
          if (!other.achievementProgressInfo_.isEmpty()) {
            if (achievementProgressInfo_.isEmpty()) {
              achievementProgressInfo_ = other.achievementProgressInfo_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureAchievementProgressInfoIsMutable();
              achievementProgressInfo_.addAll(other.achievementProgressInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.achievementProgressInfo_.isEmpty()) {
            if (achievementProgressInfoBuilder_.isEmpty()) {
              achievementProgressInfoBuilder_.dispose();
              achievementProgressInfoBuilder_ = null;
              achievementProgressInfo_ = other.achievementProgressInfo_;
              bitField0_ = (bitField0_ & ~0x00000008);
              achievementProgressInfoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAchievementProgressInfoFieldBuilder() : null;
            } else {
              achievementProgressInfoBuilder_.addAllMessages(other.achievementProgressInfo_);
            }
          }
        }
        if (other.hasGetPrizeAchievedId()) {
          mergeGetPrizeAchievedId(other.getGetPrizeAchievedId());
        }
        if (!other.getPrizeAchievedGroup_.isEmpty()) {
          if (getPrizeAchievedGroup_.isEmpty()) {
            getPrizeAchievedGroup_ = other.getPrizeAchievedGroup_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureGetPrizeAchievedGroupIsMutable();
            getPrizeAchievedGroup_.addAll(other.getPrizeAchievedGroup_);
          }
          onChanged();
        }
        if (other.hasScoreReachedTime()) {
          setScoreReachedTime(other.getScoreReachedTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (app.protobuf.server.AchievementServerContent.AchievementModuleObjMinorProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private app.protobuf.client.UtilContent.BoolArrayProto nonLineAchievedId_ = app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          app.protobuf.client.UtilContent.BoolArrayProto, app.protobuf.client.UtilContent.BoolArrayProto.Builder, app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder> nonLineAchievedIdBuilder_;
      /**
       * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
       *
       * <pre>
       *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
       * </pre>
       */
      public boolean hasNonLineAchievedId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
       *
       * <pre>
       *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
       * </pre>
       */
      public app.protobuf.client.UtilContent.BoolArrayProto getNonLineAchievedId() {
        if (nonLineAchievedIdBuilder_ == null) {
          return nonLineAchievedId_;
        } else {
          return nonLineAchievedIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
       *
       * <pre>
       *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
       * </pre>
       */
      public Builder setNonLineAchievedId(app.protobuf.client.UtilContent.BoolArrayProto value) {
        if (nonLineAchievedIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          nonLineAchievedId_ = value;
          onChanged();
        } else {
          nonLineAchievedIdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
       *
       * <pre>
       *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
       * </pre>
       */
      public Builder setNonLineAchievedId(
          app.protobuf.client.UtilContent.BoolArrayProto.Builder builderForValue) {
        if (nonLineAchievedIdBuilder_ == null) {
          nonLineAchievedId_ = builderForValue.build();
          onChanged();
        } else {
          nonLineAchievedIdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
       *
       * <pre>
       *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
       * </pre>
       */
      public Builder mergeNonLineAchievedId(app.protobuf.client.UtilContent.BoolArrayProto value) {
        if (nonLineAchievedIdBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              nonLineAchievedId_ != app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance()) {
            nonLineAchievedId_ =
              app.protobuf.client.UtilContent.BoolArrayProto.newBuilder(nonLineAchievedId_).mergeFrom(value).buildPartial();
          } else {
            nonLineAchievedId_ = value;
          }
          onChanged();
        } else {
          nonLineAchievedIdBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
       *
       * <pre>
       *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
       * </pre>
       */
      public Builder clearNonLineAchievedId() {
        if (nonLineAchievedIdBuilder_ == null) {
          nonLineAchievedId_ = app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance();
          onChanged();
        } else {
          nonLineAchievedIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
       *
       * <pre>
       *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
       * </pre>
       */
      public app.protobuf.client.UtilContent.BoolArrayProto.Builder getNonLineAchievedIdBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getNonLineAchievedIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
       *
       * <pre>
       *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
       * </pre>
       */
      public app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder getNonLineAchievedIdOrBuilder() {
        if (nonLineAchievedIdBuilder_ != null) {
          return nonLineAchievedIdBuilder_.getMessageOrBuilder();
        } else {
          return nonLineAchievedId_;
        }
      }
      /**
       * <code>optional .proto.BoolArrayProto nonLineAchievedId = 1;</code>
       *
       * <pre>
       *所有已完成的成就ID(非线性的)(按位存储,pos：int数组中的位置,value:该位置上的int值)
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          app.protobuf.client.UtilContent.BoolArrayProto, app.protobuf.client.UtilContent.BoolArrayProto.Builder, app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder> 
          getNonLineAchievedIdFieldBuilder() {
        if (nonLineAchievedIdBuilder_ == null) {
          nonLineAchievedIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              app.protobuf.client.UtilContent.BoolArrayProto, app.protobuf.client.UtilContent.BoolArrayProto.Builder, app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder>(
                  getNonLineAchievedId(),
                  getParentForChildren(),
                  isClean());
          nonLineAchievedId_ = null;
        }
        return nonLineAchievedIdBuilder_;
      }

      private java.util.List<app.protobuf.client.UtilContent.StringInt32PairProto> lineAchievementGroupCompleteInfo_ =
        java.util.Collections.emptyList();
      private void ensureLineAchievementGroupCompleteInfoIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          lineAchievementGroupCompleteInfo_ = new java.util.ArrayList<app.protobuf.client.UtilContent.StringInt32PairProto>(lineAchievementGroupCompleteInfo_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          app.protobuf.client.UtilContent.StringInt32PairProto, app.protobuf.client.UtilContent.StringInt32PairProto.Builder, app.protobuf.client.UtilContent.StringInt32PairProtoOrBuilder> lineAchievementGroupCompleteInfoBuilder_;

      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public java.util.List<app.protobuf.client.UtilContent.StringInt32PairProto> getLineAchievementGroupCompleteInfoList() {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(lineAchievementGroupCompleteInfo_);
        } else {
          return lineAchievementGroupCompleteInfoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public int getLineAchievementGroupCompleteInfoCount() {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          return lineAchievementGroupCompleteInfo_.size();
        } else {
          return lineAchievementGroupCompleteInfoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public app.protobuf.client.UtilContent.StringInt32PairProto getLineAchievementGroupCompleteInfo(int index) {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          return lineAchievementGroupCompleteInfo_.get(index);
        } else {
          return lineAchievementGroupCompleteInfoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public Builder setLineAchievementGroupCompleteInfo(
          int index, app.protobuf.client.UtilContent.StringInt32PairProto value) {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLineAchievementGroupCompleteInfoIsMutable();
          lineAchievementGroupCompleteInfo_.set(index, value);
          onChanged();
        } else {
          lineAchievementGroupCompleteInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public Builder setLineAchievementGroupCompleteInfo(
          int index, app.protobuf.client.UtilContent.StringInt32PairProto.Builder builderForValue) {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          ensureLineAchievementGroupCompleteInfoIsMutable();
          lineAchievementGroupCompleteInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          lineAchievementGroupCompleteInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public Builder addLineAchievementGroupCompleteInfo(app.protobuf.client.UtilContent.StringInt32PairProto value) {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLineAchievementGroupCompleteInfoIsMutable();
          lineAchievementGroupCompleteInfo_.add(value);
          onChanged();
        } else {
          lineAchievementGroupCompleteInfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public Builder addLineAchievementGroupCompleteInfo(
          int index, app.protobuf.client.UtilContent.StringInt32PairProto value) {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLineAchievementGroupCompleteInfoIsMutable();
          lineAchievementGroupCompleteInfo_.add(index, value);
          onChanged();
        } else {
          lineAchievementGroupCompleteInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public Builder addLineAchievementGroupCompleteInfo(
          app.protobuf.client.UtilContent.StringInt32PairProto.Builder builderForValue) {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          ensureLineAchievementGroupCompleteInfoIsMutable();
          lineAchievementGroupCompleteInfo_.add(builderForValue.build());
          onChanged();
        } else {
          lineAchievementGroupCompleteInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public Builder addLineAchievementGroupCompleteInfo(
          int index, app.protobuf.client.UtilContent.StringInt32PairProto.Builder builderForValue) {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          ensureLineAchievementGroupCompleteInfoIsMutable();
          lineAchievementGroupCompleteInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          lineAchievementGroupCompleteInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public Builder addAllLineAchievementGroupCompleteInfo(
          java.lang.Iterable<? extends app.protobuf.client.UtilContent.StringInt32PairProto> values) {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          ensureLineAchievementGroupCompleteInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, lineAchievementGroupCompleteInfo_);
          onChanged();
        } else {
          lineAchievementGroupCompleteInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public Builder clearLineAchievementGroupCompleteInfo() {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          lineAchievementGroupCompleteInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          lineAchievementGroupCompleteInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public Builder removeLineAchievementGroupCompleteInfo(int index) {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          ensureLineAchievementGroupCompleteInfoIsMutable();
          lineAchievementGroupCompleteInfo_.remove(index);
          onChanged();
        } else {
          lineAchievementGroupCompleteInfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public app.protobuf.client.UtilContent.StringInt32PairProto.Builder getLineAchievementGroupCompleteInfoBuilder(
          int index) {
        return getLineAchievementGroupCompleteInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public app.protobuf.client.UtilContent.StringInt32PairProtoOrBuilder getLineAchievementGroupCompleteInfoOrBuilder(
          int index) {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          return lineAchievementGroupCompleteInfo_.get(index);  } else {
          return lineAchievementGroupCompleteInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public java.util.List<? extends app.protobuf.client.UtilContent.StringInt32PairProtoOrBuilder> 
           getLineAchievementGroupCompleteInfoOrBuilderList() {
        if (lineAchievementGroupCompleteInfoBuilder_ != null) {
          return lineAchievementGroupCompleteInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(lineAchievementGroupCompleteInfo_);
        }
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public app.protobuf.client.UtilContent.StringInt32PairProto.Builder addLineAchievementGroupCompleteInfoBuilder() {
        return getLineAchievementGroupCompleteInfoFieldBuilder().addBuilder(
            app.protobuf.client.UtilContent.StringInt32PairProto.getDefaultInstance());
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public app.protobuf.client.UtilContent.StringInt32PairProto.Builder addLineAchievementGroupCompleteInfoBuilder(
          int index) {
        return getLineAchievementGroupCompleteInfoFieldBuilder().addBuilder(
            index, app.protobuf.client.UtilContent.StringInt32PairProto.getDefaultInstance());
      }
      /**
       * <code>repeated .proto.StringInt32PairProto lineAchievementGroupCompleteInfo = 5;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的最后一个完成的索引位置(线性的)
       * </pre>
       */
      public java.util.List<app.protobuf.client.UtilContent.StringInt32PairProto.Builder> 
           getLineAchievementGroupCompleteInfoBuilderList() {
        return getLineAchievementGroupCompleteInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          app.protobuf.client.UtilContent.StringInt32PairProto, app.protobuf.client.UtilContent.StringInt32PairProto.Builder, app.protobuf.client.UtilContent.StringInt32PairProtoOrBuilder> 
          getLineAchievementGroupCompleteInfoFieldBuilder() {
        if (lineAchievementGroupCompleteInfoBuilder_ == null) {
          lineAchievementGroupCompleteInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              app.protobuf.client.UtilContent.StringInt32PairProto, app.protobuf.client.UtilContent.StringInt32PairProto.Builder, app.protobuf.client.UtilContent.StringInt32PairProtoOrBuilder>(
                  lineAchievementGroupCompleteInfo_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          lineAchievementGroupCompleteInfo_ = null;
        }
        return lineAchievementGroupCompleteInfoBuilder_;
      }

      private java.util.List<app.protobuf.client.UtilContent.StringInt64PairProto> lineAchievementGroupProgressInfo_ =
        java.util.Collections.emptyList();
      private void ensureLineAchievementGroupProgressInfoIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          lineAchievementGroupProgressInfo_ = new java.util.ArrayList<app.protobuf.client.UtilContent.StringInt64PairProto>(lineAchievementGroupProgressInfo_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          app.protobuf.client.UtilContent.StringInt64PairProto, app.protobuf.client.UtilContent.StringInt64PairProto.Builder, app.protobuf.client.UtilContent.StringInt64PairProtoOrBuilder> lineAchievementGroupProgressInfoBuilder_;

      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public java.util.List<app.protobuf.client.UtilContent.StringInt64PairProto> getLineAchievementGroupProgressInfoList() {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(lineAchievementGroupProgressInfo_);
        } else {
          return lineAchievementGroupProgressInfoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public int getLineAchievementGroupProgressInfoCount() {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          return lineAchievementGroupProgressInfo_.size();
        } else {
          return lineAchievementGroupProgressInfoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public app.protobuf.client.UtilContent.StringInt64PairProto getLineAchievementGroupProgressInfo(int index) {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          return lineAchievementGroupProgressInfo_.get(index);
        } else {
          return lineAchievementGroupProgressInfoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder setLineAchievementGroupProgressInfo(
          int index, app.protobuf.client.UtilContent.StringInt64PairProto value) {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLineAchievementGroupProgressInfoIsMutable();
          lineAchievementGroupProgressInfo_.set(index, value);
          onChanged();
        } else {
          lineAchievementGroupProgressInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder setLineAchievementGroupProgressInfo(
          int index, app.protobuf.client.UtilContent.StringInt64PairProto.Builder builderForValue) {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          ensureLineAchievementGroupProgressInfoIsMutable();
          lineAchievementGroupProgressInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          lineAchievementGroupProgressInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder addLineAchievementGroupProgressInfo(app.protobuf.client.UtilContent.StringInt64PairProto value) {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLineAchievementGroupProgressInfoIsMutable();
          lineAchievementGroupProgressInfo_.add(value);
          onChanged();
        } else {
          lineAchievementGroupProgressInfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder addLineAchievementGroupProgressInfo(
          int index, app.protobuf.client.UtilContent.StringInt64PairProto value) {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLineAchievementGroupProgressInfoIsMutable();
          lineAchievementGroupProgressInfo_.add(index, value);
          onChanged();
        } else {
          lineAchievementGroupProgressInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder addLineAchievementGroupProgressInfo(
          app.protobuf.client.UtilContent.StringInt64PairProto.Builder builderForValue) {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          ensureLineAchievementGroupProgressInfoIsMutable();
          lineAchievementGroupProgressInfo_.add(builderForValue.build());
          onChanged();
        } else {
          lineAchievementGroupProgressInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder addLineAchievementGroupProgressInfo(
          int index, app.protobuf.client.UtilContent.StringInt64PairProto.Builder builderForValue) {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          ensureLineAchievementGroupProgressInfoIsMutable();
          lineAchievementGroupProgressInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          lineAchievementGroupProgressInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder addAllLineAchievementGroupProgressInfo(
          java.lang.Iterable<? extends app.protobuf.client.UtilContent.StringInt64PairProto> values) {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          ensureLineAchievementGroupProgressInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, lineAchievementGroupProgressInfo_);
          onChanged();
        } else {
          lineAchievementGroupProgressInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder clearLineAchievementGroupProgressInfo() {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          lineAchievementGroupProgressInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          lineAchievementGroupProgressInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder removeLineAchievementGroupProgressInfo(int index) {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          ensureLineAchievementGroupProgressInfoIsMutable();
          lineAchievementGroupProgressInfo_.remove(index);
          onChanged();
        } else {
          lineAchievementGroupProgressInfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public app.protobuf.client.UtilContent.StringInt64PairProto.Builder getLineAchievementGroupProgressInfoBuilder(
          int index) {
        return getLineAchievementGroupProgressInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public app.protobuf.client.UtilContent.StringInt64PairProtoOrBuilder getLineAchievementGroupProgressInfoOrBuilder(
          int index) {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          return lineAchievementGroupProgressInfo_.get(index);  } else {
          return lineAchievementGroupProgressInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public java.util.List<? extends app.protobuf.client.UtilContent.StringInt64PairProtoOrBuilder> 
           getLineAchievementGroupProgressInfoOrBuilderList() {
        if (lineAchievementGroupProgressInfoBuilder_ != null) {
          return lineAchievementGroupProgressInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(lineAchievementGroupProgressInfo_);
        }
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public app.protobuf.client.UtilContent.StringInt64PairProto.Builder addLineAchievementGroupProgressInfoBuilder() {
        return getLineAchievementGroupProgressInfoFieldBuilder().addBuilder(
            app.protobuf.client.UtilContent.StringInt64PairProto.getDefaultInstance());
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public app.protobuf.client.UtilContent.StringInt64PairProto.Builder addLineAchievementGroupProgressInfoBuilder(
          int index) {
        return getLineAchievementGroupProgressInfoFieldBuilder().addBuilder(
            index, app.protobuf.client.UtilContent.StringInt64PairProto.getDefaultInstance());
      }
      /**
       * <code>repeated .proto.StringInt64PairProto lineAchievementGroupProgressInfo = 6;</code>
       *
       * <pre>
       *key:成就类型，表中配置的type字段,value:成就组的进度(线性的)（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public java.util.List<app.protobuf.client.UtilContent.StringInt64PairProto.Builder> 
           getLineAchievementGroupProgressInfoBuilderList() {
        return getLineAchievementGroupProgressInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          app.protobuf.client.UtilContent.StringInt64PairProto, app.protobuf.client.UtilContent.StringInt64PairProto.Builder, app.protobuf.client.UtilContent.StringInt64PairProtoOrBuilder> 
          getLineAchievementGroupProgressInfoFieldBuilder() {
        if (lineAchievementGroupProgressInfoBuilder_ == null) {
          lineAchievementGroupProgressInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              app.protobuf.client.UtilContent.StringInt64PairProto, app.protobuf.client.UtilContent.StringInt64PairProto.Builder, app.protobuf.client.UtilContent.StringInt64PairProtoOrBuilder>(
                  lineAchievementGroupProgressInfo_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          lineAchievementGroupProgressInfo_ = null;
        }
        return lineAchievementGroupProgressInfoBuilder_;
      }

      private java.util.List<app.protobuf.client.UtilContent.Int32Int64PairProto> achievementProgressInfo_ =
        java.util.Collections.emptyList();
      private void ensureAchievementProgressInfoIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          achievementProgressInfo_ = new java.util.ArrayList<app.protobuf.client.UtilContent.Int32Int64PairProto>(achievementProgressInfo_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          app.protobuf.client.UtilContent.Int32Int64PairProto, app.protobuf.client.UtilContent.Int32Int64PairProto.Builder, app.protobuf.client.UtilContent.Int32Int64PairProtoOrBuilder> achievementProgressInfoBuilder_;

      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public java.util.List<app.protobuf.client.UtilContent.Int32Int64PairProto> getAchievementProgressInfoList() {
        if (achievementProgressInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(achievementProgressInfo_);
        } else {
          return achievementProgressInfoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public int getAchievementProgressInfoCount() {
        if (achievementProgressInfoBuilder_ == null) {
          return achievementProgressInfo_.size();
        } else {
          return achievementProgressInfoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32Int64PairProto getAchievementProgressInfo(int index) {
        if (achievementProgressInfoBuilder_ == null) {
          return achievementProgressInfo_.get(index);
        } else {
          return achievementProgressInfoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder setAchievementProgressInfo(
          int index, app.protobuf.client.UtilContent.Int32Int64PairProto value) {
        if (achievementProgressInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAchievementProgressInfoIsMutable();
          achievementProgressInfo_.set(index, value);
          onChanged();
        } else {
          achievementProgressInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder setAchievementProgressInfo(
          int index, app.protobuf.client.UtilContent.Int32Int64PairProto.Builder builderForValue) {
        if (achievementProgressInfoBuilder_ == null) {
          ensureAchievementProgressInfoIsMutable();
          achievementProgressInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          achievementProgressInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder addAchievementProgressInfo(app.protobuf.client.UtilContent.Int32Int64PairProto value) {
        if (achievementProgressInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAchievementProgressInfoIsMutable();
          achievementProgressInfo_.add(value);
          onChanged();
        } else {
          achievementProgressInfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder addAchievementProgressInfo(
          int index, app.protobuf.client.UtilContent.Int32Int64PairProto value) {
        if (achievementProgressInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAchievementProgressInfoIsMutable();
          achievementProgressInfo_.add(index, value);
          onChanged();
        } else {
          achievementProgressInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder addAchievementProgressInfo(
          app.protobuf.client.UtilContent.Int32Int64PairProto.Builder builderForValue) {
        if (achievementProgressInfoBuilder_ == null) {
          ensureAchievementProgressInfoIsMutable();
          achievementProgressInfo_.add(builderForValue.build());
          onChanged();
        } else {
          achievementProgressInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder addAchievementProgressInfo(
          int index, app.protobuf.client.UtilContent.Int32Int64PairProto.Builder builderForValue) {
        if (achievementProgressInfoBuilder_ == null) {
          ensureAchievementProgressInfoIsMutable();
          achievementProgressInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          achievementProgressInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder addAllAchievementProgressInfo(
          java.lang.Iterable<? extends app.protobuf.client.UtilContent.Int32Int64PairProto> values) {
        if (achievementProgressInfoBuilder_ == null) {
          ensureAchievementProgressInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, achievementProgressInfo_);
          onChanged();
        } else {
          achievementProgressInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder clearAchievementProgressInfo() {
        if (achievementProgressInfoBuilder_ == null) {
          achievementProgressInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          achievementProgressInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public Builder removeAchievementProgressInfo(int index) {
        if (achievementProgressInfoBuilder_ == null) {
          ensureAchievementProgressInfoIsMutable();
          achievementProgressInfo_.remove(index);
          onChanged();
        } else {
          achievementProgressInfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32Int64PairProto.Builder getAchievementProgressInfoBuilder(
          int index) {
        return getAchievementProgressInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32Int64PairProtoOrBuilder getAchievementProgressInfoOrBuilder(
          int index) {
        if (achievementProgressInfoBuilder_ == null) {
          return achievementProgressInfo_.get(index);  } else {
          return achievementProgressInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public java.util.List<? extends app.protobuf.client.UtilContent.Int32Int64PairProtoOrBuilder> 
           getAchievementProgressInfoOrBuilderList() {
        if (achievementProgressInfoBuilder_ != null) {
          return achievementProgressInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(achievementProgressInfo_);
        }
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32Int64PairProto.Builder addAchievementProgressInfoBuilder() {
        return getAchievementProgressInfoFieldBuilder().addBuilder(
            app.protobuf.client.UtilContent.Int32Int64PairProto.getDefaultInstance());
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public app.protobuf.client.UtilContent.Int32Int64PairProto.Builder addAchievementProgressInfoBuilder(
          int index) {
        return getAchievementProgressInfoFieldBuilder().addBuilder(
            index, app.protobuf.client.UtilContent.Int32Int64PairProto.getDefaultInstance());
      }
      /**
       * <code>repeated .proto.Int32Int64PairProto achievementProgressInfo = 7;</code>
       *
       * <pre>
       *key:成就ID value:成就当前进度（必需是累计的数据才会存到这里，（等级，坐骑等级等，已经存在其它模块的数据，在这里不会存储)
       * </pre>
       */
      public java.util.List<app.protobuf.client.UtilContent.Int32Int64PairProto.Builder> 
           getAchievementProgressInfoBuilderList() {
        return getAchievementProgressInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          app.protobuf.client.UtilContent.Int32Int64PairProto, app.protobuf.client.UtilContent.Int32Int64PairProto.Builder, app.protobuf.client.UtilContent.Int32Int64PairProtoOrBuilder> 
          getAchievementProgressInfoFieldBuilder() {
        if (achievementProgressInfoBuilder_ == null) {
          achievementProgressInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              app.protobuf.client.UtilContent.Int32Int64PairProto, app.protobuf.client.UtilContent.Int32Int64PairProto.Builder, app.protobuf.client.UtilContent.Int32Int64PairProtoOrBuilder>(
                  achievementProgressInfo_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          achievementProgressInfo_ = null;
        }
        return achievementProgressInfoBuilder_;
      }

      private app.protobuf.client.UtilContent.BoolArrayProto getPrizeAchievedId_ = app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          app.protobuf.client.UtilContent.BoolArrayProto, app.protobuf.client.UtilContent.BoolArrayProto.Builder, app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder> getPrizeAchievedIdBuilder_;
      /**
       * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
       *
       * <pre>
       * 已经领取的成就奖励
       * </pre>
       */
      public boolean hasGetPrizeAchievedId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
       *
       * <pre>
       * 已经领取的成就奖励
       * </pre>
       */
      public app.protobuf.client.UtilContent.BoolArrayProto getGetPrizeAchievedId() {
        if (getPrizeAchievedIdBuilder_ == null) {
          return getPrizeAchievedId_;
        } else {
          return getPrizeAchievedIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
       *
       * <pre>
       * 已经领取的成就奖励
       * </pre>
       */
      public Builder setGetPrizeAchievedId(app.protobuf.client.UtilContent.BoolArrayProto value) {
        if (getPrizeAchievedIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getPrizeAchievedId_ = value;
          onChanged();
        } else {
          getPrizeAchievedIdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
       *
       * <pre>
       * 已经领取的成就奖励
       * </pre>
       */
      public Builder setGetPrizeAchievedId(
          app.protobuf.client.UtilContent.BoolArrayProto.Builder builderForValue) {
        if (getPrizeAchievedIdBuilder_ == null) {
          getPrizeAchievedId_ = builderForValue.build();
          onChanged();
        } else {
          getPrizeAchievedIdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
       *
       * <pre>
       * 已经领取的成就奖励
       * </pre>
       */
      public Builder mergeGetPrizeAchievedId(app.protobuf.client.UtilContent.BoolArrayProto value) {
        if (getPrizeAchievedIdBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              getPrizeAchievedId_ != app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance()) {
            getPrizeAchievedId_ =
              app.protobuf.client.UtilContent.BoolArrayProto.newBuilder(getPrizeAchievedId_).mergeFrom(value).buildPartial();
          } else {
            getPrizeAchievedId_ = value;
          }
          onChanged();
        } else {
          getPrizeAchievedIdBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
       *
       * <pre>
       * 已经领取的成就奖励
       * </pre>
       */
      public Builder clearGetPrizeAchievedId() {
        if (getPrizeAchievedIdBuilder_ == null) {
          getPrizeAchievedId_ = app.protobuf.client.UtilContent.BoolArrayProto.getDefaultInstance();
          onChanged();
        } else {
          getPrizeAchievedIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
       *
       * <pre>
       * 已经领取的成就奖励
       * </pre>
       */
      public app.protobuf.client.UtilContent.BoolArrayProto.Builder getGetPrizeAchievedIdBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getGetPrizeAchievedIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
       *
       * <pre>
       * 已经领取的成就奖励
       * </pre>
       */
      public app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder getGetPrizeAchievedIdOrBuilder() {
        if (getPrizeAchievedIdBuilder_ != null) {
          return getPrizeAchievedIdBuilder_.getMessageOrBuilder();
        } else {
          return getPrizeAchievedId_;
        }
      }
      /**
       * <code>optional .proto.BoolArrayProto get_prize_achieved_id = 3;</code>
       *
       * <pre>
       * 已经领取的成就奖励
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          app.protobuf.client.UtilContent.BoolArrayProto, app.protobuf.client.UtilContent.BoolArrayProto.Builder, app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder> 
          getGetPrizeAchievedIdFieldBuilder() {
        if (getPrizeAchievedIdBuilder_ == null) {
          getPrizeAchievedIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              app.protobuf.client.UtilContent.BoolArrayProto, app.protobuf.client.UtilContent.BoolArrayProto.Builder, app.protobuf.client.UtilContent.BoolArrayProtoOrBuilder>(
                  getGetPrizeAchievedId(),
                  getParentForChildren(),
                  isClean());
          getPrizeAchievedId_ = null;
        }
        return getPrizeAchievedIdBuilder_;
      }

      private java.util.List<java.lang.Integer> getPrizeAchievedGroup_ = java.util.Collections.emptyList();
      private void ensureGetPrizeAchievedGroupIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          getPrizeAchievedGroup_ = new java.util.ArrayList<java.lang.Integer>(getPrizeAchievedGroup_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 get_prize_achieved_group = 4;</code>
       *
       * <pre>
       * 已经领取的成就积分奖励
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getGetPrizeAchievedGroupList() {
        return java.util.Collections.unmodifiableList(getPrizeAchievedGroup_);
      }
      /**
       * <code>repeated int32 get_prize_achieved_group = 4;</code>
       *
       * <pre>
       * 已经领取的成就积分奖励
       * </pre>
       */
      public int getGetPrizeAchievedGroupCount() {
        return getPrizeAchievedGroup_.size();
      }
      /**
       * <code>repeated int32 get_prize_achieved_group = 4;</code>
       *
       * <pre>
       * 已经领取的成就积分奖励
       * </pre>
       */
      public int getGetPrizeAchievedGroup(int index) {
        return getPrizeAchievedGroup_.get(index);
      }
      /**
       * <code>repeated int32 get_prize_achieved_group = 4;</code>
       *
       * <pre>
       * 已经领取的成就积分奖励
       * </pre>
       */
      public Builder setGetPrizeAchievedGroup(
          int index, int value) {
        ensureGetPrizeAchievedGroupIsMutable();
        getPrizeAchievedGroup_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 get_prize_achieved_group = 4;</code>
       *
       * <pre>
       * 已经领取的成就积分奖励
       * </pre>
       */
      public Builder addGetPrizeAchievedGroup(int value) {
        ensureGetPrizeAchievedGroupIsMutable();
        getPrizeAchievedGroup_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 get_prize_achieved_group = 4;</code>
       *
       * <pre>
       * 已经领取的成就积分奖励
       * </pre>
       */
      public Builder addAllGetPrizeAchievedGroup(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGetPrizeAchievedGroupIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, getPrizeAchievedGroup_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 get_prize_achieved_group = 4;</code>
       *
       * <pre>
       * 已经领取的成就积分奖励
       * </pre>
       */
      public Builder clearGetPrizeAchievedGroup() {
        getPrizeAchievedGroup_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private int scoreReachedTime_ ;
      /**
       * <code>optional int32 scoreReachedTime = 8;</code>
       *
       * <pre>
       * 成就积分更新的时间，用来做排行榜
       * </pre>
       */
      public boolean hasScoreReachedTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 scoreReachedTime = 8;</code>
       *
       * <pre>
       * 成就积分更新的时间，用来做排行榜
       * </pre>
       */
      public int getScoreReachedTime() {
        return scoreReachedTime_;
      }
      /**
       * <code>optional int32 scoreReachedTime = 8;</code>
       *
       * <pre>
       * 成就积分更新的时间，用来做排行榜
       * </pre>
       */
      public Builder setScoreReachedTime(int value) {
        bitField0_ |= 0x00000040;
        scoreReachedTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 scoreReachedTime = 8;</code>
       *
       * <pre>
       * 成就积分更新的时间，用来做排行榜
       * </pre>
       */
      public Builder clearScoreReachedTime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        scoreReachedTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.AchievementModuleObjMinorProto)
    }

    static {
      defaultInstance = new AchievementModuleObjMinorProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.AchievementModuleObjMinorProto)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_AchievementModuleObjMinorProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_AchievementModuleObjMinorProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037server/achievement_server.proto\022\005proto" +
      "\032\021client/util.proto\"\217\003\n\036AchievementModul" +
      "eObjMinorProto\0220\n\021nonLineAchievedId\030\001 \001(" +
      "\0132\025.proto.BoolArrayProto\022E\n lineAchievem" +
      "entGroupCompleteInfo\030\005 \003(\0132\033.proto.Strin" +
      "gInt32PairProto\022E\n lineAchievementGroupP" +
      "rogressInfo\030\006 \003(\0132\033.proto.StringInt64Pai" +
      "rProto\022;\n\027achievementProgressInfo\030\007 \003(\0132" +
      "\032.proto.Int32Int64PairProto\0224\n\025get_prize" +
      "_achieved_id\030\003 \001(\0132\025.proto.BoolArrayProt",
      "o\022 \n\030get_prize_achieved_group\030\004 \003(\005\022\030\n\020s" +
      "coreReachedTime\030\010 \001(\005B1\n\023app.protobuf.se" +
      "rverB\030AchievementServerContentH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          app.protobuf.client.UtilContent.getDescriptor(),
        }, assigner);
    internal_static_proto_AchievementModuleObjMinorProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_proto_AchievementModuleObjMinorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_AchievementModuleObjMinorProto_descriptor,
        new java.lang.String[] { "NonLineAchievedId", "LineAchievementGroupCompleteInfo", "LineAchievementGroupProgressInfo", "AchievementProgressInfo", "GetPrizeAchievedId", "GetPrizeAchievedGroup", "ScoreReachedTime", });
    app.protobuf.client.UtilContent.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
