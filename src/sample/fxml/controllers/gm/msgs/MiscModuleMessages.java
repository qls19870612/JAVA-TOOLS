// Generated by tool. DO NOT EDIT!

package sample.fxml.controllers.gm.msgs;

import org.jboss.netty.buffer.ChannelBuffer;

import sample.fxml.controllers.gm.Modules;
import sample.utils.BufferUtil;

import static sample.utils.BufferUtil.computeVarInt32Size;
import static sample.utils.BufferUtil.computeVarInt64Size;
import static sample.utils.BufferUtil.onlySendHeadAndAByteMessage;
import static sample.utils.BufferUtil.onlySendHeaderMessage;
import static sample.utils.BufferUtil.writeVarInt32;
import static sample.utils.BufferUtil.writeVarInt64;


public class MiscModuleMessages {

    public static final int MODULE_ID = Modules.MISC_MODULE_ID;

    /**
     * 请求服务器当前时间. 后面没有参数
     */
    public static final int C2S_GET_SERVER_TIME = 1;

    /**
     * 返回服务器当前时间
     *
     * varint64 当前时间
     * varint32 开服天数
     * varint32 开服时间
     */
    public static final int S2C_GET_SERVER_TIME_OK = 1;

    public static ChannelBuffer getServerTimeOk(long time, int startDay, int startTime) {
        ChannelBuffer buffer = BufferUtil.newFixedSizeMessage(MODULE_ID, S2C_GET_SERVER_TIME_OK,
                computeVarInt64Size(time) + computeVarInt32Size(startDay) + computeVarInt32Size(startTime));
        writeVarInt64(buffer, time);
        writeVarInt32(buffer, startDay);
        writeVarInt32(buffer, startTime);
        return buffer;
    }

    /**
     * 客户端定时发送心跳. 第一次进入场景之后10秒后开始发送 (客户端第一次发送加载完成消息后的10秒后发送第一次)
     *
     * 每10秒发送一次 (开始发送之后, 不管风吹雨打都要发. 每10秒一次, 不多不少). 服务器判断外挂用
     *
     * varint32 客户端运行的时间(秒)
     */
    public static final int C2S_HEART_BEAT = 2;

    /**
     * 心跳包收到
     */
    public static final int S2C_HEART_BEAT_OK = 2;

    public static final ChannelBuffer heartBeatOk = onlySendHeaderMessage(MODULE_ID, S2C_HEART_BEAT_OK);

    /**
     * 心跳错误
     *
     * 1 心跳过快
     * 2 心跳过慢
     */
    public static final int S2C_HEART_BEAT_ERR = 3;

    public static ChannelBuffer ERR_HEART_BEAT_TOO_FAST = onlySendHeadAndAByteMessage(MODULE_ID, S2C_HEART_BEAT_ERR, 1);
    public static ChannelBuffer ERR_HEART_BEAT_TOO_SLOW = onlySendHeadAndAByteMessage(MODULE_ID, S2C_HEART_BEAT_ERR, 2);

    /**
     * 设置客户端的数据
     *
     * varint32 标识
     * string 数据
     */
    public static final int C2S_SET_CLIENT_CONFIGS = 3;

    /**
     * 设置客户端的数据成功
     */
    public static final int S2C_SET_CLIENT_CONFIGS_OK = 4;

    public static final ChannelBuffer setClientConfigsOk = onlySendHeaderMessage(MODULE_ID, S2C_SET_CLIENT_CONFIGS_OK);

}